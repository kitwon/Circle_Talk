webpackJsonp([0xaa991be80295],{301:function(n,s){n.exports={data:{markdownRemark:{html:'<p>好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。</p>\n<h3>小科普</h3>\n<p>什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！</p>\n<!-- more -->\n<h3>Demo功能需求</h3>\n<ul>\n<li>input输入内容，回车键或按钮增加一条todo</li>\n<li>checkbox添加完成状态</li>\n<li>移动到列表时显示删除</li>\n<li>显示todo总数和已经完成数</li>\n<li>list全选</li>\n<li>清除已完成</li>\n<li>添加动画效果</li>\n</ul>\n<h3>开始</h3>\n<p>开始需要npm安装一下等下要用的packages，如果是checkout我的demo，就动动手指头，install一下，我的demo地址是<a href="https://github.com/kitwon/react-todo">https://github.com/kitwon/react-todo</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span>\n</code></pre>\n      </div>\n<h4>配置webpack</h4>\n<p>所有东西安装完成之后首先就是配置<a href="http://webpack.github.io/docs/">webpack</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tentry <span class="token punctuation">:</span> <span class="token string">"./src/entry.js"</span><span class="token punctuation">,</span>\n\toutput <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\tpath <span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"out"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tpublicPath <span class="token punctuation">:</span> <span class="token string">"./out/"</span><span class="token punctuation">,</span>\n\t\tfilename <span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\texternals <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\treact <span class="token punctuation">:</span> <span class="token string">"React"</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tmodule <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\tloaders <span class="token punctuation">:</span> <span class="token punctuation">[</span>\n\t\t\t<span class="token punctuation">{</span> test <span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span> loader <span class="token punctuation">:</span> <span class="token string">"jsx"</span><span class="token punctuation">,</span>include<span class="token punctuation">:</span> <span class="token regex">/src/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">{</span> test <span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span> loader <span class="token punctuation">:</span> <span class="token string">"style!css"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">{</span> test <span class="token punctuation">:</span> <span class="token regex">/\\.less$/</span><span class="token punctuation">,</span> loader <span class="token punctuation">:</span> <span class="token string">"style!css!less"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">{</span> test <span class="token punctuation">:</span> <span class="token regex">/\\.(jpg|png)$/</span><span class="token punctuation">,</span> loader <span class="token punctuation">:</span> <span class="token string">"url?limit=8192"</span> <span class="token punctuation">}</span>\n\t\t<span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>从上面可以看到，webpack的入口文件是entry.js，打包输出的文件是bundle.js，external属性是告诉webpack，当API已经存在的时候，使用全局变量，并不作任何操作。</p>\n<p>loader的话没啥，看文档就知道，各种编译打包。具体使用方法可以看官方文档。</p>\n<h4>上代码</h4>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'React\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tReactDOM <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'react-dom\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../less/app.less\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> AppFooter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./AppFooter\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tAppHeader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./AppHeader\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tItemMain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./ItemMain\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">var</span> App <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tgetInitialState <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\ttodoItem <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t\tisAllChecked <span class="token punctuation">:</span> <span class="token boolean">false</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token comment">//添加todo</span>\n\taddItem <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> todoList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isAllChecked <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t <span class="token comment">//更改todo状态</span>\n\tchangeTodoState <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> isDone<span class="token punctuation">,</span> isAllChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// isAllChange = false;</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>isAllChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\t\ttodoItem<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\ttodo<span class="token punctuation">.</span>isDone <span class="token operator">=</span> isDone<span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token keyword">return</span> todo<span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t\tisAllChecked <span class="token punctuation">:</span> isDone\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isDone <span class="token operator">=</span> isDone<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">allChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token comment">//删除todo</span>\n\tdeleteTodo <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> newTodo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>todoList<span class="token punctuation">:</span> newTodo<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token comment">//清楚已完成</span>\n\tclearDone <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> doneList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> item<span class="token punctuation">.</span>isDone <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>todoItem<span class="token punctuation">:</span> doneList<span class="token punctuation">,</span> isAllChecked<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token comment">//全部完成</span>\n\tallChecked <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> allCheck <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> item<span class="token punctuation">.</span>isDone <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>allCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isAllChecked <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    \trender <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t\t<span class="token keyword">var</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>\n    \t\t\ttodoLength <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    \t\t\tdoneLength <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \t\t\t\t<span class="token keyword">return</span> item<span class="token punctuation">.</span>isDone <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    \t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token number">0</span>\n    \t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \t    \t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n    \t        \t<span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"panel"</span><span class="token operator">></span>\n    \t        \t\t<span class="token operator">&lt;</span>header  className<span class="token operator">=</span><span class="token string">"mainHeader"</span><span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>Webpack <span class="token operator">+</span> React TODO Demo<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>\n    \t        \t\t<span class="token operator">&lt;</span>AppHeader addItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addItem<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n    \t        \t\t<span class="token operator">&lt;</span>ItemMain itemList<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">}</span> changeTodoState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span> deleteTodo<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteTodo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    \t        \t    \t<span class="token operator">&lt;</span>AppFooter <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> isAllChecked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isAllChecked<span class="token punctuation">}</span> clearDone<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clearDone<span class="token punctuation">}</span> changeAllState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    \t        \t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    \t    \t<span class="token punctuation">)</span>\n    \t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//渲染</span>\n</code></pre>\n      </div>\n<p>从代码上面可以看到各种require，没加载commonjs、seajs或其他模块化工具，为什么能直接require呢，而且还有require less，没错，webpack就是那么暴力！js后面都会打包好一个文件，样式都会加载到html里面，做spa时候，和react简直绝配。</p>\n<h4>App生命 - state</h4>\n<p>React主流思想就是父组件控制state，然后通过props传递给子组建，所以简单来说界面就像状态机，只要更新state，然后根据新的state重新渲染界面，不需要操作dom，所以react高性能原因也是因为这个。\n从最上代码就可以看出父组件中的定义的方法基本是整个todo的功能了，然后render方法即渲染html和组件。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ItemMain itemList<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todoItem<span class="token punctuation">}</span> changeTodoState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span> deleteTodo<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteTodo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>\n<p>然后取一小段渲染组件代码（上面代码）就可发现，父组件向ItemMain这个组件传了4个属性，其中itemList为state，只要todoItem一更新，react就会重新渲染这个组件，其他三个为方法，方法更新也会重新渲染组件。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// ItemMain.js</span>\n<span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'React\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> Items <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./Items\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> ItemMain <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\trender <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>section<span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"itemList"</span><span class="token operator">></span>\n\t\t\t\t\t<span class="token punctuation">{</span>_this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>itemList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t<span class="token operator">&lt;</span>Items <span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>_this<span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\t\t\t\t\t\t<span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">></span>\n\t\t\t\t\t<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里不注释代码不高亮，比较奇葩，各位官人将就着看<span class="token operator">--</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> ItemMain<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>看这里估计有点蒙，我自己看的时候也有点蒙，因为太久的代码了哈哈哈。\n这个js只有一个循环Item的逻辑，首先看看<code class="language-text">{...todo}</code>这个prop，这个是把itemList[i]中的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">数组对象解构</a>，然后传到item里面，如果没有...这个字符，则需要</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">\t<span class="token operator">&lt;</span>Items text<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span> isDone<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> changeTodoState<span class="token operator">=</span><span class="token punctuation">{</span>proprs<span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span> deleteTodo<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>deleteTodo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre>\n      </div>\n<p>具体数据大家可以在代码里面console打印一下，这样印象会更深。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// item.js</span>\n<span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'React\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> Items <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\thandleChange <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> isDone <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeTodoState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\thandleDeleteTodo <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\trender <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> doneStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token punctuation">{</span>textDecoration<span class="token punctuation">:</span> <span class="token string">\'line-through\'</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>textDecoration <span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">}</span> onMouseOver<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMouseOver<span class="token punctuation">}</span> onMouseOut<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMouseOut<span class="token punctuation">}</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span>doneStyle<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"btn btn-default delete-item"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteTodo<span class="token punctuation">}</span><span class="token operator">></span><span class="token keyword">delete</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> Items<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>这个就是js里面有两个方法，一个是改变状态，一个是删除当前todo，这这能发现，两个方法都是执行了又父组件传过来的方法，如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeTodoState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>执行这个函数，state就会更新，react就会根据状态重新渲染组件</p>\n<h4>其他组件</h4>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// AppHeader.js</span>\n<span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'React\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> AppHeader <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tgetInitialState <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\ttext <span class="token punctuation">:</span> <span class="token string">""</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\thandlerKeyUp <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">var</span> value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n\t\t\t<span class="token keyword">var</span> newTodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t\t\ttext <span class="token punctuation">:</span> value<span class="token punctuation">,</span>\n\t\t\t\tisDone <span class="token punctuation">:</span> <span class="token boolean">false</span>\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\tevent<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>newTodoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\thandleChange <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text <span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\thandlerClick <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> newTodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t\ttext <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n\t\t\tisDone <span class="token punctuation">:</span> <span class="token boolean">false</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>newTodoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\trender <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">"appHeader from-group"</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"test"</span> className<span class="token operator">=</span><span class="token string">"form-control"</span> onKeyUp<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerKeyUp<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> placeholder<span class="token operator">=</span><span class="token string">"add one todo"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerClick<span class="token punctuation">}</span><span class="token operator">></span>add one<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AppHeader<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// AppHeader.js</span>\n<span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'React\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> AppFooter <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\thandleClick <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">clearDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\thandleAllState <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeAllState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\trender <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>\n\t\t\t<span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">"appFooter"</span><span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>div<span class="token operator">></span>\n\t\t\t\t\t<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isAllChecked<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAllState<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n\t\t\t\t\t<span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>doneLength<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>已经完成 <span class="token operator">/</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todoLength<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>总数\n\t\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\t\t\t\t<span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"btn btn-default btn-tiny pull-right"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>clean done<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\t\t\t<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AppFooter<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Header Footer的方法都是大同小异，输入改变state，然后存起来，执行相应操作时候通过props的方法传给父组件，然后重新渲染界面。</p>\n<h3>总结</h3>\n<p>回头看代码，react的组件化相比现在的组件化思想真的先进很多。React通过父组件来控制状态，并通过props传递给子组件。因此我们能很容易看出我们的事件属于哪个组件管理，然后修改相应的方法，维护起来相当高效，相比现在的控制dom，每次修改按钮的方法，都需要先找到id或者class，然后绑定响应的方法，假如页面id或者class改变，页面逻辑又非常复杂的话，修改起来是相当麻烦的。\nReact凭着出色的设计思想和性能，我相信不久就会成为主流的移动端开发方式，至于PC端，大天朝你懂的。</p>',
frontmatter:{date:"March 02, 2016",path:"/post/react-todo",title:"React-todo demo"},headings:[{depth:3,value:"小科普"},{depth:3,value:"Demo功能需求"},{depth:3,value:"开始"},{depth:4,value:"配置webpack"},{depth:4,value:"上代码"},{depth:4,value:"App生命 - state"},{depth:4,value:"其他组件"},{depth:3,value:"总结"}]}},pathContext:{prev:{title:"使用nodejs写一个命令行程序",date:"2017-05-16",category:["前端"],tags:["nodejs","bash"],path:"/post/node-command-app"},next:!1}}}});
//# sourceMappingURL=path---post-react-todo-ce2c62435f65572588af.js.map
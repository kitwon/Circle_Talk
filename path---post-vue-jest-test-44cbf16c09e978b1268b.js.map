{"version":3,"sources":["webpack:///path---post-vue-jest-test-44cbf16c09e978b1268b.js","webpack:///./.cache/json/post-vue-jest-test.json"],"names":["webpackJsonp","304","module","exports","data","markdownRemark","html","frontmatter","date","path","title","headings","depth","value","pathContext","prev","category","tags","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,o7JAAo1IC,aAAkqBC,KAAA,kBAAAC,KAAA,sBAAAC,MAAA,uBAAoFC,WAAcC,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,WAA4BC,aAAgBC,MAAQL,MAAA,kBAAAF,KAAA,aAAAQ,UAAA,MAAAC,MAAA,sCAAAR,KAAA,uBAA2IS,MAASR,MAAA,mBAAAF,KAAA,aAAAQ,SAAA,KAAAC,KAAA,KAAAR,KAAA","file":"path---post-vue-jest-test-44cbf16c09e978b1268b.js","sourcesContent":["webpackJsonp([153923656702786],{\n\n/***/ 304:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n<!-- more -->\\n<h2>package.json</h2>\\n<p>下面的配置都在<strong>package.json</strong>文件中配置。</p>\\n<p>在文件最底部添加下面代码</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  // ...\\n  \\\"jest\\\": {\\n    // 配置文件拓展名\\n    \\\"moduleFileExtensions\\\": [\\n      \\\"js\\\",\\n      \\\"vue\\\"\\n    ],\\n    // 匹配webpack中配置的alias\\n    \\\"moduleNameMapper\\\": {\\n      \\\"^vue$\\\": \\\"vue/dist/vue.common.js\\\",\\n      \\\"^@(.*)$\\\": \\\"&#x3C;rootDir>/src$1\\\"\\n    },\\n    // 编译工具\\n    \\\"transform\\\": {\\n      \\\".*\\\\\\\\.(vue)$\\\": \\\"&#x3C;rootDir>/node_modules/jest-vue-preprocessor\\\",\\n      \\\".*\\\": \\\"babel-jest\\\"\\n    }\\n  }\\n}\\n</code></pre>\\n<!-- more -->\\n<p>然后在上面<code>script</code>中添加一条新的命令</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  // ...\\n  \\\"test\\\": \\\"./node_modules/.bin/jest\\\"\\n}\\n</code></pre>\\n<p>然后就配置好了，很快，很舒服。</p>\\n<h1>跑个测试</h1>\\n<p>首先，我有个vue组件cell，一个简单的列表item组件，代码如下</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;!-- vue template -->\\n&#x3C;template>\\n  &#x3C;a class=\\\"ui-cell\\\" :href=\\\"href\\\">\\n    &#x3C;div class=\\\"ui-cell-wrapper\\\">\\n      &#x3C;slot name=\\\"icon\\\">\\n        &#x3C;i v-if=\\\"iconClass\\\" :class=\\\"iconClass\\\">&#x3C;/i>\\n      &#x3C;/slot>\\n      &#x3C;slot name=\\\"title\\\">\\n        &#x3C;div class=\\\"ui-cell-title\\\">\\n          &#x3C;div class=\\\"ui-cell-text\\\" v-text=\\\"title\\\">&#x3C;/div>\\n          &#x3C;div class=\\\"ui-cell-label\\\" v-if=\\\"label\\\" v-text=\\\"label\\\">&#x3C;/div>\\n        &#x3C;/div>\\n      &#x3C;/slot>\\n      &#x3C;div class=\\\"ui-cell-value\\\" :class=\\\"{ 'isLink': isLink }\\\">\\n        &#x3C;slot>\\n           &#x3C;div v-text=\\\"value\\\">&#x3C;/div>\\n        &#x3C;/slot>\\n      &#x3C;/div>\\n      &#x3C;i class=\\\"icon-arrow-right\\\" v-if=\\\"isLink\\\">&#x3C;/i>\\n    &#x3C;/div>\\n  &#x3C;/a>\\n&#x3C;/template>\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">export default {\\n  name: 'ui-cell',\\n  props: {\\n    to: [String, Object],\\n    iconClass: String,\\n    title: String,\\n    label: String,\\n    value: {\\n      default: ''\\n    }\\n  },\\n  computed: {\\n    href () {\\n      if (this.to &#x26;&#x26; !this.added &#x26;&#x26; this.$router) {\\n        const resolve = this.$router.match(this.to)\\n        if (resolve.matched.length &#x3C;= 0) {\\n          return this.to\\n        }\\n\\n        this.$nextTick(() => {\\n          this.added = true\\n          this.$el.addEventListener('click', this.handleClick)\\n        })\\n        return resolve.path\\n      }\\n\\n      return this.to\\n    },\\n    isLink () {\\n      return !!this.to\\n    }\\n  },\\n  methods: {\\n    handleClick (e) {\\n      e.preventDefault()\\n      this.$router.push(this.href)\\n    }\\n  }\\n}\\n</code></pre>\\n<p>然后编写测试文件</p>\\n<pre><code class=\\\"language-javascript\\\">import Vue from 'vue'\\nimport Cell from '@/components/cell'\\nimport VueRouter from 'vue-router'\\n\\nVue.use(VueRouter)\\n\\nconst routes = [\\n  {\\n    path: '/foo',\\n    component: Cell\\n  }\\n]\\nconst router = new VueRouter({\\n  routes\\n})\\n\\nconst mockFn = jest.fn()\\nCell.methods = {\\n  handleClick(e) {\\n    mockFn.mockReturnValue(true)\\n  }\\n}\\n\\nconst Constructor = Vue.extend(Cell)\\nconst vm = new Constructor({\\n  propsData: {\\n    title: 'cell1',\\n    value: 'value1',\\n    label: 'label1'\\n  }\\n}).$mount()\\n\\nconst vm2 = new Constructor({\\n  router,\\n  propsData: {\\n    title: 'cell2',\\n    value: 'value2',\\n    to: '/foo'\\n  }\\n}).$mount()\\n\\nconst vm3 = new Constructor({\\n  propsData: {\\n    title: 'cell3',\\n    value: 'value3',\\n    iconClass: 'icon-test'\\n  }\\n}).$mount()\\n\\ndescribe('Cell component', () => {\\n  test('render currect dom', () => {\\n    expect(vm.$el).toMatchSnapshot()\\n    expect(vm2.$el).toMatchSnapshot()\\n    expect(vm3.$el).toMatchSnapshot()\\n  })\\n\\n  test('router action currectly run', () => {\\n    vm2.$nextTick(() => {\\n      vm2.$el.click()\\n      expect(vm2.href).toBe(vm2.to)\\n      expect(mockFn()).toBe(true)\\n    })\\n  })\\n})\\n</code></pre>\\n<p>然后跑一下命令</p>\\n<pre><code class=\\\"language-bash\\\">$ npm run test\\n\\n> jest-test@1.0.0 test /Users/kit/projects/jest-test\\n> jest\\n\\n PASS  test/unit/Cell.spec.js\\n  Cell component\\n    ✓ render currect dom (8ms)\\n    ✓ router action currectly run (2ms)\\n\\nSnapshot Summary\\n › 3 snapshots written in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   3 added, 3 total\\nTime:        2.295\\n</code></pre>\\n<h1>last</h1>\\n<p>jest给我们提供了一个便捷的测试环境，简单的几个配置项，即可完成编译，不像mocha或jasmine需要其他<code>node module</code>配合完成测试的工作。个人认为fb还是做到了他希望的，让测试变得简单，让开发者有更多的时间去开发。至于自动化测试的好处这里就不再赘述了，有兴趣的朋友可以自行baidu、google。</p>\",\"frontmatter\":{\"date\":\"August 18, 2017\",\"path\":\"/post/vue-jest-test\",\"title\":\"在vue项目中使用jest进行单元测试\"},\"headings\":[{\"depth\":1,\"value\":\"配置\"},{\"depth\":2,\"value\":\"package.json\"},{\"depth\":1,\"value\":\"跑个测试\"},{\"depth\":1,\"value\":\"last\"}]}},\"pathContext\":{\"prev\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"tags\":[\"chrome\",\"develop tool\",\"javascript\"],\"path\":\"/post/60fps-web-app\"},\"next\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"tags\":null,\"path\":\"/post/js-class\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---post-vue-jest-test-44cbf16c09e978b1268b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n<!-- more -->\\n<h2>package.json</h2>\\n<p>下面的配置都在<strong>package.json</strong>文件中配置。</p>\\n<p>在文件最底部添加下面代码</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  // ...\\n  \\\"jest\\\": {\\n    // 配置文件拓展名\\n    \\\"moduleFileExtensions\\\": [\\n      \\\"js\\\",\\n      \\\"vue\\\"\\n    ],\\n    // 匹配webpack中配置的alias\\n    \\\"moduleNameMapper\\\": {\\n      \\\"^vue$\\\": \\\"vue/dist/vue.common.js\\\",\\n      \\\"^@(.*)$\\\": \\\"&#x3C;rootDir>/src$1\\\"\\n    },\\n    // 编译工具\\n    \\\"transform\\\": {\\n      \\\".*\\\\\\\\.(vue)$\\\": \\\"&#x3C;rootDir>/node_modules/jest-vue-preprocessor\\\",\\n      \\\".*\\\": \\\"babel-jest\\\"\\n    }\\n  }\\n}\\n</code></pre>\\n<!-- more -->\\n<p>然后在上面<code>script</code>中添加一条新的命令</p>\\n<pre><code class=\\\"language-javascript\\\">{\\n  // ...\\n  \\\"test\\\": \\\"./node_modules/.bin/jest\\\"\\n}\\n</code></pre>\\n<p>然后就配置好了，很快，很舒服。</p>\\n<h1>跑个测试</h1>\\n<p>首先，我有个vue组件cell，一个简单的列表item组件，代码如下</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;!-- vue template -->\\n&#x3C;template>\\n  &#x3C;a class=\\\"ui-cell\\\" :href=\\\"href\\\">\\n    &#x3C;div class=\\\"ui-cell-wrapper\\\">\\n      &#x3C;slot name=\\\"icon\\\">\\n        &#x3C;i v-if=\\\"iconClass\\\" :class=\\\"iconClass\\\">&#x3C;/i>\\n      &#x3C;/slot>\\n      &#x3C;slot name=\\\"title\\\">\\n        &#x3C;div class=\\\"ui-cell-title\\\">\\n          &#x3C;div class=\\\"ui-cell-text\\\" v-text=\\\"title\\\">&#x3C;/div>\\n          &#x3C;div class=\\\"ui-cell-label\\\" v-if=\\\"label\\\" v-text=\\\"label\\\">&#x3C;/div>\\n        &#x3C;/div>\\n      &#x3C;/slot>\\n      &#x3C;div class=\\\"ui-cell-value\\\" :class=\\\"{ 'isLink': isLink }\\\">\\n        &#x3C;slot>\\n           &#x3C;div v-text=\\\"value\\\">&#x3C;/div>\\n        &#x3C;/slot>\\n      &#x3C;/div>\\n      &#x3C;i class=\\\"icon-arrow-right\\\" v-if=\\\"isLink\\\">&#x3C;/i>\\n    &#x3C;/div>\\n  &#x3C;/a>\\n&#x3C;/template>\\n</code></pre>\\n<pre><code class=\\\"language-javascript\\\">export default {\\n  name: 'ui-cell',\\n  props: {\\n    to: [String, Object],\\n    iconClass: String,\\n    title: String,\\n    label: String,\\n    value: {\\n      default: ''\\n    }\\n  },\\n  computed: {\\n    href () {\\n      if (this.to &#x26;&#x26; !this.added &#x26;&#x26; this.$router) {\\n        const resolve = this.$router.match(this.to)\\n        if (resolve.matched.length &#x3C;= 0) {\\n          return this.to\\n        }\\n\\n        this.$nextTick(() => {\\n          this.added = true\\n          this.$el.addEventListener('click', this.handleClick)\\n        })\\n        return resolve.path\\n      }\\n\\n      return this.to\\n    },\\n    isLink () {\\n      return !!this.to\\n    }\\n  },\\n  methods: {\\n    handleClick (e) {\\n      e.preventDefault()\\n      this.$router.push(this.href)\\n    }\\n  }\\n}\\n</code></pre>\\n<p>然后编写测试文件</p>\\n<pre><code class=\\\"language-javascript\\\">import Vue from 'vue'\\nimport Cell from '@/components/cell'\\nimport VueRouter from 'vue-router'\\n\\nVue.use(VueRouter)\\n\\nconst routes = [\\n  {\\n    path: '/foo',\\n    component: Cell\\n  }\\n]\\nconst router = new VueRouter({\\n  routes\\n})\\n\\nconst mockFn = jest.fn()\\nCell.methods = {\\n  handleClick(e) {\\n    mockFn.mockReturnValue(true)\\n  }\\n}\\n\\nconst Constructor = Vue.extend(Cell)\\nconst vm = new Constructor({\\n  propsData: {\\n    title: 'cell1',\\n    value: 'value1',\\n    label: 'label1'\\n  }\\n}).$mount()\\n\\nconst vm2 = new Constructor({\\n  router,\\n  propsData: {\\n    title: 'cell2',\\n    value: 'value2',\\n    to: '/foo'\\n  }\\n}).$mount()\\n\\nconst vm3 = new Constructor({\\n  propsData: {\\n    title: 'cell3',\\n    value: 'value3',\\n    iconClass: 'icon-test'\\n  }\\n}).$mount()\\n\\ndescribe('Cell component', () => {\\n  test('render currect dom', () => {\\n    expect(vm.$el).toMatchSnapshot()\\n    expect(vm2.$el).toMatchSnapshot()\\n    expect(vm3.$el).toMatchSnapshot()\\n  })\\n\\n  test('router action currectly run', () => {\\n    vm2.$nextTick(() => {\\n      vm2.$el.click()\\n      expect(vm2.href).toBe(vm2.to)\\n      expect(mockFn()).toBe(true)\\n    })\\n  })\\n})\\n</code></pre>\\n<p>然后跑一下命令</p>\\n<pre><code class=\\\"language-bash\\\">$ npm run test\\n\\n> jest-test@1.0.0 test /Users/kit/projects/jest-test\\n> jest\\n\\n PASS  test/unit/Cell.spec.js\\n  Cell component\\n    ✓ render currect dom (8ms)\\n    ✓ router action currectly run (2ms)\\n\\nSnapshot Summary\\n › 3 snapshots written in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   3 added, 3 total\\nTime:        2.295\\n</code></pre>\\n<h1>last</h1>\\n<p>jest给我们提供了一个便捷的测试环境，简单的几个配置项，即可完成编译，不像mocha或jasmine需要其他<code>node module</code>配合完成测试的工作。个人认为fb还是做到了他希望的，让测试变得简单，让开发者有更多的时间去开发。至于自动化测试的好处这里就不再赘述了，有兴趣的朋友可以自行baidu、google。</p>\",\"frontmatter\":{\"date\":\"August 18, 2017\",\"path\":\"/post/vue-jest-test\",\"title\":\"在vue项目中使用jest进行单元测试\"},\"headings\":[{\"depth\":1,\"value\":\"配置\"},{\"depth\":2,\"value\":\"package.json\"},{\"depth\":1,\"value\":\"跑个测试\"},{\"depth\":1,\"value\":\"last\"}]}},\"pathContext\":{\"prev\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"tags\":[\"chrome\",\"develop tool\",\"javascript\"],\"path\":\"/post/60fps-web-app\"},\"next\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"tags\":null,\"path\":\"/post/js-class\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/post-vue-jest-test.json\n// module id = 304\n// module chunks = 153923656702786"],"sourceRoot":""}
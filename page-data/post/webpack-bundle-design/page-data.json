{"componentChunkName":"component---src-templates-post-tsx","path":"/post/webpack-bundle-design","result":{"data":{"markdownRemark":{"html":"<p>本文是对<a href=\"https://zhuanlan.zhihu.com/p/28113197?edition=yidianzixun&#x26;utm_source=yidianzixun&#x26;yidian_docid=0I3PuKjS\">《设计一个无懈可击的浏览器缓存》</a>文章的延伸，其中应该有以下两个系列的文章：</p>\n<ol>\n<li>Webpack生成能够持久缓存的分包配置</li>\n<li>使用Service Worker缓存资源支持离线访问</li>\n</ol>\n<p>现在大部分现代的前端工程里应该都会使用Webpack去构建项目。虽然Webpack十分强大，但也十分复杂，在不同场景，不同技术里配置都不一样，而且里面还包含很多的专业术语。所以在此文里，希望能帮助你:</p>\n<ul>\n<li>知道哪种种文件分割<strong>file-splitting</strong>策略最优于你的项目</li>\n<li>如何进行文件分割</li>\n</ul>\n<!-- more -->\n<p>根据<a href=\"https://webpack.js.org/glossary/\">Webpack术语表</a>中可知，文件分割有两种不同的类型，两个虽然听起来差不多，但确是两种十分不一样的技术：</p>\n<ul>\n<li><strong>Bundle Splitting</strong> -- 为SPA生成多个独立的包，以便于浏览器更好地缓存。</li>\n<li><strong>Code Splitting</strong> -- 在Vue和React中一般用为路由分割，把代码分成多个小块，动态加载当前页面需要使用的内容。</li>\n</ul>\n<p>在大型应用中，静态资源持久缓存带来的效果提升会十分明显，想象你有一个2M的应用，分割成10个200k的包，每次更新内容只是其中一个包，用户只需要请求200k的数据即可，而不用每次更新都请求2M的数据。对流量的节省提升也是巨大的。</p>\n<p>Let's code.</p>\n<h2>Bundle Splitting</h2>\n<p>⚠️ 在此文中<strong>Bundle Splitting</strong>都简称为包分割。</p>\n<p>包分割的目的其实很简单，假如你用<strong>Vue-cli</strong>生成项目，那么构建出来的代码会有一个巨大的<strong>vendor</strong>包，假如用户每次访问都需要请求这个更新包，可想而知，每次都需要长时间的等待，和耗费巨大的流量。如果把这个包分成两个，用户每次访问只需下载更新的包，另一个则从浏览器缓存中获取。</p>\n<p>( 在很多前端优化文章中经常会提要压缩资源，合并请求，这里的观点其实跟旧的优化方案有点相违背的，但是从HTTP1.1中已经有了<a href=\"%5Bhttps://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96\">HTTP管线化</a>，又或者<a href=\"https://zh.wikipedia.org/wiki/HTTP/2\">HTTP2中的多路复用</a>，能够在一次连接中发送多个请求，加上现代浏览器提供的<a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization\">Preload\\Prefetch</a>等技术，多个HTTP的请求的性能损耗在缓存中提供的性能提升应该是不值一提的 )</p>\n<p>Let's talk with data. 下面我们会使用表格去对比优化前后的不同及优化后的收益，所以我们需要锁定在一个固定的场景中，以便测试和分析缓存的收益</p>\n<ul>\n<li>John在8周里每周都访问我们的网站</li>\n<li>我们每周都需要发版更新网站</li>\n<li>我们有一个任务列表页面需要每周迭代更新</li>\n<li>在第四周我们添加了一个<strong>npm package</strong></li>\n<li>在第七周我们更新了所有<strong>npm package</strong></li>\n</ul>\n<h2>基本配置</h2>\n<p>我们的项目是一个400KB左右的SPA，有一个<code class=\"language-text\">main.js</code>的入口文件，我们的Webpack配置看起来应该像以下这样的（下面的配置只显示主要配置）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resovle</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[contenthash].js'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>构建出来的文件名应该和<code class=\"language-text\">index.mx4fd8c53.js</code>差不多，那串看不懂的东西就是上方ouput里面的<code class=\"language-text\">[contenthash]</code>，就是根据文件内容生产的哈希值，也就以为着每次更新内容，哈希值就会更新，浏览器就要重新下载这个 400KB 的文件。</p>\n<p>那么每周的访问情况应该和下表一样</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/webpack-bundle-design/table-1.png\" alt=\"table-1\"></p>\n<h2>分割第三方vendor包</h2>\n<p>如果使用 <a href=\"https://cli.vuejs.org/\">Vue-cli</a> ，创建的项目，构建出来一般都有分为主入口问价，外加一个<code class=\"language-text\">vendor.js</code>的文件。</p>\n<p>在Webpack 4分包配置做了很多简化，通过一些简单的配置项就可做包分割，而不用每次写一大堆function和正则去匹配包，pretty good👏🏻</p>\n<p>回到主题，在webpack配置中加上<code class=\"language-text\">optimization.splitChunks.chunks = &#39;all&#39;</code>就可以将所有<code class=\"language-text\">node_module</code>分割成<code class=\"language-text\">vendor.js</code>。</p>\n<p>有了这个<code class=\"language-text\">vendor.js</code>包，我们的John同学每次访问时候就变成了下载两个200kb的包，但是每周更新的时候只需下载200k内容即可。</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/webpack-bundle-design/table-2.png\" alt=\"table-2\"></p>\n<p>只有2.24M，节省了<strong>23%</strong>的流量，只需几行配置，这个数值还会随着时间增加而不断增加，我想这个数值对于各位看官已经有点吸引了是吧，毕竟更少的请求流量也代表着更快的访问速度。</p>\n<p>我们还能进一步提升这个数值。</p>\n<h2>Splitting out each package</h2>\n<p>上方的<code class=\"language-text\">vendor.js</code>其实是一个split all in one的状态，所以它也会遇到刚开始的问题，只要更新某个模块，就要全量更新。知道了问题，我们可以做的更好的，不是吗。</p>\n<p>在这时，相信很多看官都能想到，把所有第三方依赖都分割开单独缓存. Right, 那么我们将把<code class=\"language-text\">vue</code>, <code class=\"language-text\">vue-router</code>, <code class=\"language-text\">moment</code>等分割开来:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resovle</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[contenthash].js'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HashedModuleIdsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    runtimeChunk<span class=\"token operator\">:</span> <span class=\"token string\">'single'</span><span class=\"token punctuation\">,</span>\n    splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n      maxInitialRequest<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span>\n      minSize<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      cacheGroups<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        vendor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          test<span class=\"token operator\">:</span> <span class=\"token regex\">/[\\\\/]node_modules[\\\\/]/</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> packageName <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pkg.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>packageName<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Webpack Guide中的<a href=\"https://webpack.docschina.org/guides/caching/\">缓存</a>有很好地解释为什么要使用上方配置，除此之外还有下面一些常规模块需要注意一下的：</p>\n<ul>\n<li>Webpack很多配置都与缓存相悖，像每个入口只能分割出3个文件，最小分割文件大小限制为30k(小文件都会打包在一起)。上方配置重新配置了这两部分内容。</li>\n<li><a href=\"https://webpack.js.org/plugins/split-chunks-plugin/#splitchunkscachegroups\"><code class=\"language-text\">cacheGroups</code></a>配置项能告诉webpack怎么做包分割，基本配置就是抽出<code class=\"language-text\">node_modules</code>中所有第三方库，打包成<code class=\"language-text\">vendor.js</code>。一般使用该配置项时候key包名字，在这里我们使用了一个函数，匹配到<code class=\"language-text\">node_modules</code>包就返回对应包名字，例如<code class=\"language-text\">pkg.vue.m87df6g2.js</code>。</li>\n<li>这样做还有一个好处就是，每次修改依赖包不需要手动去维护配置。</li>\n</ul>\n<p>John依然要每周下载一个200kb的主包，还有在首次加载时候加载200kb的第三方依赖，但是后面就不需要重复下载这些依赖了。</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/webpack-bundle-design/table-3.png\" alt=\"table-3\"></p>\n<p>对比<strong>3.3M</strong>的配置，这里足足减少了<strong>45%</strong>请求流量，that’s pretty cool.</p>\n<p>我想我们还能把这个数值提高到<strong>50%</strong>以上🤔</p>\n<h2>继续分割我们主应用的代码</h2>\n<p>我们的<code class=\"language-text\">main.js</code>主包还是要每周下载的，从上方还提及到我们有一个任务列表页面需要每周更新，那么我们应该怎么把这个页面单独分割出来呢。</p>\n<h3>添加entry配置</h3>\n<p>添加TaskList入口配置，我们以上方的配置文件为例子，添加一个<code class=\"language-text\">TaskList</code>的配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/** some code */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    main<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    TaskList<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/pages/TaskList.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    TaskDetail<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/pages/TaskDetail.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>使用code splitting</h3>\n<p>在<strong>SPA</strong>中我们一般使我们的路由动态加载，简称路由分割，以<code class=\"language-text\">vue-router</code>为例，我们的路由配置应该如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'tasklist'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'TaskList'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/TaskList'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'taskdetail'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'TaskDetail'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/TaskDetail'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Good, 现在webpack分离了<code class=\"language-text\">ProductList.js</code>和<code class=\"language-text\">ProductDetail</code>两个文件，我们的John同学又能少下载50kb的文件了。</p>\n<p>Look like this.</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/webpack-bundle-design/table-4.png\" alt=\"table-4\"></p>\n<p><strong>现在只有1.44M了！</strong></p>\n<p>我们减少了John<strong>57%</strong>的下载文件大小，随着访问时间的增长这个值也会越来越大。</p>\n<p>为什么代码分割这么重要，除了能单独缓存和减少文件请求大小外，更小的包也意味着<strong>更快的脚本解析时间</strong>，<strong>更快的首屏渲染时间</strong>。</p>\n<h2>Summary</h2>\n<p>关于文件数量这里还要再插播一下，如果旧项目使用此配置时候，应该会生成很多零碎的文件，主要原因可能有以下几方面：</p>\n<ol>\n<li>项目积累太多无用依赖没有及时清理</li>\n<li>css全部extract，全部样式都按组件粒度提取出来了，这里建议只提取公共和第三方的样式，具体可以参考<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin#extracting-css-based-on-entry\">mini-css-extract-plugin的配置</a></li>\n</ol>\n<hr>\n<p>最后我们总结一下要点：</p>\n<ul>\n<li>将文件分割成多个更小的文件</li>\n<li>SPA中，减少入口文件第三方插件的数量，分散到各个模块中加载，这样能加快应用启动速度，减少首屏所需资源的数量。</li>\n<li>使用<strong>contentHash</strong>避免每次构建生成新的文件id，便于浏览器缓存</li>\n</ul>\n<p><strong>另外，多看文档 🌚</strong></p>\n<h3>Reference</h3>\n<blockquote>\n<p><a href=\"https://medium.com/hackernoon/the-100-correct-way-to-split-your-chunks-with-webpack-f8a9df5b7758\">The 100% correct way to split your chunks with webpack</a>\n<a href=\"https://webpack.js.org/\">Webpack</a>\n<a href=\"https://zhuanlan.zhihu.com/p/28113197?edition=yidianzixun&#x26;utm_source=yidianzixun&#x26;yidian_docid=0I3PuKjS\">设计一个无懈可击的浏览器缓存</a></p>\n</blockquote>","frontmatter":{"date":"September 06, 2019","path":"/post/webpack-bundle-design","title":"使用Webpack设计一个所有项目适用的分包配置","category":["前端"]},"headings":[{"depth":2,"value":"Bundle Splitting"},{"depth":2,"value":"基本配置"},{"depth":2,"value":"分割第三方vendor包"},{"depth":2,"value":"Splitting out each package"},{"depth":2,"value":"继续分割我们主应用的代码"},{"depth":3,"value":"添加entry配置"},{"depth":3,"value":"使用code splitting"},{"depth":2,"value":"Summary"},{"depth":3,"value":"Reference"}],"tableOfContents":"<ul>\n<li><a href=\"/post/webpack-bundle-design/#bundle-splitting\">Bundle Splitting</a></li>\n<li><a href=\"/post/webpack-bundle-design/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\">基本配置</a></li>\n<li><a href=\"/post/webpack-bundle-design/#%E5%88%86%E5%89%B2%E7%AC%AC%E4%B8%89%E6%96%B9vendor%E5%8C%85\">分割第三方vendor包</a></li>\n<li><a href=\"/post/webpack-bundle-design/#splitting-out-each-package\">Splitting out each package</a></li>\n<li>\n<p><a href=\"/post/webpack-bundle-design/#%E7%BB%A7%E7%BB%AD%E5%88%86%E5%89%B2%E6%88%91%E4%BB%AC%E4%B8%BB%E5%BA%94%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81\">继续分割我们主应用的代码</a></p>\n<ul>\n<li><a href=\"/post/webpack-bundle-design/#%E6%B7%BB%E5%8A%A0entry%E9%85%8D%E7%BD%AE\">添加entry配置</a></li>\n<li><a href=\"/post/webpack-bundle-design/#%E4%BD%BF%E7%94%A8code-splitting\">使用code splitting</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/post/webpack-bundle-design/#summary\">Summary</a></p>\n<ul>\n<li><a href=\"/post/webpack-bundle-design/#reference\">Reference</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/post/webpack-bundle-design","next":{"frontmatter":{"title":"使用Koa + vue-cli3搭建SSR 开发环境","date":"2019-07-27","category":["前端"],"tags":["koa","ssr","vue-cli3"],"path":"/post/ssr-with-koa-and-vue"}},"previous":{"frontmatter":{"title":"Vue composition API 吃螃蟹指南","date":"2019-10-21","category":["前端"],"tags":["Vue"],"path":"/post/vue-composition-api"}}}}}
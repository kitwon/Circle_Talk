{"componentChunkName":"component---src-templates-post-tsx","path":"/post/what-and-how-ast","result":{"data":{"markdownRemark":{"html":"<p>目前JavaScript开发者都会依赖很多如<em>Babel</em>、<em>Eslint</em>等工具去做开发，但会遇到一些小问题需要打下断点debugger一下的时候，这时我们就不知道这些工具里面是如何运作的，如何去做一个调试。 So，在此文章中我们会去学习这些工具内部是如何运作的。通过这篇文章，我们可以学习到：</p>\n<ol>\n<li>理解代码转换工具如Babel等是如何工作的。</li>\n<li>获得这些工具的调试能力。</li>\n<li>使用转换工具去重构现有代码。</li>\n</ol>\n<p>下面我们会通过两个小例子去解释这些工具是如何运作的，以及如何编写转换语法的代码。</p>\n<p>TODO:</p>\n<ul>\n<li>使用Babel-Plugin转换JavaScript代码 —— Babel</li>\n<li><em>code-mods</em>去重构现有的代码，如ES5 to ES6的代码 —— jscodeshift</li>\n</ul>\n<!-- more -->\n<h2>What’ AST</h2>\n<p>现在的构建工具Webpack、Babel、Uglifyjs等工具都是通过操控和分析<em>AST</em>去完成代码转换的工作。那么什么是<em>AST</em>呢？</p>\n<p>AST译为抽象语法树，我们的源码在编译中会转为一组树数据结构，如<code class=\"language-text\">var foo = &#39;bar&#39;</code>的树结构：</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/what-and-how-ast/ast-demo.png\" alt=\"demo1\"></p>\n<p>图中会指出这一行函数里面属于什么类型，左边是什么方法，方法的值是什么等，然后会以<em>JSON</em>的样式输出整个文件里面的语法结构，从下图可以看出，每个节点都有<em>type</em>这个key，那么各位聪明看官应该可以猜到，假如我们需要操作AST，那么我们需要做的大概就是循环匹配类型，修改，输出等动作。</p>\n<h2>How AST</h2>\n<p>知道了什么是AST，那么我们需要看构建工具是怎么工作，其实这些工具整个工作流程就是一个文件I/O的过程，里面可以分为4步：</p>\n<ul>\n<li>Parse (I) —— 分析语法树</li>\n<li>Traverse (I) —— 穿透代码（可以理解为循环语法树）</li>\n<li>Manipulate (O) —— 操控代码</li>\n<li>Generate code (O) —— 输出文件</li>\n</ul>\n<p>其中<em>I</em>的部分很多工具都帮我们完成了，我们只需要关注<em>O</em>这一部分，我们需要匹配哪些代码，对他们做什么转换，怎么输出。</p>\n<p>那么我们怎么知道我们需要匹配代码的类型是什么呢，或者整个文件的语法树是怎样的呢？我们可以在<a href=\"https://astexplorer.net/\">AST explorer</a>查看对应的语法树：</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/what-and-how-ast/ast-demo2.png\" alt=\"demo-2\"></p>\n<p>点击对应的语法位置，就会跳到树的位置，以便查找对应的类型，比如这里我们点击<em>return</em>，树中就会显示类型为<em>ReturnStatement</em>，里面的argument就是<em>StringLiteral</em>，即<code class=\"language-text\">&#39;bar&#39;</code>。后面我们会常用这个工具去查对应的语法类型。</p>\n<h3>Visitor</h3>\n<p>上面所说的进入、查找某个类型，实际是<strong>访问</strong>他们。Visitor是一个用于AST遍历的模式，简的来说所有工具都是用这个模式去获取和处理AST，处理方法也很简单，我们只需要告诉工具我关心的节点，然后传入一个回调函数。如下例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// In:</span>\n<span class=\"token comment\">// var foo = 'bar'</span>\n<span class=\"token keyword\">const</span> myVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiterial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Out:</span>\n<span class=\"token comment\">// var foo = 'baz'</span></code></pre></div>\n<h2>使用Babel-Plugin转换JavaScript代码</h2>\n<p>下面我们会开发一个Babel-Plugin，插件功能是移除生产环境上面的debugger代码。假设我们项目里面有以下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isTruthy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对应Plugin的代码也很简单，获取到对应节点然后执行回调函数，把对应的<code class=\"language-text\">debugger</code>代码remove就可以了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token punctuation\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">DebuggerStatement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这部分操作我们可以在 <a href=\"https://astexplorer.net/\">Ast Explorer</a> 中操作，选择<em>Transform</em>中的<em>Babel V7</em>，然后把插件代码粘贴到下方箭头的位置就可以了，右下角就是转换完成的代码。</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/what-and-how-ast/ast-demo3.png\" alt=\"demo-3\"></p>\n<p>从代码上面看逻辑其实不复杂，里面其实有固定的几步</p>\n<ol>\n<li>返回visitor对象</li>\n<li><em>指定文件内容中你关心的节点</em></li>\n<li>操作节点</li>\n</ol>\n<p>其中需要关注的内容就是<em>找到合适的节点type值</em>，这个我们可以通过上方提到的 <a href=\"https://astexplorer.net/\">Ast explorer</a> 去找到对应类型，把代码贴上去点击函数或者方法位置，done～🌝。</p>\n<h2>使用jscodeshift重构现有代码</h2>\n<p>很多时候我们需要重构现有项目的代码，但是Babel的功能是将ES next的代码转为现代浏览器支持的ES版本，这时候我们就需要一个纯碎一点的工具去做这个事情了，那么Facebook的 <a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a>是个很好的选择。</p>\n<p>比如这里我们把旧代码里面的<code class=\"language-text\">var</code>转为<code class=\"language-text\">let</code>，我们有以下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isTruthy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是处理的代码，这里我们用上面<em>How AST</em>提到的I/O工作流去分析下方的代码，分析内容请看注释</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> j <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span>jscodeshift<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 分析语法树，转为AST，属于I中Parse阶段</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">j</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// find和foreach分别为查找和循环node节点</span>\n    <span class=\"token comment\">// 属于I重的Traverse阶段</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>VariableDeclaration<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">:</span> <span class=\"token string\">'var'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 找到匹配节点后对节点进行操控，属于O中的Manipulate阶段</span>\n    \t<span class=\"token keyword\">const</span> letStatement <span class=\"token operator\">=</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">variableDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token string\">'let'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>declarations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tpath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>letStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// toSource告诉转换工具需要输出</span>\n    <span class=\"token comment\">// 属于O中的Generate code阶段</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后回到<a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a>，把<em>transform</em>改为<em>jscodeshft</em>。转换效果如下图。</p>\n<p><img src=\"https://kiit-1253813979.cos.ap-guangzhou.myqcloud.com/what-and-how-ast/ast-demo4.png\" alt=\"demo-4\"></p>\n<p>Well done🎉</p>\n<h2>资源</h2>\n<blockquote>\n<p><a href=\"https://babeljs.io/\">Babel · The compiler for next generation JavaScript</a> —— Babel\n<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\">babel-handbook</a>  —— babal插件开发教程\n<a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a>  —— Facebook推出的代码重构工具\n<a href=\"https://astexplorer.net/\">AST explorer</a> —— 在线查看、转换AST工具</p>\n</blockquote>","frontmatter":{"date":"May 25, 2019","path":"/post/what-and-how-ast","title":"What's AST & How AST","category":["javascript"]},"headings":[{"depth":2,"value":"What’ AST"},{"depth":2,"value":"How AST"},{"depth":3,"value":"Visitor"},{"depth":2,"value":"使用Babel-Plugin转换JavaScript代码"},{"depth":2,"value":"使用jscodeshift重构现有代码"},{"depth":2,"value":"资源"}],"tableOfContents":"<ul>\n<li><a href=\"/post/what-and-how-ast/#what-ast\">What’ AST</a></li>\n<li>\n<p><a href=\"/post/what-and-how-ast/#how-ast\">How AST</a></p>\n<ul>\n<li><a href=\"/post/what-and-how-ast/#visitor\">Visitor</a></li>\n</ul>\n</li>\n<li><a href=\"/post/what-and-how-ast/#%E4%BD%BF%E7%94%A8babel-plugin%E8%BD%AC%E6%8D%A2javascript%E4%BB%A3%E7%A0%81\">使用Babel-Plugin转换JavaScript代码</a></li>\n<li><a href=\"/post/what-and-how-ast/#%E4%BD%BF%E7%94%A8jscodeshift%E9%87%8D%E6%9E%84%E7%8E%B0%E6%9C%89%E4%BB%A3%E7%A0%81\">使用jscodeshift重构现有代码</a></li>\n<li><a href=\"/post/what-and-how-ast/#%E8%B5%84%E6%BA%90\">资源</a></li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/what-and-how-ast","next":{"frontmatter":{"title":"Apollo GraphQL + Koa实例教程","date":"2019-03-15","category":["服务端"],"tags":["GraphQL","koa","nodejs"],"path":"/blog/use-graphql-with-apollo"}},"previous":{"frontmatter":{"title":"使用Koa + vue-cli3搭建SSR 开发环境","date":"2019-07-27","category":["前端"],"tags":["koa","ssr","vue-cli3"],"path":"/post/ssr-with-koa-and-vue"}}}}}
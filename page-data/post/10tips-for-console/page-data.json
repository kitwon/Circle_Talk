{"componentChunkName":"component---src-templates-post-tsx","path":"/post/10tips-for-console","webpackCompilationHash":"bf1e1983fb80f780cdbb","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>原文译自<a href=\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\n</blockquote>\n<p>在日常开发里，我们经常需要使用<code class=\"language-text\">console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code class=\"language-text\">console</code>的高级用法去更好的做调试工作和定位问题。</p>\n<p>我们都知道<code class=\"language-text\">console</code>的几个常用的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印信息或者数据</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>‘Something happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和console log一样</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>‘Something strange happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印警告信息</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>‘Something horrible happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印错误信息</span></code></pre></div>\n<p>除这些简单的使用外，下面几个<code class=\"language-text\">console</code>的用法希望能帮助你更好的调试你的应用。</p>\n<!-- more -->\n<h2>Tip #1 console.trace()</h2>\n<p>如果你想知道日志的函数执行位置，使用<code class=\"language-text\">console.trace()</code>可以打印栈堆跟踪信息。</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/trace.png\" alt=\"trace\"></p>\n<h2>Tip #2 console.time() &#x26;&#x26; console.timeEnd()</h2>\n<p>如果你想知道某段程序的执行时间，可以使用<code class=\"language-text\">console.time()</code>和<code class=\"language-text\">console.timeEnd()</code>打印时间间隔。</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/time.png\" alt=\"time\"></p>\n<h2>Tip #3 console.memory()</h2>\n<p>如果遇到一个相当棘手的性能问题，或者在寻找一个内存泄露的位置，可以尝试使用<code class=\"language-text\">console.memory(// property, not a function)</code>查看栈大小信息。\n<img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/memory.png\" alt=\"memory\"></p>\n<h2>Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</h2>\n<p>这个不是标准里面的方法，但是浏览器支持比较广泛。你可以使用这两个方法让浏览器的性能面板记录start至end的性能数据。使用这两个函数，能够更精准地定位你想要获取的数据。</p>\n<h2>Tip #5 console.count(\"STUFF I COUNT\")</h2>\n<p>在一些经常重复调用的代码中，使用<code class=\"language-text\">console.count()</code>可以记录该函数的执行次数。\n<img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/count.png\" alt=\"count\"></p>\n<h2>Tip #6 console.assert(false, “Log me!”)</h2>\n<p>当需要条件判断打印日志时候，可以使用<code class=\"language-text\">console.assert(condition, msg)</code>代替if-else。当<code class=\"language-text\">condition</code> 为false的时候就会打印出信息。\n⚠️在Node.js中使用会抛出断言错误。</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/assert.png\" alt=\"assert\"></p>\n<h2>Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</h2>\n<p>在一些写很多<code class=\"language-text\">console.log()</code>的情况下，你可能需要将日志分组。这时候就可以使用<code class=\"language-text\">console.group(name)</code> 去将日志分组，使用这个函数后，日志就会按层级打印。使用<code class=\"language-text\">console.groupEnd()</code>就能结束掉当前分组，在同级重新新建一个分组。</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/group.png\" alt=\"group\"></p>\n<h2>Tip #8 字符串替换</h2>\n<p>使用<code class=\"language-text\">console</code>的时候可以使用字符串替换去合并变量，引用类型有下面几个<strong>(%s = string, %i = integer, %o = object, %f = float)</strong></p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/substitutions.png\" alt=\"substitutions\"></p>\n<h2>Tip #9 console.clear()</h2>\n<p>当代码里面很多<code class=\"language-text\">console</code>的时候，你可能会需要<code class=\"language-text\">console.clear()</code>清理一下前面的log</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/clear.png\" alt=\"clear\"></p>\n<h2>Tip #10 console.table()</h2>\n<p>好东西留到最后。使用<code class=\"language-text\">console.table()</code>，可以把对象打印成一个好看的表格。</p>\n<p><img src=\"https://kiit-1253813979.file.myqcloud.com/10tips-for-console/table.png\" alt=\"table\"></p>\n<p>希望这几个能让你平时的调试工作能更高效和有趣。</p>","frontmatter":{"date":"March 19, 2018","path":"/post/10tips-for-console","title":"10个console的高级使用方法","category":["前端"]},"headings":[{"depth":2,"value":"Tip #1 console.trace()"},{"depth":2,"value":"Tip #2 console.time() && console.timeEnd()"},{"depth":2,"value":"Tip #3 console.memory()"},{"depth":2,"value":"Tip #4 console.profile(‘profileName’) & console.profileEnd(‘profileName’)"},{"depth":2,"value":"Tip #5 console.count(\"STUFF I COUNT\")"},{"depth":2,"value":"Tip #6 console.assert(false, “Log me!”)"},{"depth":2,"value":"Tip  #7 console.group(‘group’) & console.groupEnd(‘group’)"},{"depth":2,"value":"Tip #8 字符串替换"},{"depth":2,"value":"Tip #9 console.clear()"},{"depth":2,"value":"Tip #10 console.table()"}],"tableOfContents":"<ul>\n<li><a href=\"/post/10tips-for-console/#tip-1-consoletrace\">Tip #1 console.trace()</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-2-consoletime--consoletimeend\">Tip #2 console.time() &#x26;&#x26; console.timeEnd()</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-3-consolememory\">Tip #3 console.memory()</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-4-consoleprofileprofilename--consoleprofileendprofilename\">Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-5-consolecountstuff-i-count\">Tip #5 console.count(\"STUFF I COUNT\")</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-6-consoleassertfalse-log-me\">Tip #6 console.assert(false, “Log me!”)</a></li>\n<li><a href=\"/post/10tips-for-console/#tip--7-consolegroupgroup--consolegroupendgroup\">Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2\">Tip #8 字符串替换</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-9-consoleclear\">Tip #9 console.clear()</a></li>\n<li><a href=\"/post/10tips-for-console/#tip-10-consoletable\">Tip #10 console.table()</a></li>\n</ul>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/post/10tips-for-console","next":{"frontmatter":{"title":"年底项目复盘","date":"2018-01-23","category":["工作"],"tags":["work","vue","webpack"],"path":"/post/2017-review"}},"previous":{"frontmatter":{"title":"使用pre-commit实现提交前验证或自动部署代码","date":"2018-03-29","category":["前端"],"tags":["自动化","前端工具"],"path":"/post/pre-commit-hook"}}}}}
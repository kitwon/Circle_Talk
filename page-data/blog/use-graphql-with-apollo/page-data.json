{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/use-graphql-with-apollo","result":{"data":{"markdownRemark":{"html":"<h1>Apollo GraphQL + Koa实例教程</h1>\n<blockquote>\n<p><a href=\"http://graphql.cn/learn/\">GraphQL 入门 | GraphQL</a> GraphQL中文文档</p>\n<p><a href=\"https://www.apollographql.com/\">Apollo GraphQL</a>, 实现GraphQL的引擎，大部分使用方法能从中查询</p>\n<p><a href=\"https://akryum.github.io/vue-apollo/zh-cn/\">Vue Apollo</a> 客户端中Vue GraphQL库，有一系列封装好的方法。</p>\n</blockquote>\n<p>两个个重要概念</p>\n<ul>\n<li><strong>Schema</strong>  即为GraphQL中的<code class=\"language-text\">types</code>(类型)，为服务中的核心，描述了服务端中提供给客户端可用的功能，或者说可查询的数据。</li>\n<li><strong>Resolver</strong> 在项目设计中是一个<code class=\"language-text\">map</code>对象，对象中的<code class=\"language-text\">key</code>和<strong>schema</strong>中<code class=\"language-text\">types</code>的字段是一对一的关系，描述了<code class=\"language-text\">types</code>中数据的来源。</li>\n</ul>\n<p>两个特殊类型\n每一个 GraphQL 服务都有一个query类型，可能有一个mutation类型。</p>\n<ul>\n<li><strong>Query</strong>里面定义了服务器提供给前端的一些可查询的类型，相当于以前的一个Restful接口，只有<em>Query</em>里的字段才能查询。</li>\n<li><strong>Mutation</strong>亦差不多，只是<strong>Mutation</strong>表示的是变更操作，如增删改这些接口操作。</li>\n</ul>\n<!-- more -->\n<h1>GraphQL实例</h1>\n<p>运行下面的类定义前我们需要一个最简单的服务，首先我们新建一个文件夹，然后安装所需依赖\n<code class=\"language-text\">npm i apollo-server-koa graphql koa nodemon</code></p>\n<p>然后在目录下心新建一个<code class=\"language-text\">app.js</code>的文件，并添加以下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server-koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义一个简单的类型</span>\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    hello: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义resolvers</span>\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">hello</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> app <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token string\">'8888'</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> port <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚀 Server ready at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>server<span class=\"token punctuation\">.</span>graphqlPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后打开地址输入地址后查询<code class=\"language-text\">hello</code>即可看到反馈结果<code class=\"language-text\">hello world!</code></p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token comment\"># Write your query or mutation here</span>\n<span class=\"token punctuation\">{</span>\n\thello\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到这里我们即启动好一个简单的服务。</p>\n<h2>类型定义</h2>\n<p>下面会设计一个简单的图书管理系统，由于没有服务接口，我们先拟定一份模拟数据作为后端返回的数据，修改<code class=\"language-text\">app.js</code>，添加以下代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 从这里开始</span>\n<span class=\"token keyword\">const</span> authors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"白夜行\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"傲慢与偏见\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"时生\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Javascript高级程序设计\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span>\n    authorId<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们先添加一个简单的用户和书本查询，每次查询都返回一个用户和书本列表。首先我们需要添加<code class=\"language-text\">Author</code>和<code class=\"language-text\">Book</code>类型和在Query里面添加对应查询字段，修改<strong>typeDefs</strong>对象为以下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    authors: [Author]!\n    books: [Book]!\n  }\n\n  type Author {\n    name: String!\n    id: ID!\n  }\n\n  type Book {\n    name: String!\n    id: ID!\n    authorId: ID!\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>定义好类型之后，我们需要为类型添加数据来源的描述，在这里我们修改之前定义好的<code class=\"language-text\">resolvers</code>对象</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">authors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authors<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> books\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>查询简单列表后，我们还需要对特定<strong>id</strong>的数据进行查询，如某个author或book，因为已经有了对应的<code class=\"language-text\">schema</code>，我们只需要在<code class=\"language-text\">query</code>中添加对应接口即可</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql`\n  type Query <span class=\"token punctuation\">{</span>\n    authors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Author<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n    books<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Book<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n    <span class=\"token comment\">// 此处为新增</span>\n    <span class=\"token function\">author</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author\n    <span class=\"token function\">book</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Book\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在<code class=\"language-text\">resolvers</code>对象中添加对应内容</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">authors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authors<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">books</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> books<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authors<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">book</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> books<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到此我们已经实现了所有基本的查询了，但除此之外，<code class=\"language-text\">author</code>和<code class=\"language-text\">book</code>应该还有着对应的关系，比如某本书属于哪个作者，或者说某个作者写了哪本书这样，那么这种情况我们需要怎么处理呢</p>\n<p>很简单，我们还是和上方一样，添加字段，描述字段数据如何返回即可，下面我们修改<code class=\"language-text\">Author</code>和<code class=\"language-text\">Book</code>的<em>schema</em>\n⚠️<em>注意不要删除旧代码</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  \"\"\"Some Query\"\"\"\n\n\ttype Book {\n\t\tname: String!\n\t\tid: String!\n\t\tauthorId: String!\n\t\tauthor: Author\n\t}\n\n\ttype Author {\n\t\tname: String!\n\t\tid: String!\n      books: [Book]\n\t}\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>从上方代码我们可以看到<code class=\"language-text\">Book</code>和<code class=\"language-text\">Author</code>都新增了一个字段，但是这个字段有个特别的地方就是需要先知道父级ID才能找到下一集的数据，如要先知道用户ID才能在Book List里面筛选出对应的数据。所以在这里设置对应的<code class=\"language-text\">resolvers</code>，这里有点特别，我们先上代码，继续修改<code class=\"language-text\">resolvers</code>对象</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> resolverMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tQuery<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里的内容省略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 这里开始是新加的内容</span>\n  Author<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">books</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>authorId <span class=\"token operator\">===</span> parent<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Book<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> authors<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> parent<span class=\"token punctuation\">.</span>authorId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>随后在<a href=\"http://localhost:8888/graphql\">playground</a>页面输入以下代码进行查询</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n\tauthor<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    books <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  book<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    author <span class=\"token punctuation\">{</span>\n      name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里，已经完成业务基本涵盖的功能了，怎么定义数据和查询，从上方查询，我们也能发现GraphQL中的一个缺点，但又能说是说优点，就是可以<em>无限循环查询</em>，如修改上方的查询</p>\n<div class=\"gatsby-highlight\" data-language=\"grapnel\"><pre class=\"language-grapnel\"><code class=\"language-grapnel\">{\n  book(id: 1) {\n    name\n    author {\n      name\n      books {\n        name\n      }\n    }\n  }\n}</code></pre></div>\n<h2>结语</h2>\n<p>在上面的一个简单例子可以大概清楚GraphQL里面一个工作流程，还有<em>Mutation</em>等一些特定类型没有介绍，不过也和<em>Query</em>差不多，毕竟也是一个查询而已，只是处理的事情不一样。</p>\n<p>除此之外，可能在业务上面更多的实现难度是在用户验证，在应用中传递上下文Context等。</p>\n<p>在一些特定的业务场景，<em>GraphQL</em>还能展示出更多的骚操作，大家有兴趣的话可以继续找我这边交流，Thanks🌝</p>","frontmatter":{"date":"March 15, 2019","path":"/blog/use-graphql-with-apollo","title":"Apollo GraphQL + Koa实例教程","category":["服务端"]},"headings":[{"depth":1,"value":"Apollo GraphQL + Koa实例教程"},{"depth":1,"value":"GraphQL实例"},{"depth":2,"value":"类型定义"},{"depth":2,"value":"结语"}],"tableOfContents":"<ul>\n<li><a href=\"/blog/use-graphql-with-apollo/#apollo-graphql--koa%E5%AE%9E%E4%BE%8B%E6%95%99%E7%A8%8B\">Apollo GraphQL + Koa实例教程</a></li>\n<li>\n<p><a href=\"/blog/use-graphql-with-apollo/#graphql%E5%AE%9E%E4%BE%8B\">GraphQL实例</a></p>\n<ul>\n<li><a href=\"/blog/use-graphql-with-apollo/#%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89\">类型定义</a></li>\n<li><a href=\"/blog/use-graphql-with-apollo/#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/blog/use-graphql-with-apollo","next":{"frontmatter":{"title":"使用pre-commit实现提交前验证或自动部署代码","date":"2018-03-29","category":["前端"],"tags":["自动化","前端工具"],"path":"/post/pre-commit-hook"}},"previous":{"frontmatter":{"title":"What's AST & How AST","date":"2019-05-25","category":["javascript"],"tags":["babel","AST"],"path":"/post/what-and-how-ast"}}}}}
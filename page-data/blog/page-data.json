{"componentChunkName":"component---src-templates-blog-tsx","path":"/blog","webpackCompilationHash":"bf1e1983fb80f780cdbb","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"<p>作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。</p>\n","frontmatter":{"title":"使用pre-commit实现提交前验证或自动部署代码","date":"2018-03-29","category":["前端"],"path":"/post/pre-commit-hook"}}},{"node":{"excerpt":"<blockquote>\n<p>原文译自<a href=\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\n</blockquote>\n<p>在日常开发里，我们经常需要使用<code class=\"language-text\">console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code class=\"language-text\">console</code>的高级用法去更好的做调试工作和定位问题。</p>\n<p>我们都知道<code class=\"language-text\">console</code>的几个常用的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印信息或者数据</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>‘Something happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 和console log一样</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>‘Something strange happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印警告信息</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>‘Something horrible happened…’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印错误信息</span></code></pre></div>\n<p>除这些简单的使用外，下面几个<code class=\"language-text\">console</code>的用法希望能帮助你更好的调试你的应用。</p>\n","frontmatter":{"title":"10个console的高级使用方法","date":"2018-03-19","category":["前端"],"path":"/post/10tips-for-console"}}},{"node":{"excerpt":"<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\n<h2>项目构建</h2>\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href=\"https://github.com/kitwon/vue-mpa\">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\n","frontmatter":{"title":"年底项目复盘","date":"2018-01-23","category":["工作"],"path":"/post/2017-review"}}},{"node":{"excerpt":"<blockquote>\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/\">render performance</a>对前端渲染优化有了一个新的认识。</p>\n</blockquote>\n<h2>几个重要概念</h2>\n<h3>60fps与设备刷新率</h3>\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\n","frontmatter":{"title":"构建60fps-web-app","date":"2017-09-13","category":["前端"],"path":"/post/60fps-web-app"}}},{"node":{"excerpt":"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\"https://facebook.github.io/jest/\">jest</a>，这是一个<a href=\"https://code.facebook.com/projects/\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\n<h2>配置</h2>\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> jest jest-vue-preprocessor --save-dev\n\n<span class=\"token comment\"># or use yarn</span>\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> jest jest-vue-preprocessor --save</code></pre></div>\n","frontmatter":{"title":"在vue项目中使用jest进行单元测试","date":"2017-08-18","category":["前端"],"path":"/post/vue-jest-test"}}},{"node":{"excerpt":"<h2>类理论</h2>\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code class=\"language-text\">Vehicle</code>类，<code class=\"language-text\">Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code class=\"language-text\">Car</code>时，只要声明它继承或者拓展<code class=\"language-text\">Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code class=\"language-text\">Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\n<p>javascript中也有类中的<code class=\"language-text\">new</code>和<code class=\"language-text\">instanceof</code>，还有ES6中的<code class=\"language-text\">class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\n<h3>js中实现类复制(混入)</h3>\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\n","frontmatter":{"title":"深入学习javascript-类","date":"2017-07-20","category":["前端"],"path":"/post/js-class"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":6,"skip":0,"numPages":3,"currentPage":1,"blogInfo":{"edgesCount":16}}}}
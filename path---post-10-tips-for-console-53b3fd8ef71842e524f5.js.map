{"version":3,"sources":["webpack:///path---post-10-tips-for-console-53b3fd8ef71842e524f5.js","webpack:///./.cache/json/post-10-tips-for-console.json"],"names":["webpackJsonp","290","module","exports","data","markdownRemark","html","frontmatter","date","path","title","headings","depth","value","pathContext","prev","category","tags","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,goGAAupEC,aAAuiCC,KAAA,iBAAAC,KAAA,2BAAAC,MAAA,qBAAsFC,WAAcC,MAAA,EAAAC,MAAA,2BAA6CD,MAAA,EAAAC,MAAA,+CAAiED,MAAA,EAAAC,MAAA,4BAA8CD,MAAA,EAAAC,MAAA,8EAAgGD,MAAA,EAAAC,MAAA,0CAA8DD,MAAA,EAAAC,MAAA,4CAA8DD,MAAA,EAAAC,MAAA,+DAAiFD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,2BAA6CD,MAAA,EAAAC,MAAA,8BAA+CC,aAAgBC,MAAQL,MAAA,6BAAAF,KAAA,aAAAQ,UAAA,SAAAC,MAAA,cAAAR,KAAA,yBAAmIS,MAASR,MAAA,SAAAF,KAAA,aAAAQ,UAAA,MAAAC,MAAA,wBAAAR,KAAA","file":"path---post-10-tips-for-console-53b3fd8ef71842e524f5.js","sourcesContent":["webpackJsonp([76673008349658],{\n\n/***/ 290:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code>console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code>console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code>console</code>的几个常用的方法</p>\\n<pre><code class=\\\"language-javascript\\\">console.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n</code></pre>\\n<p>除这些简单的使用外，下面几个<code>console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n<!-- more -->\\n<h1>Tip #1 console.trace()</h1>\\n<p>如果你想知道日志的函数执行位置，使用<code>console.trace()</code>可以打印栈堆跟踪信息。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/trace.png\\\" alt=\\\"trace\\\"></p>\\n<h1>Tip #2 console.time() &#x26;&#x26; console.timeEnd()</h1>\\n<p>如果你想知道某段程序的执行时间，可以使用<code>console.time()</code>和<code>console.timeEnd()</code>打印时间间隔。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/time.png\\\" alt=\\\"time\\\"></p>\\n<h1>Tip #3 console.memory()</h1>\\n<p>如果遇到一个相当棘手的性能问题，或者在寻找一个内存泄露的位置，可以尝试使用<code>console.memory(// property, not a function)</code>查看栈大小信息。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/memory.png\\\" alt=\\\"memory\\\"></p>\\n<h1>Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</h1>\\n<p>这个不是标准里面的方法，但是浏览器支持比较广泛。你可以使用这两个方法让浏览器的性能面板记录start至end的性能数据。使用这两个函数，能够更精准地定位你想要获取的数据。</p>\\n<h1>Tip #5 console.count(\\\"STUFF I COUNT\\\")</h1>\\n<p>在一些经常重复调用的代码中，使用<code>console.count()</code>可以记录该函数的执行次数。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/count.png\\\" alt=\\\"count\\\"></p>\\n<h1>Tip #6 console.assert(false, “Log me!”)</h1>\\n<p>当需要条件判断打印日志时候，可以使用<code>console.assert(condition, msg)</code>代替if-else。当<code>condition</code> 为false的时候就会打印出信息。\\n⚠️在Node.js中使用会抛出断言错误。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/assert.png\\\" alt=\\\"assert\\\"></p>\\n<h1>Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</h1>\\n<p>在一些写很多<code>console.log()</code>的情况下，你可能需要将日志分组。这时候就可以使用<code>console.group(name)</code> 去将日志分组，使用这个函数后，日志就会按层级打印。使用<code>console.groupEnd()</code>就能结束掉当前分组，在同级重新新建一个分组。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/group.png\\\" alt=\\\"group\\\"></p>\\n<h1>Tip #8 字符串替换</h1>\\n<p>使用<code>console</code>的时候可以使用字符串替换去合并变量，引用类型有下面几个<strong>(%s = string, %i = integer, %o = object, %f = float)</strong></p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/substitutions.png\\\" alt=\\\"substitutions\\\"></p>\\n<h1>Tip #9 console.clear()</h1>\\n<p>当代码里面很多<code>console</code>的时候，你可能会需要<code>console.clear()</code>清理一下前面的log</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/clear.png\\\" alt=\\\"clear\\\"></p>\\n<h1>Tip #10 console.table()</h1>\\n<p>好东西留到最后。使用<code>console.table()</code>，可以把对象打印成一个好看的表格。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/table.png\\\" alt=\\\"table\\\"></p>\\n<p>希望这几个能让你平时的调试工作能更高效和有趣。</p>\",\"frontmatter\":{\"date\":\"March 19, 2018\",\"path\":\"/post/10tips-for-console\",\"title\":\"10个console的高级使用方法\"},\"headings\":[{\"depth\":1,\"value\":\"Tip #1 console.trace()\"},{\"depth\":1,\"value\":\"Tip #2 console.time() && console.timeEnd()\"},{\"depth\":1,\"value\":\"Tip #3 console.memory()\"},{\"depth\":1,\"value\":\"Tip #4 console.profile(‘profileName’) & console.profileEnd(‘profileName’)\"},{\"depth\":1,\"value\":\"Tip #5 console.count(\\\"STUFF I COUNT\\\")\"},{\"depth\":1,\"value\":\"Tip #6 console.assert(false, “Log me!”)\"},{\"depth\":1,\"value\":\"Tip  #7 console.group(‘group’) & console.groupEnd(‘group’)\"},{\"depth\":1,\"value\":\"Tip #8 字符串替换\"},{\"depth\":1,\"value\":\"Tip #9 console.clear()\"},{\"depth\":1,\"value\":\"Tip #10 console.table()\"}]}},\"pathContext\":{\"prev\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"tags\":[\"自动化\",\"前端工具\"],\"path\":\"/post/pre-commit-hook\"},\"next\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"tags\":[\"work\",\"vue\",\"webpack\"],\"path\":\"/post/2017-review\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---post-10-tips-for-console-53b3fd8ef71842e524f5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code>console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code>console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code>console</code>的几个常用的方法</p>\\n<pre><code class=\\\"language-javascript\\\">console.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n</code></pre>\\n<p>除这些简单的使用外，下面几个<code>console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n<!-- more -->\\n<h1>Tip #1 console.trace()</h1>\\n<p>如果你想知道日志的函数执行位置，使用<code>console.trace()</code>可以打印栈堆跟踪信息。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/trace.png\\\" alt=\\\"trace\\\"></p>\\n<h1>Tip #2 console.time() &#x26;&#x26; console.timeEnd()</h1>\\n<p>如果你想知道某段程序的执行时间，可以使用<code>console.time()</code>和<code>console.timeEnd()</code>打印时间间隔。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/time.png\\\" alt=\\\"time\\\"></p>\\n<h1>Tip #3 console.memory()</h1>\\n<p>如果遇到一个相当棘手的性能问题，或者在寻找一个内存泄露的位置，可以尝试使用<code>console.memory(// property, not a function)</code>查看栈大小信息。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/memory.png\\\" alt=\\\"memory\\\"></p>\\n<h1>Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</h1>\\n<p>这个不是标准里面的方法，但是浏览器支持比较广泛。你可以使用这两个方法让浏览器的性能面板记录start至end的性能数据。使用这两个函数，能够更精准地定位你想要获取的数据。</p>\\n<h1>Tip #5 console.count(\\\"STUFF I COUNT\\\")</h1>\\n<p>在一些经常重复调用的代码中，使用<code>console.count()</code>可以记录该函数的执行次数。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/count.png\\\" alt=\\\"count\\\"></p>\\n<h1>Tip #6 console.assert(false, “Log me!”)</h1>\\n<p>当需要条件判断打印日志时候，可以使用<code>console.assert(condition, msg)</code>代替if-else。当<code>condition</code> 为false的时候就会打印出信息。\\n⚠️在Node.js中使用会抛出断言错误。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/assert.png\\\" alt=\\\"assert\\\"></p>\\n<h1>Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</h1>\\n<p>在一些写很多<code>console.log()</code>的情况下，你可能需要将日志分组。这时候就可以使用<code>console.group(name)</code> 去将日志分组，使用这个函数后，日志就会按层级打印。使用<code>console.groupEnd()</code>就能结束掉当前分组，在同级重新新建一个分组。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/group.png\\\" alt=\\\"group\\\"></p>\\n<h1>Tip #8 字符串替换</h1>\\n<p>使用<code>console</code>的时候可以使用字符串替换去合并变量，引用类型有下面几个<strong>(%s = string, %i = integer, %o = object, %f = float)</strong></p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/substitutions.png\\\" alt=\\\"substitutions\\\"></p>\\n<h1>Tip #9 console.clear()</h1>\\n<p>当代码里面很多<code>console</code>的时候，你可能会需要<code>console.clear()</code>清理一下前面的log</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/clear.png\\\" alt=\\\"clear\\\"></p>\\n<h1>Tip #10 console.table()</h1>\\n<p>好东西留到最后。使用<code>console.table()</code>，可以把对象打印成一个好看的表格。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/table.png\\\" alt=\\\"table\\\"></p>\\n<p>希望这几个能让你平时的调试工作能更高效和有趣。</p>\",\"frontmatter\":{\"date\":\"March 19, 2018\",\"path\":\"/post/10tips-for-console\",\"title\":\"10个console的高级使用方法\"},\"headings\":[{\"depth\":1,\"value\":\"Tip #1 console.trace()\"},{\"depth\":1,\"value\":\"Tip #2 console.time() && console.timeEnd()\"},{\"depth\":1,\"value\":\"Tip #3 console.memory()\"},{\"depth\":1,\"value\":\"Tip #4 console.profile(‘profileName’) & console.profileEnd(‘profileName’)\"},{\"depth\":1,\"value\":\"Tip #5 console.count(\\\"STUFF I COUNT\\\")\"},{\"depth\":1,\"value\":\"Tip #6 console.assert(false, “Log me!”)\"},{\"depth\":1,\"value\":\"Tip  #7 console.group(‘group’) & console.groupEnd(‘group’)\"},{\"depth\":1,\"value\":\"Tip #8 字符串替换\"},{\"depth\":1,\"value\":\"Tip #9 console.clear()\"},{\"depth\":1,\"value\":\"Tip #10 console.table()\"}]}},\"pathContext\":{\"prev\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"tags\":[\"自动化\",\"前端工具\"],\"path\":\"/post/pre-commit-hook\"},\"next\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"tags\":[\"work\",\"vue\",\"webpack\"],\"path\":\"/post/2017-review\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/post-10-tips-for-console.json\n// module id = 290\n// module chunks = 76673008349658"],"sourceRoot":""}
webpackJsonp([0xa1ae2709718c],{282:function(n,e){n.exports={data:{allMarkdownRemark:{edges:[{node:{excerpt:"\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\n\n# 项目构建\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\n\n",frontmatter:{title:"年底项目复盘",date:"2018-01-23",category:["工作"],path:"/post/2017-review"}}},{node:{excerpt:"\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\n\n----\n\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\n\n# 几个重要概念\n## 60fps与设备刷新率\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\n\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\n\n",frontmatter:{title:"构建60fps-web-app",date:"2017-09-13",category:["前端"],path:"/post/60fps-web-app"}}},{node:{excerpt:"\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\n\n# 配置\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\n```shell\n$npm install jest jest-vue-preprocessor --save-dev\n\n$yarn add jest jest-vue-preprocessor --save\n```\n\n",frontmatter:{title:"在vue项目中使用jest进行单元测试",date:"2017-08-18",category:["前端工具"],path:"/post/vue-jest-test"}}},{node:{excerpt:"\n# 类理论\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\n\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\n\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\n\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\n\n## js中实现类复制(混入)\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\n\n",frontmatter:{title:"深入学习javascript-类",date:"2017-07-20",category:null,path:"/post/js-class"}}},{node:{excerpt:"\n# 关于this\n\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\n\n# this的指向\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\n```javascript\nfunction baz() {\n  // 当前调用栈是 baz\n  // 当前调用位置是全局作用域\n\n  console.log('baz');\n  bar(); // bar的调用位置\n}\n\nfunction bar() {\n  // 当前的调用栈是 baz -> bar\n  // 当前的调用位置是baz\n\n  console.log('bar');\n  foo();\n}\n\nfunction foo() {\n  // 当前的调用栈是 baz -> bar -> foo\n  // 当前的调用位置是bar\n\n  console.log('foo');\n}\n\nbaz();\n```\n\n",frontmatter:{title:"深入学习javascript - this",date:"2017-06-27",category:null,path:"/post/js-this"}}},{node:{excerpt:"\nwebpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。\n\n# 从webpack1中迁移\n官方已经给出了详细的[迁移指南](https://webpack.js.org/guides/migrating/)，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。\n\n## 配置文件\n如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。\n\n### `module.loaders`变成`module.rules`\n旧的`module.loader`被`module.rules`取代，后者允许配置`loader`更多选项，具体查看文档[module.rules](https://webpack.js.org/configuration/module/#module-rules)\n\n```javascript\n// ...\nmdoule: {\n    rules: [\n        {\n            test: /\\.css$/,\n            use: [\n                { loader: 'style-loader' },\n                {\n                    loader: 'css-loader',\n                    options: { module: true }\n                }\n            ]\n        },\n        {\n            test: /\\.jsx$/,\n            loader: 'babel-loader',\n            options: {\n                // ...\n            }\n        }\n    ]\n}\n// ...\n```\n\n",frontmatter:{title:"webpack2新特性&迁移",date:"2017-06-24",category:["前端工具"],path:"/post/webpack2"}}},{node:{excerpt:"\n# 什么是闭包\n记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。\n\n> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\n--- 你不知道的javascript（上卷）\n\n然后看个例子\n```javascript\nfunction foo() {\n\tvar a = 2;\n\n\tfuntion bar() {\n\t\tconsole.log(a);\n\t}\n\n\tbar();\n}\n\nfoo();\n```\n如果按上面第一条的定义，这里一定是生成了闭包，但是**确切的说并不是**，这里最准确的说是`bar`对`a`的引用方式是词法作用域的查找规则，而这些只是**闭包**的一部分。然后再看清晰闭包的例子\n\n```javascript\nfucntion foo() {\n\tvar a = 2;\n\n\tfunction bar() {\n\t\tconsole.log(a)\n\t}\n\n\treturn bar;\n}\n\nvar baz = foo()；\n\nbaz(); // 这就是闭包效果\n```\n\n",frontmatter:{title:"深入学习javascript-闭包",date:"2017-06-14",category:null,path:"/post/js-closures"}}},{node:{excerpt:"\n之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。\n\n# 主要需求\n这个demo中爬虫有3个主要模块，**URL管理器**、**下载器**、**解析器**\n* URL管理器主要处理爬取的URL的状态。\n* 下载器会通过**URL管理器**传送过来有效URL进行下载。\n* 解析器会将**下载器**下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给**URL管理器**进行重复操作。\n\n## 入口程序\n`spider_main`文件为程序入口，处理整个爬虫的运行逻辑\n\n",frontmatter:{title:"用python写一个简单爬虫",date:"2017-06-11",category:null,path:"/post/python-crawler"}}},{node:{excerpt:"\n# 前言\n使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。\n\n# 作用域是什么\nJS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为**作用域**。\n\n\n\n## 理解作用域执行过程\n如在`var a = 2`执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。\n\n首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\n1. 遇到var a，编译器会在**作用域**中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\n2. 接下来，编译器会为**引擎**生成运行时所需的代码，代码用来处理`a = 2`这个赋值操作。引擎运行时会首先询问**作用域**当前作用集合是否有一个`a`的变量。如果是，**引擎**就会使用这个变量；如果不是，引擎会继续查找该变量。如果**引擎**找到`a`变量，就会赋值2。否则，**引擎**会抛出一个异常。\n\n**总结**：变量赋值分别有两个动作，**编译器**会在当前**作用域**中声明一个变量（如果之前没有声明过），然后在运行时引擎会在**作用域**中查找该变量，如果能找到就对变量进行赋值。\n\n",frontmatter:{title:"深入学习javascript--作用域",date:"2017-05-31",category:null,path:"/post/js-scope"}}},{node:{excerpt:"\n# 题目\n之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\n当时第一反应就是用递归实现\n```javascript\nfunction add(x) {\n\tvar fn = function(y) {\n\t\treturn add(x + y);\n\t}\n\n\treturn fn;\n}\n\nconsole.log(add(1)(2)(3))\n```\n\n# 实现方法\n这样写是可以实现调用方式，但是怎么`return x`呢，回来想还是一脸懵逼，于是上网找了点其他人的实现方式，发现他们是重写了`object`的`valueOf`和`toString`的方法。然后再跑了一遍。\n```javascript\nfunction add(x) {\n\tvar fn = function(y) {\n\t\treturn add(x + y);\n\t}\n\n\tfn.toString = function() {\n\t\treturn x;\n\t}\n\n\treturn fn;\n}\n\n\n// chrome  function 6\n// firefox function add/fn\n// node    { [Number: 6] toString: [Function], valueOf: [Function] }\nconsole.log(add(1)(2)(3))\n\nconsole.log(add(1)(2)(3).toString()) // 6\n```\n\n",frontmatter:{title:"js实现add(1)(2)(3)",date:"2017-05-28",category:["javascript"],path:"/post/add-chain"}}},{node:{excerpt:"\n老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，[promise](https://promisesaplus.com/)（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。\n\n下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。\n\n\n\n# 初步构建一个Promise\n我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现\n```javascript\n// 例1\nfunction getAsyncData() {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\tresolve('promise done!')\n\t\t}, 1000)\n\t})\n}\n\ngetAsyncData().then(function(result) {\n\tconsole.log(result);\n}).then(function() {\n\tconsole.log('done too!');\n})\n```\n\n",frontmatter:{title:"Promise的简单实现",date:"2017-05-17",category:["前端"],path:"/post/js-promise"}}},{node:{excerpt:"\n# 什么是单元-测试?\n- 单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。\n- 而测试，就是测试啦。\n\n所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。\n\n# 为什么要写单元测试？\n单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。\n\n",frontmatter:{title:"前端单元测试&Mocha指北",date:"2017-05-16",category:["前端"],path:"/post/unit-test"}}},{node:{excerpt:'\n> 原文译自[Smashing Magazine](https://www.smashingmagazine.com/) -- [[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)\n\n相信很多前端都听说过或者使用过[Gulp](http://www.gulpjs.com.cn/), [Angular CLI](https://cli.angular.io/), [Cordova](https://cordova.apache.org/), [Yeoman](http://yeoman.io/)或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用`ng new <project-name>`后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。\n\n在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用[SendGrid Api](https://github.com/sendgrid/sendgrid-nodejs)模拟发送）\n文章目录：\n1."Hello World"\n2.处理命令行参数\n3.运行时输入参数\n4.模拟发送邮件\n5.改变输出内容样式\n6.变成shell命令\n\n',frontmatter:{title:"使用nodejs写一个命令行程序",date:"2017-05-16",category:["前端"],path:"/post/node-command-app"}}},{node:{excerpt:"\n好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。\n\n### 小科普\n什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！\n\n",frontmatter:{title:"React-todo demo",date:"2016-03-02",category:["js framework"],path:"/post/react-todo"}}}]}},pathContext:{nodes:[{node:{frontmatter:{title:"年底项目复盘",date:"2018-01-23",category:["工作"],tags:["work","vue","webpack"],path:"/post/2017-review"},excerpt:"\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\n\n# 项目构建\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\n\n",headings:[{depth:1,value:"项目构建"},{depth:2,value:"代码分割"},{depth:2,value:"代码风格及限制"},{depth:1,value:"开发阶段"},{depth:2,value:"组件化"},{depth:2,value:"动态接口地址"},{depth:2,value:"测试"},{depth:1,value:"SSR"},{depth:1,value:"总结"}],html:'<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\n<h1>项目构建</h1>\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href="https://github.com/kitwon/vue-mpa">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\n<!-- more -->\n<h2>代码分割</h2>\n<p>SPA一个比较重要的点就是如何做代码分割了。代码分割涉及到几个方面：</p>\n<ol>\n<li><a href="https://router.vuejs.org/zh-cn/advanced/lazy-loading.html">路由分割</a>官方已经有很好的解决方案了。除文档基本说明外，还使用了<a href="https://doc.webpack-china.org/api/module-methods/#import-"><code>webpackChunkName</code></a>对组件进行模块合并，减少文件请求。</li>\n<li>一些比较大的库例如<code>momentjs</code>、<code>lodash</code>代码提取。虽然<code>webpack</code>里面提供了<code>commonChunkPlugin</code>，但是这个插件只对入口文件进行分析和代码提取，而组件里面的一些库则使用了<a href="https://github.com/asfktz/autodll-webpack-plugin">autodll-webpack-plugin</a>，对一些依赖库进行提取和合并操作，并配合<code>html-webpack-plugin</code>配合自动注入，生成页面模板。</li>\n</ol>\n<p>另外，引入了<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">BundleAnalyzerPlugin</a>，对module进行图形化的分析。进行各种优化后，<code>vendor</code>和入口文件维持在600k左右，gzip后在200k左右，其他模块gzip后基本在<strong>20-50kb</strong>左右。</p>\n<h2>代码风格及限制</h2>\n<p>由于项目使用webpack和node构建，所以可以使用<code>eslint</code>等工具去做提交前代码规范检查，另外还使用了<code>editorconfig</code>和<a href="https://github.com/prettier/prettier"><code>prettier</code></a>去编辑器的设置和统一代码格式化。另外提一下，<a href="https://github.com/prettier/prettier"><code>prettier</code></a>可以通过配置项统一多种代码的格式化，因为在node端运行，所以可以做提交前的代码格式化。\n在各种工具配合下，基本可以做到代码风格的统一。</p>\n<p>此外，css方面没有使用csslint，但是普及了一下<a href="http://getbem.com/"><strong><code>BEM</code></strong></a>，样式方面的统一情况也收到不错的成效。</p>\n<h1>开发阶段</h1>\n<p>vue在开发时候的好处就体现出来了，没写过项目的同事基本都能把页面写出来，但是对于一些参数传递、父子组件相互调用会需要一点时间去熟悉。但是在开发流程中基本没有出现什么断链的情况。</p>\n<h2>组件化</h2>\n<p>在公司期间接触过几个项目，项目结构都比较凌乱，并没有把组件化的优势发挥出来，很多页面都是重新写几遍。所以这项目开始做之前，就普及了一下react生态圈里面的几个组件概念。</p>\n<ol>\n<li><strong>container component(接入型组件)</strong>。负责主要业务逻辑，组装数据，提供业务方法。</li>\n<li><strong>exhibition component(展示型组件)</strong>。负责数据展示工作，大部分是业务组件，数据进，页面出这样，没有复杂功能。</li>\n<li><strong>interactive component(交互型组件)</strong>。复用性比较强的组件，如<code>dialog</code>、<code>toast</code>等组件。</li>\n<li><strong>functional component(功能型组件)</strong>。这种组件一般都是作为一种扩展，抽象机制存在，没有渲染动作，例如vue中的<code>router-view</code>，<code>transition</code>等。</li>\n</ol>\n<p>了解大概组成后，一般都会把组件拆分得比较细，基本组件代码维持在<strong>300行代码</strong>左右，这样做得好处就是，业务变动时候需要改动的地方就比较少，但是组件对每个模块的影响相对的就变大了，但是这个可以通过<strong>测试</strong>去解决的。</p>\n<h2>动态接口地址</h2>\n<p>项目中接口跟静态资源会动态改变，所以需要取后台返回的值去拼接，页面静态资源可以自己写一个模板然后去拼接，接口可以取页面的变量，但是打包到项目的时候，发现路由分割的代码资源地址不对，由于代码是动态分割的，所以地址应该是取<code>config</code>里面的资源地址，所以导致加载失败。\n通过webpack文档跟stackoverflow里面相似案例，可以在动态引入js之前加入一个<a href="https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific-"><code>__webpack_public_path__</code></a>配置项，动态获取异步模块的地址。具体代码如下：</p>\n<pre><code class="language-javascript">if (process.env.NODE_ENV === \'production\') {\n  // variables就是动态的地址\n  __webpack_public_path__ = variables + \'/\';\n};\n</code></pre>\n<h2>测试</h2>\n<p>由于前期比较急，单元测试到了中后期才加上，直接导致了单元测试的覆盖率不够，正常情况下应该一写完代码就马上加上测试。测试这些前期费点时间，后期获益良多的工作，项目、团队越大就越能体现测试的重要性了。\n现在是使用<a href="https://facebook.github.io/jest/">Jest</a> + <a href="https://eddyerburgh.gitbooks.io/avoriaz/content/">Avariaz</a>的组合去做测试工作，后期会切换为<code>Jest</code> + 官方提供的<a href="https://vue-test-utils.vuejs.org/zh-cn/">vue-test-utils</a>，两个<code>API</code>相似，切换代价不大。</p>\n<h1>SSR</h1>\n<p>项目没有这部分的需求，就自己在有空时间折腾了一下，照着官方的SSR文档搭了出来，不过用<a href="http://koajs.com/"><code>koa</code></a>代替了express（await、async写起来更爽一点）。直出的速度果然是不一样啊，不过也存在几个暂时还没空看的问题。</p>\n<ol>\n<li>按需直出页面设置，比如我需要A页面直出，B页面不直出，这操作还没找到怎么配置。</li>\n<li><code>Route</code>函数式的跳转无效，比如按钮需要动态去定义跳转方式的，绑定了函数，但是SSR处理后点击无效。</li>\n<li>服务器性能测试。由于node是单线程的，没做过对应的项目，不知道流量大的时候怎么处理，有机会要了解下。</li>\n</ol>\n<h1>总结</h1>\n<p>项目进行过程除了上面动态绑定接口地址，开发过程还是比较顺利的，不过还有几个需要改进的地方</p>\n<ol>\n<li>虽然有做code review，但是大部分都是自己改进，可以多留点问题和提出多点意见给对<code>vue</code>或者项目其他模块还不是很熟悉的同事去学习，共同进步。</li>\n<li>项目启动前对业务的了解不够清楚，导致后期才介入<code>vuex</code>去改进一些模块，做了无用功。</li>\n<li>项目启动前和设计沟通不够，导致后期图标没有使用到<code>iconfont</code>。不过后面也配合用按<code>BE(Block-Modify)</code>的方式命名图标，写了个脚本去自动生成less文件。</li>\n</ol>',htmlExcerpt:'<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\n<h1>项目构建</h1>\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href="https://github.com/kitwon/vue-mpa">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\n'}},{node:{frontmatter:{title:"构建60fps-web-app",date:"2017-09-13",category:["前端"],tags:["chrome","develop tool","javascript"],path:"/post/60fps-web-app"},excerpt:"\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\n\n----\n\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\n\n# 几个重要概念\n## 60fps与设备刷新率\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\n\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\n\n",headings:[{depth:1,value:"几个重要概念"},{depth:2,value:"60fps与设备刷新率"},{depth:2,value:"pixel pipeline"},{depth:1,value:"关键渲染行为"},{depth:2,value:"触发layout、paint的关键操作"},{depth:1,value:"优化程序"},{depth:2,value:"performance panel"},{depth:2,value:"javascript"},{depth:2,value:"style & layout"},{depth:2,value:"paint & composite"},{depth:3,value:"怎么看到网页的分层"},{depth:3,value:"怎么生成层"}],html:'<blockquote>\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href="https://developers.google.com/web/fundamentals/performance/rendering/">render performance</a>对前端渲染优化有了一个新的认识。</p>\n</blockquote>\n<h1>几个重要概念</h1>\n<h2>60fps与设备刷新率</h2>\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\n<!-- more -->\n<h2>pixel pipeline</h2>\n<p>影响浏览器渲染有很多因素，但是下面这5个关键的地方是我们可以控制的，也是像素至屏幕管道中关键的地方。\n<img src="http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg" alt="pixel pipeline"></p>\n<ul>\n<li>Javascript。 js中的动画效果和一些dom操作。</li>\n<li>样式计算(style)。 css匹配器的计算过程。例如<code>.nav__item > .slot</code>。</li>\n<li>布局(layout)。dom元素应用了规则之后，浏览器就会对其进行大小及位置的计算，这时候就会触发布局，而布局由于改变dom大小及位置，所以对其他元素也会造成影响。</li>\n<li>绘制(paint)。绘制就是填充像素的过程。大部分像素相关如文字、图片、阴影等都会触发绘制。绘制一般在层(layer)上面完成。</li>\n<li>合成。层的概念一般都出现在设计上面，但是浏览器中也有层的概念，所以有时候我们一些错误的操作或者属性都会使层的渲染顺序出现错误。</li>\n</ul>\n<h1>关键渲染行为</h1>\n<p>从服务器返回一个html开始，可以分为以下几步(这里英文的过程分别对应开发工具中<strong>performance</strong>面板的表示</p>\n<ol>\n<li>解析html，生成dom树，这里显示为<strong>Parser Html</strong></li>\n<li>然后根据页面的样式，将dom和css进行结合，此过程为<strong>Recalculate Style</strong></li>\n<li>最后就生成渲染树，<code>display: none</code>或<code>:after</code>等伪元素都不会出现在渲染树上</li>\n<li>浏览器知道哪个css规则应用哪个dom元素后，就开始计算布局(计算元素占用多少空间，出现在什么位置)，此过程是<strong>layout</strong></li>\n<li>确定位置后浏览器就开始对dom的样式及内容进行渲染，称为<strong>paint</strong></li>\n<li>dom渲染的时候，可能还会有图片资源，浏览器这时候就会将这些内容解码成内存，称为<strong>Image Decode + Resize</strong></li>\n<li><strong>paint</strong>开始的操作都是在同一个层面中执行，但其实浏览器还会创建多个图层，并且对这些图层进行单独的绘制，这个过程称为<strong>Composite Layers</strong></li>\n<li>这些操作在CPU中进行，执行完后上传到GPU中，最后显示到屏幕上</li>\n</ol>\n<h2>触发layout、paint的关键操作</h2>\n<p>我们知道一帧中就包含了上面的操作，但并不是所有改变网页外观操作都会触发上面的行为。回到<strong>pipeline</strong>，看看什么操作会分别触发什么行为。(下面会用数字代表对应图片上的位置)\n<img src="http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg" alt="pixel pipeline"></p>\n<ul>\n<li>第一种，通过css或者js进行了外观的更改(1)，这时浏览器就要重新计算元素的样式(2)，如果还更改了布局属性，元素的大小改变，必定会影响其他元素的位置，这时就要重新布局(3)，然后受影响的区域就需要重新绘制(4)，最后将所有东西合成在一起(5)。</li>\n<li>第二种，仅改变绘制属性(1)，例如背景、文字颜色、阴影等(2)，由于这些操作没有改变布局，所以会跳过(3)，直接进行(4)(5)的操作。</li>\n<li>第三种，通过改变样式(1)(2)，但是样式并没有对(3)(4)进行改动，所以会直接执行(5)的操作，例如<code>cursor: pointer</code>等属性。</li>\n</ul>\n<h1>优化程序</h1>\n<p>通过上面的介绍，我们知道影响帧数的主要是上面的几个渲染行为，但是要怎么知道是什么更改操作使帧数下降，就需要<strong>develop tool</strong>的帮助。</p>\n<h2>performance panel</h2>\n<p>性能分析面板是chrome中开发者工具自带的一个功能，我们能在上面看到录制实践中，<strong>pipeline</strong>的具体运行情况。\n<img src="http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/performance.jpg" alt="performance panel"></p>\n<ol>\n<li>在(1)<strong>overview</strong>中，我们可以看到程序中大概的性能状况，fps、cpu、网络使用情况，还有对应的截图。一般情况，看到<strong>cpu</strong>部分一大片一大片的颜色就证明你的程序需要优化了。</li>\n<li>(2)中的<strong>main</strong>部分，可以看到主进程中的活动，所有时间点执行的操作及渲染行为都能在这个部分找到，主要的性能分析也是围绕这里展开，一半看到<strong>飙红</strong>的地方就证明那里是要下手的地方。</li>\n<li>(3)中则是对某个浏览器行为进行统计分析，能看到详细调用树和渲染层，找代码和<strong>layer tree</strong>都是(3)中。</li>\n</ol>\n<p>由于网上教程大部分的教程都用较低的版本，所以很多教程中的面板都找不到，比如<strong>painter</strong>就需要开启<strong>advance paint insturmentation</strong>，所以教程中找不到就需要google一下或者看下<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/">goole的官方教程</a>。具体的使用方法就不赘述，反正看见<strong>飙红就是要优化了</strong>。</p>\n<p>有工具之后，就可以针对具体的东西进行优化了，根据<strong>pipeline</strong>，我们其实可以知道优化点是哪几个了，javascript, style &#x26; layout, paint &#x26; composite。下面一个个分析下优化点。</p>\n<h2>javascript</h2>\n<p>由于javascript在<strong>pipeline</strong>中，所以在渲染过程中执行javascript代码必定会造成卡顿，俗称的帧丢失。在渲染过程中需要执行js代码的操作最常见的例子就是<strong>用js去操作动画</strong>，还有<strong>在浏览过程中做一些数据拉取及组装数据的操作</strong>。所以针对这些问题，我们需要使用一些新的api去改进我们的app。</p>\n<p><strong>1.使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">requestAnimationFrame</a>代替setTimeout和setInterval去执行动画。</strong>\n一开始我们就说到帧数的概念，一个app想要不卡顿，必须达到60fps每秒的速度才能保证，减去浏览器自己的行为，每帧留给javascript执行的时间大概剩下10ms左右。或许不断调用setTimeout或者setIntervarl可以自定义函数执行时间，但是由于javascript是单线程，活着其他堆在栈中的代码会突然插入，导致函数执行中断。这时候raf就能解决这个问题了。具体使用方法可以自行查看<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">文档</a>。</p>\n<p><strong>2.使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker">web worker</a>去进行一些多线程的操作。</strong>\n使用web worker后，浏览器会另起一个线程，所以就不会妨碍主线程中的pipeline了。我们可以在一些加载列表的场景中使用，比如用户在浏览，但是你想用这些时间去load一些数据回来，然后渲染页面，这时候worker会执行ajax，也不会妨碍到主线程执行。</p>\n<h2>style &#x26; layout</h2>\n<p>样式和布局也是帧里面的一部分，复杂的选择器或者某些js操作触发了强制布局，都会使性能下降，下面可以用这几个方法避免这些问题。\n<strong>1.操作数量多的dom时，减少选择器的复杂度。</strong>\n通常做项目的时候，我们一般都是操作少数的dom，但是某些特殊情况下可能要操作上千个dom(当然这不太现实)，这时候保持选择器的简洁就相当重要了，一个多级选择器计算时间足以超出10ms，所以，保持css中选择器的简洁是十分重要的。</p>\n<p><strong>2.避免布局反复FSL</strong>\n什么是布局反复，一帧的流程应该是按照<strong>pipeline</strong>的执行顺序去执行的，但是某些错误的javascript读写操作就很容易造成布局反复，如下代码</p>\n<pre><code class="language-javascript">var elms = document.getElementByTagName(\'p\')\nvar block = ducoment.getElementById(\'block\')\n\nfor (let i = 0; i &#x3C; elms.length; i++) {\n  var height = block.offsetHeight\n  elms[i].style.height = height\n}\n</code></pre>\n<p>在这段代码中，由于属性的读取操作<code>offsetHeight</code>会触发layout布局，然后下面设置高度的属性会触发style修改样式，两个在一个循环中就会造成布局反复，从而造成性能的损失。在<strong>performance panel</strong>中，缩小范围，如果看见layout中有红色的小三角，那么就是触发了FSL了，点进详情就能看到代码运行的地方在哪里了。</p>\n<h2>paint &#x26; composite</h2>\n<p>绘制和合成是一个相对比较复杂的流程，大多数样式更改都会触发这个过程，但是如果是大批量的元素或者一个复杂的动画绘制，在主线程中必定会造成性能问题。在这里就引入图层这个概念，由于浏览器的呈现器不在主线程中，所以图层会单独绘制，然后再和树进行合成。但如果层多的话，合成时间也会加长，所以使用层和限制层的数量也是需要注意的问题。</p>\n<h3>怎么看到网页的分层</h3>\n<p>具体看<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler">教程</a>\n进去搜<strong>View paint profiler</strong></p>\n<ol>\n<li>Enable advanced paint instrumentation.(这个选项在上图面板一，点击右上角的小齿轮)</li>\n<li>Select a Paint event in the Main section.(教程里面看图)</li>\n</ol>\n<h3>怎么生成层</h3>\n<ol>\n<li>社区中比较常见的<code>transform: translate3d(0, 0, 0)</code>、<code>transform: translateZ(0)</code>。虽然会有一些性能的浪费，但是好像是现在比较好的解决方法了。</li>\n<li>使用css新属性<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change"><code>will-change: transform</code></a>，浏览器支持度一般般。</li>\n</ol>\n<p>能够看完整篇的同学估计耐性都不错。通过一些基本的介绍，基本可以了解怎么查看和修复app的渲染性能问题了，不过使用现代的开发框架如<strong>react</strong>、<strong>vue</strong>、<strong>angular</strong>都很少会出现<strong>FSL</strong>的问题了，因为很大部分的<strong>layout</strong>动作都直接被<code>rerender</code>，但是一些比较旧的用dom操作些的APP或多或少都会出现上面的问题。大家可以看看自己的APP有没有达到要求。不说了，我去改代码了。</p>',htmlExcerpt:'<blockquote>\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href="https://developers.google.com/web/fundamentals/performance/rendering/">render performance</a>对前端渲染优化有了一个新的认识。</p>\n</blockquote>\n<h1>几个重要概念</h1>\n<h2>60fps与设备刷新率</h2>\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\n'}},{node:{frontmatter:{title:"在vue项目中使用jest进行单元测试",date:"2017-08-18",category:["前端工具"],tags:["unit test","vue","javascript"],path:"/post/vue-jest-test"},excerpt:"\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\n\n# 配置\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\n```shell\n$npm install jest jest-vue-preprocessor --save-dev\n\n$yarn add jest jest-vue-preprocessor --save\n```\n\n",headings:[{depth:1,value:"配置"},{depth:2,value:"package.json"},{depth:1,value:"跑个测试"},{depth:1,value:"last"}],html:'<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href="http://facebook.github.io/jest/">jest</a>，这是一个<a href="https://code.facebook.com/projects/">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\n<h1>配置</h1>\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析\'.vue\'文件的)。</p>\n<pre><code class="language-shell">$npm install jest jest-vue-preprocessor --save-dev\n\n$yarn add jest jest-vue-preprocessor --save\n</code></pre>\n<!-- more -->\n<h2>package.json</h2>\n<p>下面的配置都在<strong>package.json</strong>文件中配置。</p>\n<p>在文件最底部添加下面代码</p>\n<pre><code class="language-javascript">{\n  // ...\n  "jest": {\n    // 配置文件拓展名\n    "moduleFileExtensions": [\n      "js",\n      "vue"\n    ],\n    // 匹配webpack中配置的alias\n    "moduleNameMapper": {\n      "^vue$": "vue/dist/vue.common.js",\n      "^@(.*)$": "&#x3C;rootDir>/src$1"\n    },\n    // 编译工具\n    "transform": {\n      ".*\\\\.(vue)$": "&#x3C;rootDir>/node_modules/jest-vue-preprocessor",\n      ".*": "babel-jest"\n    }\n  }\n}\n</code></pre>\n<!-- more -->\n<p>然后在上面<code>script</code>中添加一条新的命令</p>\n<pre><code class="language-javascript">{\n  // ...\n  "test": "./node_modules/.bin/jest"\n}\n</code></pre>\n<p>然后就配置好了，很快，很舒服。</p>\n<h1>跑个测试</h1>\n<p>首先，我有个vue组件cell，一个简单的列表item组件，代码如下</p>\n<pre><code class="language-vue">&#x3C;template>\n  &#x3C;a class="ui-cell" :href="href">\n    &#x3C;div class="ui-cell-wrapper">\n      &#x3C;slot name="icon">\n        &#x3C;i v-if="iconClass" :class="iconClass">&#x3C;/i>\n      &#x3C;/slot>\n      &#x3C;slot name="title">\n        &#x3C;div class="ui-cell-title">\n          &#x3C;div class="ui-cell-text" v-text="title">&#x3C;/div>\n          &#x3C;div class="ui-cell-label" v-if="label" v-text="label">&#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/slot>\n      &#x3C;div class="ui-cell-value" :class="{ \'isLink\': isLink }">\n        &#x3C;slot>\n           &#x3C;div v-text="value">&#x3C;/div>\n        &#x3C;/slot>\n      &#x3C;/div>\n      &#x3C;i class="icon-arrow-right" v-if="isLink">&#x3C;/i>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/template>\n\n...\n\n&#x3C;script>\n  export default {\n    name: \'ui-cell\',\n    props: {\n      to: [String, Object],\n      iconClass: String,\n      title: String,\n      label: String,\n      value: {\n        default: \'\'\n      }\n    },\n    computed: {\n      href () {\n        if (this.to &#x26;&#x26; !this.added &#x26;&#x26; this.$router) {\n          const resolve = this.$router.match(this.to)\n          if (resolve.matched.length &#x3C;= 0) {\n            return this.to\n          }\n\n          this.$nextTick(() => {\n            this.added = true\n            this.$el.addEventListener(\'click\', this.handleClick)\n          })\n          return resolve.path\n        }\n\n        return this.to\n      },\n      isLink () {\n        return !!this.to\n      }\n    },\n    methods: {\n      handleClick (e) {\n        e.preventDefault()\n        this.$router.push(this.href)\n      }\n    }\n  }\n&#x3C;/script>\n</code></pre>\n<p>然后编写测试文件</p>\n<pre><code class="language-javascript">import Vue from \'vue\'\nimport Cell from \'@/components/cell\'\nimport VueRouter from \'vue-router\'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: \'/foo\',\n    component: Cell\n  }\n]\nconst router = new VueRouter({\n  routes\n})\n\nconst mockFn = jest.fn()\nCell.methods = {\n  handleClick(e) {\n    mockFn.mockReturnValue(true)\n  }\n}\n\nconst Constructor = Vue.extend(Cell)\nconst vm = new Constructor({\n  propsData: {\n    title: \'cell1\',\n    value: \'value1\',\n    label: \'label1\'\n  }\n}).$mount()\n\nconst vm2 = new Constructor({\n  router,\n  propsData: {\n    title: \'cell2\',\n    value: \'value2\',\n    to: \'/foo\'\n  }\n}).$mount()\n\nconst vm3 = new Constructor({\n  propsData: {\n    title: \'cell3\',\n    value: \'value3\',\n    iconClass: \'icon-test\'\n  }\n}).$mount()\n\ndescribe(\'Cell component\', () => {\n  test(\'render currect dom\', () => {\n    expect(vm.$el).toMatchSnapshot()\n    expect(vm2.$el).toMatchSnapshot()\n    expect(vm3.$el).toMatchSnapshot()\n  })\n\n  test(\'router action currectly run\', () => {\n    vm2.$nextTick(() => {\n      vm2.$el.click()\n      expect(vm2.href).toBe(vm2.to)\n      expect(mockFn()).toBe(true)\n    })\n  })\n})\n</code></pre>\n<p>然后跑一下命令</p>\n<pre><code class="language-shell">$npm run test\n\n> jest-test@1.0.0 test /Users/kit/projects/jest-test\n> jest\n\n PASS  test/unit/Cell.spec.js\n  Cell component\n    ✓ render currect dom (8ms)\n    ✓ router action currectly run (2ms)\n\nSnapshot Summary\n › 3 snapshots written in 1 test suite.\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   3 added, 3 total\nTime:        2.295\n</code></pre>\n<h1>last</h1>\n<p>jest给我们提供了一个便捷的测试环境，简单的几个配置项，即可完成编译，不像mocha或jasmine需要其他<code>node module</code>配合完成测试的工作。个人认为fb还是做到了他希望的，让测试变得简单，让开发者有更多的时间去开发。至于自动化测试的好处这里就不再赘述了，有兴趣的朋友可以自行baidu、google。</p>',htmlExcerpt:'<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href="http://facebook.github.io/jest/">jest</a>，这是一个<a href="https://code.facebook.com/projects/">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\n<h1>配置</h1>\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析\'.vue\'文件的)。</p>\n<pre><code class="language-shell">$npm install jest jest-vue-preprocessor --save-dev\n\n$yarn add jest jest-vue-preprocessor --save\n</code></pre>\n'}},{node:{frontmatter:{title:"深入学习javascript-类",date:"2017-07-20",category:null,tags:null,path:"/post/js-class"},excerpt:"\n# 类理论\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\n\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\n\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\n\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\n\n## js中实现类复制(混入)\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\n\n",headings:[{depth:1,value:"类理论"},{depth:2,value:"js中实现类复制(混入)"},{depth:3,value:"显式混入"},{depth:3,value:"隐式混入"},{depth:1,value:"prototype-原型"},{depth:2,value:"如何工作"},{depth:1,value:"小结"}],html:"<h1>类理论</h1>\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code>Vehicle</code>类，<code>Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code>Car</code>时，只要声明它继承或者拓展<code>Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code>Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\n<p>javascript中也有类中的<code>new</code>和<code>instanceof</code>，还有ES6中的<code>class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\n<h2>js中实现类复制(混入)</h2>\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\n<!-- more -->\n<h3>显式混入</h3>\n<p>显示混入在其他库或者框架中一般被称为<code>extend</code>，在这方便理解会使用<code>mixin</code>。</p>\n<pre><code class=\"language-javascript\">// 前面的Vehicle和car的例子\nfunction mixin(sourceObj, targetObj) {\n  for(var i in sourceObj) {\n    if(!(i in targetObj)) {\n      targetObj[i] = sourceObj[i];\n    }\n  }\n\n  return targetObj;\n}\n\nvar Vehicle = {\n  engines: 1,\n  ignition: function() {\n    console.log('Turning on my engines.');\n  },\n  drive: function() {\n    this.ignition();\n    console.log('Steering and moving forward.');\n  }\n}\n\nvar Car = mixin(Vehicle, {\n  wheels: 4,\n  drive: function() {\n    Vehicle.drive.call(this);\n    console.log('Rolling on all' + this.wheels + 'wheels!');\n  }\n})\n</code></pre>\n<p>还有一种显示混入的变体叫<strong>寄生继承</strong></p>\n<pre><code class=\"language-javascript\">function Vehicle() {\n  this.engines = 1;\n}\nVehicle.prototype.ignition = function() {\n  console.log('Turning on my engines.');\n}\nVehicle.prototype.drive = function() {\n  this.ignition();\n  console.log('Steering and moving forward.');\n}\n\n// 寄生类 car\nfunction Car() {\n  var car  = new Vehicle();\n\n  car.wheels = 4;\n  var vehDrive = car.drive;\n\n  car.drive = function() {\n    Vehicle.call(this);\n    console.log('Rolling on all' + this.wheels + 'wheels!');\n  }\n\n  return car;\n}\n\nvar myCar = new Car();\nmyCar.drive();\n</code></pre>\n<h3>隐式混入</h3>\n<p>隐式混入就是改变在一个函数体内执行另外另一个函数的方法。</p>\n<pre><code class=\"language-javascript\">var foo = {\n  cool: function() {\n    this.count = this.count ? this.count++ : 1;\n    console.log(this.count);\n  }\n}\n\nfoo.cool(); // 1\n\nvar bar = {\n  cool: function() {\n    foo.cool.call(this);\n  }\n}\n\nbar.cool(); // 1, 数据不共享\n</code></pre>\n<h1>prototype-原型</h1>\n<p>JS中，当试图引用对象属性时候就会触发<code>[[GET]]</code>操作，如果在对象属性中没有找到，就会使用对象的<code>[[prototype]]</code>链。JS大部分复杂类型都是<code>object</code>，所以<code>[[prototype]]</code>“尽头”应该是<code>Object.prototype</code>，里面包含了许多原生方法，如<code>toString</code>或<code>valueOf</code>。</p>\n<h2>如何工作</h2>\n<p>JS和其他OO语言并不同，JS中并没有类作为对象的抽象模式，JS中只有对象，所以当new一个对象时候，并不是复制一个类函数，而是将目标对象的<code>prototype</code>关联到新对象的<code>prototype</code>中。</p>\n<h1>小结</h1>\n<p><code>prototype</code>部分书本总结得比较清楚，想知道更多细节的同学可以参考<strong>you dont know javascript</strong>的5.1-5.4章节。</p>\n<ul>\n<li>访问对象时候都会触发对象的[[GET]]操作，如果没有找到属性的话会继续找[[Prototype]]链。</li>\n<li>普通对象的原型链顶端都是<code>Object.prototype</code></li>\n<li><code>new</code>调用函数时只会关系到对象，而不会复制</li>\n</ul>",
htmlExcerpt:"<h1>类理论</h1>\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code>Vehicle</code>类，<code>Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code>Car</code>时，只要声明它继承或者拓展<code>Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code>Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\n<p>javascript中也有类中的<code>new</code>和<code>instanceof</code>，还有ES6中的<code>class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\n<h2>js中实现类复制(混入)</h2>\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\n"}},{node:{frontmatter:{title:"深入学习javascript - this",date:"2017-06-27",category:null,tags:null,path:"/post/js-this"},excerpt:"\n# 关于this\n\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\n\n# this的指向\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\n```javascript\nfunction baz() {\n  // 当前调用栈是 baz\n  // 当前调用位置是全局作用域\n\n  console.log('baz');\n  bar(); // bar的调用位置\n}\n\nfunction bar() {\n  // 当前的调用栈是 baz -> bar\n  // 当前的调用位置是baz\n\n  console.log('bar');\n  foo();\n}\n\nfunction foo() {\n  // 当前的调用栈是 baz -> bar -> foo\n  // 当前的调用位置是bar\n\n  console.log('foo');\n}\n\nbaz();\n```\n\n",headings:[{depth:1,value:"关于this"},{depth:1,value:"this的指向"},{depth:1,value:"绑定规则"},{depth:2,value:"默认绑定"},{depth:2,value:"隐式绑定"},{depth:3,value:"隐式丢失"},{depth:2,value:"显式绑定"},{depth:2,value:"硬绑定"},{depth:2,value:"new绑定"},{depth:1,value:"绑定优先级"},{depth:1,value:"绑定例外"},{depth:2,value:"被忽略的this"},{depth:2,value:"间接引用"},{depth:2,value:"软绑定"},{depth:1,value:"箭头函数"}],html:'<h1>关于this</h1>\n<p><code>this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code>this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\n<h1>this的指向</h1>\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\n<pre><code class="language-javascript">function baz() {\n  // 当前调用栈是 baz\n  // 当前调用位置是全局作用域\n\n  console.log(\'baz\');\n  bar(); // bar的调用位置\n}\n\nfunction bar() {\n  // 当前的调用栈是 baz -> bar\n  // 当前的调用位置是baz\n\n  console.log(\'bar\');\n  foo();\n}\n\nfunction foo() {\n  // 当前的调用栈是 baz -> bar -> foo\n  // 当前的调用位置是bar\n\n  console.log(\'foo\');\n}\n\nbaz();\n</code></pre>\n<!-- more -->\n<h1>绑定规则</h1>\n<p>除了像上面分析代码，还有一个最简单的方式就是分析调用工具。找到调用位置后，就能根据下面的4条规则来判断this如何绑定。</p>\n<h2>默认绑定</h2>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar a = 2;\n\nfoo(); // 2\n</code></pre>\n<p>从上面代码可以知道，<code>foo</code>的调用位置在全局中，不带任何修饰地调用，因此只能使用<strong>默认绑定</strong>。</p>\n<p>在这里要注意一个细节，如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定。</p>\n<h2>隐式绑定</h2>\n<pre><code class="language-javascript">function  foo() {\n  console.log(this.a);\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n}\n\nobj.foo(); // 2\n</code></pre>\n<p>从上代码可以看出<code>obj</code>，调用位置会使用<code>obj</code>上下文来引用函数，因此，可以说函数被调用时候<code>obj</code>对象“包含”它。当函数引用有上下文对象时，<strong>隐式绑定</strong> 规则会把函数引用调用中的<code>this</code>绑定到这个对象中。所以<code>this.a</code>与<code>obj.a</code>在此时是一样的。</p>\n<p>对象属性应用链中只有最顶层或者说最后一层会影响调用位置。如下:</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar obj2 = {\n  a: 42,\n  foo: foo\n}\n\nvar obj1 = {\n  a: 2,\n  obj2: obj2\n}\n\nobj1.obj2.foo(); // 42\n</code></pre>\n<h3>隐式丢失</h3>\n<p><strong>隐式丢失</strong> 就是隐式绑定的函数丢失绑定对象，然后应用<strong>默认绑定</strong>，从而把<code>this</code>绑定到全局对象或者<code>undefined</code>中，取决于是否严格模式。</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n}\n\nvar bar = obj.foo; // 函数别名\n\nvar a = \'oops, global\';\n\nbar(); // opps, global\n</code></pre>\n<p>或者在传入回调函数的时候：</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nfunction doFoo(fn) {\n  fn();\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n}\n\nvar a = \'oops, global\';\n\ndoFoo(obj.foo); // opps, global\n</code></pre>\n<p>传入函数就是一种隐式赋值，所以结果和上一个例子也是一样的。</p>\n<h2>显式绑定</h2>\n<p>使用<code>call</code>和<code>apply</code>方法对对象进行强制调用函数。</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar obj = {\n  a: 2\n}\n\nfoo.call(obj); // 2\n</code></pre>\n<p><code>call</code>和<code>apply</code>在绑定的机制基本是一样的，就是传参不一样，<code>call</code>为单独的参数，<code>apply</code>为数组。</p>\n<h2>硬绑定</h2>\n<p>硬绑定为显式绑定的一个变种，能够解决丢失绑定的问题，先思考下面代码：</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar obj = {\n  a: 2\n}\n\nvar bar = function() {\n  foo.call(obj);\n}\n\nbar();\nsetTimeout(bar, 100); // 2\n\n// 硬绑定的bar不能再修改它的this\nbar.call(window);\n</code></pre>\n<p>可以创建一个可以重复使用的硬绑定函数：</p>\n<pre><code class="language-javascript">function foo(something) {\n  console.log(this.a, something);\n  return this.a + something;\n}\n\n// 辅助绑定函数\nfunction bind(fn, obj) {\n  return function() {\n    return fn.apply(obj, arguments);\n  }\n}\n\nvar obj = {\n  a: 2\n};\n\nvar bar = bind(foo, obj);\n\nvar b = bar(3); // 2 3\nconsole.log(b); // 5\n</code></pre>\n<p>其实在ES5中已经提供了原生的<code>Fucntion.prototype.bind</code>的方法，可以直接使用：</p>\n<pre><code class="language-javascript">function foo(something) {\n  console.log(this.a, something);\n  return this.a + something;\n}\n\nvar obj = {\n  a: 2\n}\n\nvar bar = foo.bind(obj);\n\nvar b = bar(3);\nconsole.log(b);\n</code></pre>\n<h2>new绑定</h2>\n<p>JavaScript中的new并不想其他oo语言那样会实例化一个类，只是使用new操作符调用普通的函数，在这个调用也会对this进行绑定。\n使用new调用函数时，会自动执行下面操作：</p>\n<ol>\n<li>创建（或者说构造）一个全新的对象。</li>\n<li>这个对象会被执行[[原型]]连接。</li>\n<li>这个新对象会绑定到函数调用的this。</li>\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\n</ol>\n<p>看下面代码：</p>\n<pre><code class="language-javascript">function foo(a) {\n  this.a = a;\n}\n\nvar bar = new foo(2);\n\nconsole.log(bar.a);\n</code></pre>\n<p>像这样普通的new调用<code>foo(...)</code>时，会构造一个新的对象并把它绑定到<code>foo(..)</code>调用中的this上。这个就称为new绑定。</p>\n<h1>绑定优先级</h1>\n<p>绑定优先级按照下面的顺序来判断：</p>\n<ol>\n<li>\n<p>函数是否在new中调用(new绑定)？如果是的话this绑定的是新创建的对象。</p>\n<pre><code class="language-javascript">var bar = new foo();\n</code></pre>\n</li>\n<li>\n<p>函数是否通过call、apply(显示绑定)或者硬绑定调用？如果是的话，this绑定的是指定的对象。</p>\n<pre><code class="language-javascript">var bar = foo.call(obj2);\n</code></pre>\n</li>\n<li>\n<p>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是哪个上下文对象。</p>\n<pre><code class="language-javascript">var bar = obj.foo();\n</code></pre>\n</li>\n<li>\n<p>若果都不是的话，适用默认绑定，严格模式下绑定到<code>undefined</code>，否则就绑到全局对象。</p>\n<pre><code class="language-javascript">var bar = foo();\n</code></pre>\n</li>\n</ol>\n<h1>绑定例外</h1>\n<p>在某些场景下this的绑定用上面的规制是判断不了的，可能认为是其他绑定规则，实际引用的是<a href="#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A">默认绑定</a>规则。</p>\n<h2>被忽略的this</h2>\n<p>如果把<code>null</code>或者<code>undefined</code>作为this的绑定对象传入call、apply或者bind中，这些值在调用时会被忽略，实际应用的是默认规则。</p>\n<pre><code class="language-javascript">function fOO() {\n  console.log(this.a);\n}\n\nvar a = 2;\n\nfoo.call(null); // 2\n</code></pre>\n<p>这种情况虽然并不多见，但是使用apply展开数组或者适用<code>bind(...)</code>进行<a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96">柯里化</a>的时候会用到。</p>\n<pre><code class="language-javascript">function foo(a, b) {\n  console.log(\'a: \' + a + \'b: \' + b);\n}\n\nfoo.apply(null, [2, 3]); // a: 2, b: 3\n\n// 适用bind(..) 进行柯里化\nvar bar = foo.bind(nul, 2);\nbar(3); // a: 2, b: 3\n</code></pre>\n<p><strong>注意：很多时候新建一个空对象<code>var n = Object.creat(null)</code>代替<code>null</code>更为安全。</strong></p>\n<h2>间接引用</h2>\n<p>间接引用上面介绍<a href="#%E9%9A%90%E5%BC%8F%E4%B8%A2%E5%A4%B1">隐式丢失</a>的时候也有举过例子，调用间接引用的函数也会造成绑定例外。</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(this.a);\n}\n\nvar a = 2;\nvar o = { a: 3, foo: foo };\nvar p = { a: 4 };\n\no.foo(); // 3\n(p.foo = o.foo)(); // 2\n</code></pre>\n<h2>软绑定</h2>\n<p>软绑定可以实现硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改this的能力。具体使用方式如下：</p>\n<pre><code class="language-javascript">function foo() {\n  console.log(\'name：\' + this.name);\n}\n\nvar obj = { name: \'obj\' };\nvar obj2 = { name: \'obj2\' };\nvar obj3 = { name: \'obj3\' };\n\n// 稍后实现softBind\nvar fooOBJ = foo.softBind(obj);\n\nfooOBJ(); // name: obj\n\nobj2.foo = foo.softBind(obj);\nobj2.foo(); // name: obj2\n\nfooOBJ.call(obj3); // name: obj3\n\nsetTimeout(obj2.foo, 10); // name: obj 应用了软绑定\n</code></pre>\n<p>可以看到，软绑定的<code>foo()</code>可以手动将this绑定到<code>obj2</code>或者<code>obj3</code>上，但如果应用默认绑定，则会将this绑定到obj中。</p>\n<p><code>softBind</code>的实现方式如下:</p>\n<pre><code class="language-javascript">if(!Function.prototype.softBind) {\n  Function.prototype.softBind = function(obj) {\n    var fn = this;\n    var curried = [].slice.call(arguments, 1);\n    var bound = function() {\n      return fn.apply(!this || this === (window || global) ? obj: this);\n\n      curried.concat.apply(curried, arguments)\n    };\n\n    bound.prototype = Object.create(fn.prototype);\n    return bound;\n  }\n}\n</code></pre>\n<p>这个函数首先检查调用时候的this，如果this绑定到全局或者undefined中，那就把指定的默认对象<code>obj</code>绑定到this，否则不修改this。<strong>ES5中的bind()已经实现此部分功能</strong>。</p>\n<h1>箭头函数</h1>\n<p>前面接受的<a href="#%E7%BB%91%E5%AE%9A%E4%BC%98%E5%85%88%E7%BA%A7">四条规则</a>可以包含所有正常函数。但是ES6中的<strong>箭头函数</strong>则无法使用这些规则。</p>\n<pre><code class="language-javascript">function foo() {\n  return (a) => {\n    // this继承foo\n    console.log(this.a);\n  };\n}\n\nvar obj1 = {\n  a: 2\n};\n\nvar obj2 = {\n  a: 3\n};\n\nvar bar = foo.call(obj1);\nbar.call(obj2); // 2，不是3\n</code></pre>\n<p><code>foo()</code>内部的箭头函数会捕获调用<code>foo()</code>时的this。由于<code>foo()</code>的this绑定到<code>obj1</code>,<code>bar</code>的this也会绑定到<code>obj1</code>，箭头函数的绑定无法被修改。(new也不行)</p>\n<p>在ES6出现之前我们经常写的一种模式与箭头函数是几乎相同的：</p>\n<pre><code class="language-javascript">function foo() {\n    var self = this;\n    setTimeout(function() {\n        console.log(self.a);\n    }, 100);\n}\n\nvar obj = {\n    a: 2\n};\n\nfoo.call(obj); // 2\n</code></pre>\n<p><code>var self = this</code>和箭头函数从本质来说是想取代this的机制，如果代码中大多数使用<code>var self = this;</code>，那么应该完全使用词法作用域或箭头函数，抛弃this风格的代码。相反，如果使用this，则可以上方的绑定机制。</p>',htmlExcerpt:"<h1>关于this</h1>\n<p><code>this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code>this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\n<h1>this的指向</h1>\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\n<pre><code class=\"language-javascript\">function baz() {\n  // 当前调用栈是 baz\n  // 当前调用位置是全局作用域\n\n  console.log('baz');\n  bar(); // bar的调用位置\n}\n\nfunction bar() {\n  // 当前的调用栈是 baz -> bar\n  // 当前的调用位置是baz\n\n  console.log('bar');\n  foo();\n}\n\nfunction foo() {\n  // 当前的调用栈是 baz -> bar -> foo\n  // 当前的调用位置是bar\n\n  console.log('foo');\n}\n\nbaz();\n</code></pre>\n"}}],page:1,pages:3,total:14,limit:5,next:"/blog/2"}}}});
//# sourceMappingURL=path---blog-1-b26cc9ae5c0a1ce9f1a9.js.map
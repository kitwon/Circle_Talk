{"version":3,"sources":["webpack:///path---post-60-fps-web-app-afa478d0b8dca0917dc0.js","webpack:///./.cache/json/post-60-fps-web-app.json"],"names":["webpackJsonp","243","module","exports","data","markdownRemark","html","headings","depth","value","frontmatter","date","title","category","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,kiNAAk+KC,WAA4mCC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,gBAAkCD,MAAA,EAAAC,MAAA,mBAAqCD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,wBAA0CD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,sBAAwCD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,mBAAqCD,MAAA,EAAAC,MAAA,sBAAwCD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,UAA0BC,aAAiBC,KAAA,qBAAAC,MAAA,kBAAAC,UAAA,SAA0EC","file":"path---post-60-fps-web-app-afa478d0b8dca0917dc0.js","sourcesContent":["webpackJsonp([112308100922555],{\n\n/***/ 243:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n<!-- more -->\\n<h2>pixel pipeline</h2>\\n<p>影响浏览器渲染有很多因素，但是下面这5个关键的地方是我们可以控制的，也是像素至屏幕管道中关键的地方。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>Javascript。 js中的动画效果和一些dom操作。</li>\\n<li>样式计算(style)。 css匹配器的计算过程。例如<code>.nav__item > .slot</code>。</li>\\n<li>布局(layout)。dom元素应用了规则之后，浏览器就会对其进行大小及位置的计算，这时候就会触发布局，而布局由于改变dom大小及位置，所以对其他元素也会造成影响。</li>\\n<li>绘制(paint)。绘制就是填充像素的过程。大部分像素相关如文字、图片、阴影等都会触发绘制。绘制一般在层(layer)上面完成。</li>\\n<li>合成。层的概念一般都出现在设计上面，但是浏览器中也有层的概念，所以有时候我们一些错误的操作或者属性都会使层的渲染顺序出现错误。</li>\\n</ul>\\n<h1>关键渲染行为</h1>\\n<p>从服务器返回一个html开始，可以分为以下几步(这里英文的过程分别对应开发工具中<strong>performance</strong>面板的表示</p>\\n<ol>\\n<li>解析html，生成dom树，这里显示为<strong>Parser Html</strong></li>\\n<li>然后根据页面的样式，将dom和css进行结合，此过程为<strong>Recalculate Style</strong></li>\\n<li>最后就生成渲染树，<code>display: none</code>或<code>:after</code>等伪元素都不会出现在渲染树上</li>\\n<li>浏览器知道哪个css规则应用哪个dom元素后，就开始计算布局(计算元素占用多少空间，出现在什么位置)，此过程是<strong>layout</strong></li>\\n<li>确定位置后浏览器就开始对dom的样式及内容进行渲染，称为<strong>paint</strong></li>\\n<li>dom渲染的时候，可能还会有图片资源，浏览器这时候就会将这些内容解码成内存，称为<strong>Image Decode + Resize</strong></li>\\n<li><strong>paint</strong>开始的操作都是在同一个层面中执行，但其实浏览器还会创建多个图层，并且对这些图层进行单独的绘制，这个过程称为<strong>Composite Layers</strong></li>\\n<li>这些操作在CPU中进行，执行完后上传到GPU中，最后显示到屏幕上</li>\\n</ol>\\n<h2>触发layout、paint的关键操作</h2>\\n<p>我们知道一帧中就包含了上面的操作，但并不是所有改变网页外观操作都会触发上面的行为。回到<strong>pipeline</strong>，看看什么操作会分别触发什么行为。(下面会用数字代表对应图片上的位置)\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>第一种，通过css或者js进行了外观的更改(1)，这时浏览器就要重新计算元素的样式(2)，如果还更改了布局属性，元素的大小改变，必定会影响其他元素的位置，这时就要重新布局(3)，然后受影响的区域就需要重新绘制(4)，最后将所有东西合成在一起(5)。</li>\\n<li>第二种，仅改变绘制属性(1)，例如背景、文字颜色、阴影等(2)，由于这些操作没有改变布局，所以会跳过(3)，直接进行(4)(5)的操作。</li>\\n<li>第三种，通过改变样式(1)(2)，但是样式并没有对(3)(4)进行改动，所以会直接执行(5)的操作，例如<code>cursor: pointer</code>等属性。</li>\\n</ul>\\n<h1>优化程序</h1>\\n<p>通过上面的介绍，我们知道影响帧数的主要是上面的几个渲染行为，但是要怎么知道是什么更改操作使帧数下降，就需要<strong>develop tool</strong>的帮助。</p>\\n<h2>performance panel</h2>\\n<p>性能分析面板是chrome中开发者工具自带的一个功能，我们能在上面看到录制实践中，<strong>pipeline</strong>的具体运行情况。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/performance.jpg\\\" alt=\\\"performance panel\\\"></p>\\n<ol>\\n<li>在(1)<strong>overview</strong>中，我们可以看到程序中大概的性能状况，fps、cpu、网络使用情况，还有对应的截图。一般情况，看到<strong>cpu</strong>部分一大片一大片的颜色就证明你的程序需要优化了。</li>\\n<li>(2)中的<strong>main</strong>部分，可以看到主进程中的活动，所有时间点执行的操作及渲染行为都能在这个部分找到，主要的性能分析也是围绕这里展开，一半看到<strong>飙红</strong>的地方就证明那里是要下手的地方。</li>\\n<li>(3)中则是对某个浏览器行为进行统计分析，能看到详细调用树和渲染层，找代码和<strong>layer tree</strong>都是(3)中。</li>\\n</ol>\\n<p>由于网上教程大部分的教程都用较低的版本，所以很多教程中的面板都找不到，比如<strong>painter</strong>就需要开启<strong>advance paint insturmentation</strong>，所以教程中找不到就需要google一下或者看下<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/\\\">goole的官方教程</a>。具体的使用方法就不赘述，反正看见<strong>飙红就是要优化了</strong>。</p>\\n<p>有工具之后，就可以针对具体的东西进行优化了，根据<strong>pipeline</strong>，我们其实可以知道优化点是哪几个了，javascript, style &#x26; layout, paint &#x26; composite。下面一个个分析下优化点。</p>\\n<h2>javascript</h2>\\n<p>由于javascript在<strong>pipeline</strong>中，所以在渲染过程中执行javascript代码必定会造成卡顿，俗称的帧丢失。在渲染过程中需要执行js代码的操作最常见的例子就是<strong>用js去操作动画</strong>，还有<strong>在浏览过程中做一些数据拉取及组装数据的操作</strong>。所以针对这些问题，我们需要使用一些新的api去改进我们的app。</p>\\n<p><strong>1.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">requestAnimationFrame</a>代替setTimeout和setInterval去执行动画。</strong>\\n一开始我们就说到帧数的概念，一个app想要不卡顿，必须达到60fps每秒的速度才能保证，减去浏览器自己的行为，每帧留给javascript执行的时间大概剩下10ms左右。或许不断调用setTimeout或者setIntervarl可以自定义函数执行时间，但是由于javascript是单线程，活着其他堆在栈中的代码会突然插入，导致函数执行中断。这时候raf就能解决这个问题了。具体使用方法可以自行查看<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">文档</a>。</p>\\n<p><strong>2.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\\\">web worker</a>去进行一些多线程的操作。</strong>\\n使用web worker后，浏览器会另起一个线程，所以就不会妨碍主线程中的pipeline了。我们可以在一些加载列表的场景中使用，比如用户在浏览，但是你想用这些时间去load一些数据回来，然后渲染页面，这时候worker会执行ajax，也不会妨碍到主线程执行。</p>\\n<h2>style &#x26; layout</h2>\\n<p>样式和布局也是帧里面的一部分，复杂的选择器或者某些js操作触发了强制布局，都会使性能下降，下面可以用这几个方法避免这些问题。\\n<strong>1.操作数量多的dom时，减少选择器的复杂度。</strong>\\n通常做项目的时候，我们一般都是操作少数的dom，但是某些特殊情况下可能要操作上千个dom(当然这不太现实)，这时候保持选择器的简洁就相当重要了，一个多级选择器计算时间足以超出10ms，所以，保持css中选择器的简洁是十分重要的。</p>\\n<p><strong>2.避免布局反复FSL</strong>\\n什么是布局反复，一帧的流程应该是按照<strong>pipeline</strong>的执行顺序去执行的，但是某些错误的javascript读写操作就很容易造成布局反复，如下代码</p>\\n<pre><code class=\\\"language-javascript\\\">var elms = document.getElementByTagName('p')\\nvar block = ducoment.getElementById('block')\\n\\nfor (let i = 0; i &#x3C; elms.length; i++) {\\n  var height = block.offsetHeight\\n  elms[i].style.height = height\\n}\\n</code></pre>\\n<p>在这段代码中，由于属性的读取操作<code>offsetHeight</code>会触发layout布局，然后下面设置高度的属性会触发style修改样式，两个在一个循环中就会造成布局反复，从而造成性能的损失。在<strong>performance panel</strong>中，缩小范围，如果看见layout中有红色的小三角，那么就是触发了FSL了，点进详情就能看到代码运行的地方在哪里了。</p>\\n<h2>paint &#x26; composite</h2>\\n<p>绘制和合成是一个相对比较复杂的流程，大多数样式更改都会触发这个过程，但是如果是大批量的元素或者一个复杂的动画绘制，在主线程中必定会造成性能问题。在这里就引入图层这个概念，由于浏览器的呈现器不在主线程中，所以图层会单独绘制，然后再和树进行合成。但如果层多的话，合成时间也会加长，所以使用层和限制层的数量也是需要注意的问题。</p>\\n<h3>怎么看到网页的分层</h3>\\n<p>具体看<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler\\\">教程</a>\\n进去搜<strong>View paint profiler</strong></p>\\n<ol>\\n<li>Enable advanced paint instrumentation.(这个选项在上图面板一，点击右上角的小齿轮)</li>\\n<li>Select a Paint event in the Main section.(教程里面看图)</li>\\n</ol>\\n<h3>怎么生成层</h3>\\n<ol>\\n<li>社区中比较常见的<code>transform: translate3d(0, 0, 0)</code>、<code>transform: translateZ(0)</code>。虽然会有一些性能的浪费，但是好像是现在比较好的解决方法了。</li>\\n<li>使用css新属性<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\\\"><code>will-change: transform</code></a>，浏览器支持度一般般。</li>\\n</ol>\\n<p>能够看完整篇的同学估计耐性都不错。通过一些基本的介绍，基本可以了解怎么查看和修复app的渲染性能问题了，不过使用现代的开发框架如<strong>react</strong>、<strong>vue</strong>、<strong>angular</strong>都很少会出现<strong>FSL</strong>的问题了，因为很大部分的<strong>layout</strong>动作都直接被<code>rerender</code>，但是一些比较旧的用dom操作些的APP或多或少都会出现上面的问题。大家可以看看自己的APP有没有达到要求。不说了，我去改代码了。</p>\",\"headings\":[{\"depth\":1,\"value\":\"几个重要概念\"},{\"depth\":2,\"value\":\"60fps与设备刷新率\"},{\"depth\":2,\"value\":\"pixel pipeline\"},{\"depth\":1,\"value\":\"关键渲染行为\"},{\"depth\":2,\"value\":\"触发layout、paint的关键操作\"},{\"depth\":1,\"value\":\"优化程序\"},{\"depth\":2,\"value\":\"performance panel\"},{\"depth\":2,\"value\":\"javascript\"},{\"depth\":2,\"value\":\"style & layout\"},{\"depth\":2,\"value\":\"paint & composite\"},{\"depth\":3,\"value\":\"怎么看到网页的分层\"},{\"depth\":3,\"value\":\"怎么生成层\"}],\"frontmatter\":{\"date\":\"September 13, 2017\",\"title\":\"构建60fps-web-app\",\"category\":[\"前端\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---post-60-fps-web-app-afa478d0b8dca0917dc0.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n<!-- more -->\\n<h2>pixel pipeline</h2>\\n<p>影响浏览器渲染有很多因素，但是下面这5个关键的地方是我们可以控制的，也是像素至屏幕管道中关键的地方。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>Javascript。 js中的动画效果和一些dom操作。</li>\\n<li>样式计算(style)。 css匹配器的计算过程。例如<code>.nav__item > .slot</code>。</li>\\n<li>布局(layout)。dom元素应用了规则之后，浏览器就会对其进行大小及位置的计算，这时候就会触发布局，而布局由于改变dom大小及位置，所以对其他元素也会造成影响。</li>\\n<li>绘制(paint)。绘制就是填充像素的过程。大部分像素相关如文字、图片、阴影等都会触发绘制。绘制一般在层(layer)上面完成。</li>\\n<li>合成。层的概念一般都出现在设计上面，但是浏览器中也有层的概念，所以有时候我们一些错误的操作或者属性都会使层的渲染顺序出现错误。</li>\\n</ul>\\n<h1>关键渲染行为</h1>\\n<p>从服务器返回一个html开始，可以分为以下几步(这里英文的过程分别对应开发工具中<strong>performance</strong>面板的表示</p>\\n<ol>\\n<li>解析html，生成dom树，这里显示为<strong>Parser Html</strong></li>\\n<li>然后根据页面的样式，将dom和css进行结合，此过程为<strong>Recalculate Style</strong></li>\\n<li>最后就生成渲染树，<code>display: none</code>或<code>:after</code>等伪元素都不会出现在渲染树上</li>\\n<li>浏览器知道哪个css规则应用哪个dom元素后，就开始计算布局(计算元素占用多少空间，出现在什么位置)，此过程是<strong>layout</strong></li>\\n<li>确定位置后浏览器就开始对dom的样式及内容进行渲染，称为<strong>paint</strong></li>\\n<li>dom渲染的时候，可能还会有图片资源，浏览器这时候就会将这些内容解码成内存，称为<strong>Image Decode + Resize</strong></li>\\n<li><strong>paint</strong>开始的操作都是在同一个层面中执行，但其实浏览器还会创建多个图层，并且对这些图层进行单独的绘制，这个过程称为<strong>Composite Layers</strong></li>\\n<li>这些操作在CPU中进行，执行完后上传到GPU中，最后显示到屏幕上</li>\\n</ol>\\n<h2>触发layout、paint的关键操作</h2>\\n<p>我们知道一帧中就包含了上面的操作，但并不是所有改变网页外观操作都会触发上面的行为。回到<strong>pipeline</strong>，看看什么操作会分别触发什么行为。(下面会用数字代表对应图片上的位置)\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>第一种，通过css或者js进行了外观的更改(1)，这时浏览器就要重新计算元素的样式(2)，如果还更改了布局属性，元素的大小改变，必定会影响其他元素的位置，这时就要重新布局(3)，然后受影响的区域就需要重新绘制(4)，最后将所有东西合成在一起(5)。</li>\\n<li>第二种，仅改变绘制属性(1)，例如背景、文字颜色、阴影等(2)，由于这些操作没有改变布局，所以会跳过(3)，直接进行(4)(5)的操作。</li>\\n<li>第三种，通过改变样式(1)(2)，但是样式并没有对(3)(4)进行改动，所以会直接执行(5)的操作，例如<code>cursor: pointer</code>等属性。</li>\\n</ul>\\n<h1>优化程序</h1>\\n<p>通过上面的介绍，我们知道影响帧数的主要是上面的几个渲染行为，但是要怎么知道是什么更改操作使帧数下降，就需要<strong>develop tool</strong>的帮助。</p>\\n<h2>performance panel</h2>\\n<p>性能分析面板是chrome中开发者工具自带的一个功能，我们能在上面看到录制实践中，<strong>pipeline</strong>的具体运行情况。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/performance.jpg\\\" alt=\\\"performance panel\\\"></p>\\n<ol>\\n<li>在(1)<strong>overview</strong>中，我们可以看到程序中大概的性能状况，fps、cpu、网络使用情况，还有对应的截图。一般情况，看到<strong>cpu</strong>部分一大片一大片的颜色就证明你的程序需要优化了。</li>\\n<li>(2)中的<strong>main</strong>部分，可以看到主进程中的活动，所有时间点执行的操作及渲染行为都能在这个部分找到，主要的性能分析也是围绕这里展开，一半看到<strong>飙红</strong>的地方就证明那里是要下手的地方。</li>\\n<li>(3)中则是对某个浏览器行为进行统计分析，能看到详细调用树和渲染层，找代码和<strong>layer tree</strong>都是(3)中。</li>\\n</ol>\\n<p>由于网上教程大部分的教程都用较低的版本，所以很多教程中的面板都找不到，比如<strong>painter</strong>就需要开启<strong>advance paint insturmentation</strong>，所以教程中找不到就需要google一下或者看下<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/\\\">goole的官方教程</a>。具体的使用方法就不赘述，反正看见<strong>飙红就是要优化了</strong>。</p>\\n<p>有工具之后，就可以针对具体的东西进行优化了，根据<strong>pipeline</strong>，我们其实可以知道优化点是哪几个了，javascript, style &#x26; layout, paint &#x26; composite。下面一个个分析下优化点。</p>\\n<h2>javascript</h2>\\n<p>由于javascript在<strong>pipeline</strong>中，所以在渲染过程中执行javascript代码必定会造成卡顿，俗称的帧丢失。在渲染过程中需要执行js代码的操作最常见的例子就是<strong>用js去操作动画</strong>，还有<strong>在浏览过程中做一些数据拉取及组装数据的操作</strong>。所以针对这些问题，我们需要使用一些新的api去改进我们的app。</p>\\n<p><strong>1.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">requestAnimationFrame</a>代替setTimeout和setInterval去执行动画。</strong>\\n一开始我们就说到帧数的概念，一个app想要不卡顿，必须达到60fps每秒的速度才能保证，减去浏览器自己的行为，每帧留给javascript执行的时间大概剩下10ms左右。或许不断调用setTimeout或者setIntervarl可以自定义函数执行时间，但是由于javascript是单线程，活着其他堆在栈中的代码会突然插入，导致函数执行中断。这时候raf就能解决这个问题了。具体使用方法可以自行查看<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">文档</a>。</p>\\n<p><strong>2.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\\\">web worker</a>去进行一些多线程的操作。</strong>\\n使用web worker后，浏览器会另起一个线程，所以就不会妨碍主线程中的pipeline了。我们可以在一些加载列表的场景中使用，比如用户在浏览，但是你想用这些时间去load一些数据回来，然后渲染页面，这时候worker会执行ajax，也不会妨碍到主线程执行。</p>\\n<h2>style &#x26; layout</h2>\\n<p>样式和布局也是帧里面的一部分，复杂的选择器或者某些js操作触发了强制布局，都会使性能下降，下面可以用这几个方法避免这些问题。\\n<strong>1.操作数量多的dom时，减少选择器的复杂度。</strong>\\n通常做项目的时候，我们一般都是操作少数的dom，但是某些特殊情况下可能要操作上千个dom(当然这不太现实)，这时候保持选择器的简洁就相当重要了，一个多级选择器计算时间足以超出10ms，所以，保持css中选择器的简洁是十分重要的。</p>\\n<p><strong>2.避免布局反复FSL</strong>\\n什么是布局反复，一帧的流程应该是按照<strong>pipeline</strong>的执行顺序去执行的，但是某些错误的javascript读写操作就很容易造成布局反复，如下代码</p>\\n<pre><code class=\\\"language-javascript\\\">var elms = document.getElementByTagName('p')\\nvar block = ducoment.getElementById('block')\\n\\nfor (let i = 0; i &#x3C; elms.length; i++) {\\n  var height = block.offsetHeight\\n  elms[i].style.height = height\\n}\\n</code></pre>\\n<p>在这段代码中，由于属性的读取操作<code>offsetHeight</code>会触发layout布局，然后下面设置高度的属性会触发style修改样式，两个在一个循环中就会造成布局反复，从而造成性能的损失。在<strong>performance panel</strong>中，缩小范围，如果看见layout中有红色的小三角，那么就是触发了FSL了，点进详情就能看到代码运行的地方在哪里了。</p>\\n<h2>paint &#x26; composite</h2>\\n<p>绘制和合成是一个相对比较复杂的流程，大多数样式更改都会触发这个过程，但是如果是大批量的元素或者一个复杂的动画绘制，在主线程中必定会造成性能问题。在这里就引入图层这个概念，由于浏览器的呈现器不在主线程中，所以图层会单独绘制，然后再和树进行合成。但如果层多的话，合成时间也会加长，所以使用层和限制层的数量也是需要注意的问题。</p>\\n<h3>怎么看到网页的分层</h3>\\n<p>具体看<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler\\\">教程</a>\\n进去搜<strong>View paint profiler</strong></p>\\n<ol>\\n<li>Enable advanced paint instrumentation.(这个选项在上图面板一，点击右上角的小齿轮)</li>\\n<li>Select a Paint event in the Main section.(教程里面看图)</li>\\n</ol>\\n<h3>怎么生成层</h3>\\n<ol>\\n<li>社区中比较常见的<code>transform: translate3d(0, 0, 0)</code>、<code>transform: translateZ(0)</code>。虽然会有一些性能的浪费，但是好像是现在比较好的解决方法了。</li>\\n<li>使用css新属性<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\\\"><code>will-change: transform</code></a>，浏览器支持度一般般。</li>\\n</ol>\\n<p>能够看完整篇的同学估计耐性都不错。通过一些基本的介绍，基本可以了解怎么查看和修复app的渲染性能问题了，不过使用现代的开发框架如<strong>react</strong>、<strong>vue</strong>、<strong>angular</strong>都很少会出现<strong>FSL</strong>的问题了，因为很大部分的<strong>layout</strong>动作都直接被<code>rerender</code>，但是一些比较旧的用dom操作些的APP或多或少都会出现上面的问题。大家可以看看自己的APP有没有达到要求。不说了，我去改代码了。</p>\",\"headings\":[{\"depth\":1,\"value\":\"几个重要概念\"},{\"depth\":2,\"value\":\"60fps与设备刷新率\"},{\"depth\":2,\"value\":\"pixel pipeline\"},{\"depth\":1,\"value\":\"关键渲染行为\"},{\"depth\":2,\"value\":\"触发layout、paint的关键操作\"},{\"depth\":1,\"value\":\"优化程序\"},{\"depth\":2,\"value\":\"performance panel\"},{\"depth\":2,\"value\":\"javascript\"},{\"depth\":2,\"value\":\"style & layout\"},{\"depth\":2,\"value\":\"paint & composite\"},{\"depth\":3,\"value\":\"怎么看到网页的分层\"},{\"depth\":3,\"value\":\"怎么生成层\"}],\"frontmatter\":{\"date\":\"September 13, 2017\",\"title\":\"构建60fps-web-app\",\"category\":[\"前端\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/post-60-fps-web-app.json\n// module id = 243\n// module chunks = 112308100922555"],"sourceRoot":""}
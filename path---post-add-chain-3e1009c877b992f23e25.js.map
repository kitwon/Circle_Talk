{"version":3,"sources":["webpack:///path---post-add-chain-3e1009c877b992f23e25.js","webpack:///./.cache/json/post-add-chain.json"],"names":["webpackJsonp","293","module","exports","data","markdownRemark","html","frontmatter","date","path","title","headings","depth","value","pathContext","prev","category","tags","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qyKAA8wHC,aAAyxDC,KAAA,eAAAC,KAAA,kBAAAC,MAAA,oBAA0EC,WAAcC,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,WAA4BC,aAAgBC,MAAQL,MAAA,sBAAAF,KAAA,aAAAQ,SAAA,KAAAC,KAAA,KAAAR,KAAA,kBAAsGS,MAASR,MAAA,eAAAF,KAAA,aAAAQ,UAAA,MAAAC,MAAA,cAAAR,KAAA","file":"path---post-add-chain-3e1009c877b992f23e25.js","sourcesContent":["webpackJsonp([119512962285483],{\n\n/***/ 293:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>实现方法</h1>\\n<p>这样写是可以实现调用方式，但是怎么<code class=\\\"language-text\\\">return x</code>呢，回来想还是一脸懵逼，于是上网找了点其他人的实现方式，发现他们是重写了<code class=\\\"language-text\\\">object</code>的<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>的方法。然后再跑了一遍。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">toString</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// chrome  function 6</span>\\n<span class=\\\"token comment\\\">// firefox function add/fn</span>\\n<span class=\\\"token comment\\\">// node    { [Number: 6] toString: [Function], valueOf: [Function] }</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 6</span>\\n</code></pre>\\n      </div>\\n<p>由此看出在不同客户端下返回的结果并不一样，并不是完美的结果，但是查阅了其他资料并没有其他十分好的解决办法，估计这道题的考查点是关于js深度的，比如原生对象里面的基本方法和<code class=\\\"language-text\\\">alert</code>, <code class=\\\"language-text\\\">console</code>会自动执行toString等方法。</p>\\n<p>另外，<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>方法其实是差不多的，返回的结果基本都是相同的，但是试了一下定义了两个不同的方法，发现总是会返回valueOf的值先，所以觉得toString应该是应用于valueOf的结果。</p>\",\"frontmatter\":{\"date\":\"May 28, 2017\",\"path\":\"/post/add-chain\",\"title\":\"js实现add(1)(2)(3)\"},\"headings\":[{\"depth\":1,\"value\":\"题目\"},{\"depth\":1,\"value\":\"实现方法\"}]}},\"pathContext\":{\"prev\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"tags\":null,\"path\":\"/post/js-scope\"},\"next\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"tags\":[\"javascript\"],\"path\":\"/post/js-promise\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---post-add-chain-3e1009c877b992f23e25.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>实现方法</h1>\\n<p>这样写是可以实现调用方式，但是怎么<code class=\\\"language-text\\\">return x</code>呢，回来想还是一脸懵逼，于是上网找了点其他人的实现方式，发现他们是重写了<code class=\\\"language-text\\\">object</code>的<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>的方法。然后再跑了一遍。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">toString</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// chrome  function 6</span>\\n<span class=\\\"token comment\\\">// firefox function add/fn</span>\\n<span class=\\\"token comment\\\">// node    { [Number: 6] toString: [Function], valueOf: [Function] }</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 6</span>\\n</code></pre>\\n      </div>\\n<p>由此看出在不同客户端下返回的结果并不一样，并不是完美的结果，但是查阅了其他资料并没有其他十分好的解决办法，估计这道题的考查点是关于js深度的，比如原生对象里面的基本方法和<code class=\\\"language-text\\\">alert</code>, <code class=\\\"language-text\\\">console</code>会自动执行toString等方法。</p>\\n<p>另外，<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>方法其实是差不多的，返回的结果基本都是相同的，但是试了一下定义了两个不同的方法，发现总是会返回valueOf的值先，所以觉得toString应该是应用于valueOf的结果。</p>\",\"frontmatter\":{\"date\":\"May 28, 2017\",\"path\":\"/post/add-chain\",\"title\":\"js实现add(1)(2)(3)\"},\"headings\":[{\"depth\":1,\"value\":\"题目\"},{\"depth\":1,\"value\":\"实现方法\"}]}},\"pathContext\":{\"prev\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"tags\":null,\"path\":\"/post/js-scope\"},\"next\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"tags\":[\"javascript\"],\"path\":\"/post/js-promise\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/post-add-chain.json\n// module id = 293\n// module chunks = 119512962285483"],"sourceRoot":""}
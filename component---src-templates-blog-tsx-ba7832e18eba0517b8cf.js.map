{"version":3,"sources":["webpack:///./src/components/post/post-item.tsx","webpack:///./src/components/post/post-list.tsx","webpack:///./src/templates/blog.tsx"],"names":["Wrapper","styled","div","Header","p","InfoWrap","InfoItem","PostItem","postData","data","frontmatter","href","path","title","className","date","category","dangerouslySetInnerHTML","__html","excerpt","PostList","postEdges","map","item","node","key","Row","LeftBar","RightContent","PageQuery","Index","pageContext","numPages","currentPage","edges","allMarkdownRemark","len","SideNav","UserPanel","Pagination","pageName","TopBtn","Footer"],"mappings":"sLAGMA,EAAUC,IAAOC,IAAV,qEAAGD,CAAH,6PA0BPE,EAASF,IAAOG,EAAV,oEAAGH,CAAH,gEAONI,EAAWJ,IAAOC,IAAV,sEAAGD,CAAH,kGAYRK,EAAWL,IAAOC,IAAV,sEAAGD,CAAH,kSAoDCM,EArBE,SAAC,GAAyD,IAAvDC,EAAuD,EAAvDA,SACZC,EAAOD,EAASE,YACtB,OACE,kBAACV,EAAD,KACE,kBAACG,EAAD,KAAQ,uBAAGQ,KAAMF,EAAKG,MAAOH,EAAKI,QAElC,kBAACR,EAAD,KACE,kBAACC,EAAD,KACE,uBAAGQ,UAAU,yBACb,qCAAcL,EAAKM,OAErB,kBAACT,EAAD,KACE,uBAAGQ,UAAU,4BACb,qCAAcL,EAAKO,WAErB,yBAAKF,UAAU,UAAUG,wBAAyB,CAAEC,OAAQV,EAASW,cC/E9DC,EARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACf,6BACGA,EAAUC,KAAI,SAACC,GAAD,OACb,kBAAC,EAAD,CAAMf,SAAUe,EAAKC,KAAMC,IAAKF,EAAKC,KAAKd,YAAYE,Y,4DCK5D,IAAMc,EAAMzB,IAAOC,IAAV,+DAAGD,CAAH,kCAKH0B,EAAU1B,IAAOC,IAAV,mEAAGD,CAAH,+FAWP2B,EAAe3B,IAAOC,IAAV,wEAAGD,CAAH,kEA6CL4B,GAFEC,UAhCD,SAAC,GAAmD,IAAjDC,EAAiD,EAAjDA,YAAatB,EAAoC,EAApCA,KAEpBuB,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,YACVC,EAAUzB,EAAK0B,kBAAfD,MACFE,EAAM,CAAEJ,YAEd,OACE,6BACE,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,kBAACU,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWF,IAAKA,EAAKtB,UAAU,gBAGjC,kBAACc,EAAD,KACE,kBAAC,EAAD,CAAUP,UAAWa,GAAS,KAC9B,kBAACK,EAAA,EAAD,eAAYC,SAAS,QAAW,CAAER,WAAUC,oBAKlD,kBAACQ,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,SAQiB","file":"component---src-templates-blog-tsx-ba7832e18eba0517b8cf.js","sourcesContent":["import React, { FunctionComponentElement } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  padding: 40px;\n  color: #5a5f61;\n  line-height: 2;\n  transition: all .3s;\n\n  a {\n    color: inherit;\n  }\n\n  &:hover {\n    box-shadow: 0 0 18px #e9eaeb;\n  }\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    width: 20%;\n    left: 50%;\n    margin-left: -10%;\n    border-bottom: 1px solid #d4d6d7;\n  }\n`\n\nconst Header = styled.p`\n  font-weight: 400;\n  font-size: 26px;\n  text-align: center;\n  margin: 0;\n`\n\nconst InfoWrap = styled.div`\n  margin-top: 5px;\n  /* font-style: 13px; */\n  color: #6b7174;\n  text-align: center;\n\n  .excerpt {\n    text-align: left;\n    margin: 60px 0 50px;\n  }\n`\n\nconst InfoItem = styled.div`\n  position: relative;\n  display: inline-block;\n  padding: 0 10px;\n  vertical-align: middle;\n  font-size: 13px;\n\n  i {\n    position: relative;\n    bottom: -1px;\n    margin-right: 3px;\n    font-size: 16px;\n  }\n\n  &:first-child {\n    &:after {\n      content: \"\";\n      position: absolute;\n      right: 0;\n      top: 50%;\n      margin-top: -.4em;\n      height: 1em;\n      border-right: 1px solid #9ea4a6;\n    }\n  }\n`\n\ninterface Props {\n  postData: any\n}\n\nconst PostItem = ({ postData }: Props): FunctionComponentElement<Props> => {\n  const data = postData.frontmatter\n  return (\n    <Wrapper>\n      <Header><a href={data.path}>{data.title}</a></Header>\n\n      <InfoWrap>\n        <InfoItem>\n          <i className=\"ion-android-calendar\" />\n          <span>{`发表于 ${data.date}`}</span>\n        </InfoItem>\n        <InfoItem>\n          <i className=\"ion-android-folder-open\" />\n          <span>{`发表于 ${data.category}`}</span>\n        </InfoItem>\n        <div className=\"excerpt\" dangerouslySetInnerHTML={{ __html: postData.excerpt }} />\n      </InfoWrap>\n    </Wrapper>\n  )\n}\n\nexport default PostItem\n","import React, { FunctionComponentElement, ReactElement } from 'react'\nimport Item from './post-item'\n\ninterface PropTypes {\n  postEdges: any\n}\n\nconst PostList = ({ postEdges }: PropTypes): FunctionComponentElement<PropTypes> => (\n  <div>\n    {postEdges.map((item: any): ReactElement =>\n      <Item postData={item.node} key={item.node.frontmatter.path} />\n    )}\n  </div>\n)\n\nexport default PostList;\n","import '../styles'\n\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\n\nimport Header from '../layout/header'\nimport Footer from '../layout/Footer'\nimport { Wrapper, Container } from '../layout/container'\nimport SideNav from '../components/SideNav'\nimport UserPanel from '../components/UserPanel'\nimport PostList from '../components/post/post-list'\nimport Pagination from '../components/Pagination'\nimport TopBtn from '../components/TopBtn'\n\nconst Row = styled.div`\n  display: flex;\n  margin: 0 -15px;\n`\n\nconst LeftBar = styled.div`\n  position: relative;\n  flex: 0 0 25%;\n  max-width: 25%;\n  padding: 0 15px;\n\n  .user-panel {\n    margin-top: 20px;\n  }\n`\n\nconst RightContent = styled.div`\n  position: relative;\n  flex: 0 0 75%;\n  max-width: 75%;\n  padding: 0 15px;\n`\ninterface PropTypes {\n  pageContext: any\n  data: any\n}\n\nconst Index = ({ pageContext, data }: PropTypes): ReactElement => {\n  // if (!this.props.pageContext.edgesLen) return null\n  const { numPages, currentPage } = pageContext\n  const { edges } = data.allMarkdownRemark\n  const len = { numPages }\n\n  return (\n    <div>\n      <Header />\n\n      <Wrapper>\n        <Container>\n          <Row>\n            <LeftBar>\n              <SideNav />\n              <UserPanel len={len} className=\"user-panel\" />\n            </LeftBar>\n\n            <RightContent>\n              <PostList postEdges={edges || []} />\n              <Pagination pageName=\"blog\" {...{ numPages, currentPage }} />\n            </RightContent>\n          </Row>\n        </Container>\n\n        <TopBtn />\n        <Footer />\n      </Wrapper>\n    </div>\n  )\n}\n\nexport default Index\n\nexport const PageQuery = graphql`\n  query IndexQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(format: HTML)\n          frontmatter {\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            category\n            path\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}
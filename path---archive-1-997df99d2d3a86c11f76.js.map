{"version":3,"sources":["webpack:///path---archive-1-997df99d2d3a86c11f76.js","webpack:///./.cache/json/archive-1.json"],"names":["webpackJsonp","283","module","exports","data","allMarkdownRemark","edges","node","excerpt","frontmatter","title","date","category","path","pathContext","edgesLen","tagsLen","categoryLen","nodes","tags","headings","depth","value","html","htmlExcerpt","page","pages","total","limit"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,QAAA,0iBAAAC,aAAmkBC,MAAA,6BAAAC,KAAA,aAAAC,UAAA,SAAAC,KAAA,4BAAiHN,MAAQC,QAAA,+kBAAshBC,aAAkFC,MAAA,oBAAAC,KAAA,aAAAC,UAAA,cAAAC,KAAA,+BAAgHN,MAAQC,QAAA,wfAAAC,aAAihBC,MAAA,SAAAC,KAAA,aAAAC,UAAA,MAAAC,KAAA,wBAAsFN,MAAQC,QAAA,wjBAAAC,aAAilBC,MAAA,kBAAAC,KAAA,aAAAC,UAAA,MAAAC,KAAA,0BAAiGN,MAAQC,QAAA,ggBAAAC,aAAyhBC,MAAA,sBAAAC,KAAA,aAAAC,UAAA,QAAAC,KAAA,0BAAuGN,MAAQC,QAAA,qjBAAAC,aAA8kBC,MAAA,mBAAAC,KAAA,aAAAC,SAAA,KAAAC,KAAA,qBAA2FN,MAAQC,QAAA,goBAA+nBC,aAA0BC,MAAA,wBAAAC,KAAA,aAAAC,SAAA,KAAAC,KAAA,oBAA+FN,MAAQC,QAAA,o8BAA27BC,aAAkCC,MAAA,iBAAAC,KAAA,aAAAC,UAAA,QAAAC,KAAA,qBAA6FN,MAAQC,QAAA,0kBAA8jBC,aAAqCC,MAAA,oBAAAC,KAAA,aAAAC,SAAA,KAAAC,KAAA,wBAA+FN,MAAQC,QAAA,iUAAAC,aAA0VC,MAAA,iBAAAC,KAAA,aAAAC,SAAA,KAAAC,KAAA,2BAA+FN,MAAQC,QAAA,6wBAAAC,aAAsyBC,MAAA,sBAAAC,KAAA,aAAAC,SAAA,KAAAC,KAAA,qBAA8FN,MAAQC,QAAA,0NAA4LC,aAAuDC,MAAA,mBAAAC,KAAA,aAAAC,UAAA,cAAAC,KAAA,sBAAsGN,MAAQC,QAAA,6rBAA2rBC,aAA2BC,MAAA,eAAAC,KAAA,aAAAC,UAAA,MAAAC,KAAA,uBAA2FN,MAAQC,QAAA,odAAAC,aAA6eC,MAAA,iBAAAC,KAAA,aAAAC,UAAA,MAAAC,KAAA,sBAA4FN,MAAQC,QAAA,62BAAAC,aAAw4BC,MAAA,mBAAAC,KAAA,aAAAC,UAAA,MAAAC,KAAA,6BAAqGN,MAAQC,QAAA,kRAAAC,aAA2SC,MAAA,kBAAAC,KAAA,aAAAC,UAAA,gBAAAC,KAAA,yBAAyGC,aAAgBC,SAAA,GAAAC,QAAA,GAAAC,YAAA,EAAAC,QAAqDX,MAAQE,aAAeC,MAAA,6BAAAC,KAAA,aAAAC,UAAA,SAAAO,MAAA,cAAAN,KAAA,yBAAmIL,QAAA,0iBAAAY,WAAkkBC,MAAA,EAAAC,MAAA,qBAAuCD,MAAA,EAAAC,MAAA,oBAAsCD,MAAA,EAAAC,MAAA,uBAAyCD,MAAA,EAAAC,MAAA,oBAAsCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAAyBC,KAAA,8oRAA4wQC,YAAA,2mBAAo1CjB,MAAQE,aAAeC,MAAA,oBAAAC,KAAA,aAAAC,UAAA,cAAAO,KAAA,KAAAN,KAAA,4BAAwHL,QAAA,+kBAAuhBY,WAAgFC,MAAA,EAAAC,MAAA,2BAA6CD,MAAA,EAAAC,MAAA,+CAAiED,MAAA,EAAAC,MAAA,4BAA8CD,MAAA,EAAAC,MAAA,8EAAgGD,MAAA,EAAAC,MAAA,0CAA8DD,MAAA,EAAAC,MAAA,4CAA8DD,MAAA,EAAAC,MAAA,+DAAiFD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,2BAA6CD,MAAA,EAAAC,MAAA,4BAA4CC,KAAA,0gJAAq9GC,YAAA,wtBAAw6DjB,MAAQE,aAAeC,MAAA,SAAAC,KAAA,aAAAC,UAAA,MAAAO,MAAA,wBAAAN,KAAA,qBAAkHL,QAAA,wfAAAY,WAAghBC,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA;AAAysIC,YAAA,qhBAAu3DjB,MAAQE,aAAeC,MAAA,kBAAAC,KAAA,aAAAC,UAAA,MAAAO,MAAA,sCAAAN,KAAA,uBAA2IL,QAAA,wjBAAAY,WAAglBC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,gBAAkCD,MAAA,EAAAC,MAAA,mBAAqCD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,wBAA0CD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,sBAAwCD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,mBAAqCD,MAAA,EAAAC,MAAA,sBAAwCD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,UAA0BC,KAAA,glQAA8gOC,YAAA,ypBAAw2DjB,MAAQE,aAAeC,MAAA,sBAAAC,KAAA,aAAAC,UAAA,QAAAO,MAAA,gCAAAN,KAAA,uBAA2IL,QAAA,ggBAAAY,WAAwhBC,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAAyBC,KAAA;AAAwi3BC,YAAA,ylBAA+0DjB,MAAQE,aAAeC,MAAA,mBAAAC,KAAA,aAAAC,SAAA,KAAAO,KAAA,KAAAN,KAAA,kBAAmGL,QAAA,qjBAAAY,WAA6kBC,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA,o2bAAs3aC,YAAA,qvBAAs0DjB,MAAQE,aAAeC,MAAA,wBAAAC,KAAA,aAAAC,SAAA,KAAAO,KAAA,KAAAN,KAAA,iBAAuGL,QAAA,goBAAgoBY,WAAwBC,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,aAA+BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,SAAyBC,KAAA;AAAqs0CC,YAAA,stBAAwyBjB,MAAQE,aAAeC,MAAA,iBAAAC,KAAA,aAAAC,UAAA,QAAAO,MAAA,WAAAN,KAAA,kBAA4GL,QAAA,o8BAA47BY,WAAgCC,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,kBAAoCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,OAAuBC,KAAA,++XAAk1XC,YAAA,8lCAAgtDjB,MAAQE,aAAeC,MAAA,oBAAAC,KAAA,aAAAC,SAAA,KAAAO,KAAA,KAAAN,KAAA,qBAAuGL,QAAA,0kBAA+jBY,WAAmCC,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA;AAAyktBC,YAAA,6wBAAgsCjB,MAAQE,aAAeC,MAAA,iBAAAC,KAAA,aAAAC,SAAA,KAAAO,KAAA,KAAAN,KAAA,wBAAuGL,QAAA,iUAAAY,WAAyVC,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA,u5xBAA4szBC,YAAA,ydAA2rBjB,MAAQE,aAAeC,MAAA,sBAAAC,KAAA,aAAAC,SAAA,KAAAO,KAAA,KAAAN,KAAA,kBAAsGL,QAAA,6wBAAAY,WAAqyBC,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,UAA4BD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,iBAAmCD,MAAA,EAAAC,MAAA,OAAuBC,KAAA;AAAqw0BC,YAAA,k/BAAozCjB,MAAQE,aAAeC,MAAA,mBAAAC,KAAA,aAAAC,UAAA,cAAAO,KAAA,KAAAN,KAAA,mBAA8GL,QAAA,0NAA6LY,WAAqDC,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,SAAyBC,KAAA,qyKAAgxHC,YAAA,iRAA2iEjB,MAAQE,aAAeC,MAAA,eAAAC,KAAA,aAAAC,UAAA,MAAAO,MAAA,cAAAN,KAAA,oBAA6GL,QAAA,6rBAA4rBY,WAAyBC,MAAA,EAAAC,MAAA,kBAAoCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,OAAuBC,KAAA;AAAs5hCC,YAAA,uxBAAm8CjB,MAAQE,aAAeC,MAAA,iBAAAC,KAAA,aAAAC,UAAA,MAAAO,KAAA,KAAAN,KAAA,mBAAoGL,QAAA,odAAAY,WAA4eC,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,eAAiCD,MAAA,EAAAC,MAAA,iBAAqCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA,+5NAAs5MC,YAAA,sgBAAsxCjB,MAAQE,aAAeC,MAAA,mBAAAC,KAAA,aAAAC,UAAA,MAAAO,MAAA,iBAAAN,KAAA,0BAA0HL,QAAA,62BAAAY,WAAu4BC,MAAA,EAAAC,MAAA,kBAAoCD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,YAA8BD,MAAA,EAAAC,MAAA,WAA6BD,MAAA,EAAAC,MAAA,aAA6BC,KAAA;AAA+zlCC,YAAA,q/BAAg6DjB,MAAQE,aAAeC,MAAA,kBAAAC,KAAA,aAAAC,UAAA,gBAAAO,MAAA,0BAAAN,KAAA,oBAAsIL,QAAA,kRAAAY,WAA0SC,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,aAA+BD,MAAA,EAAAC,MAAA,OAAyBD,MAAA,EAAAC,MAAA,cAAgCD,MAAA,EAAAC,MAAA,QAA0BD,MAAA,EAAAC,MAAA,kBAAoCD,MAAA,EAAAC,MAAA,SAA2BD,MAAA,EAAAC,MAAA,OAAuBC,KAAA;AAAo9nDC,YAAA,kSAAgrBC,KAAA,EAAAC,MAAA,EAAAC,MAAA,GAAAC,MAAA","file":"path---archive-1-997df99d2d3a86c11f76.js","sourcesContent":["webpackJsonp([10575460832461],{\n\n/***/ 283:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"\\n作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。\\n\\n# something useful\\n1. 使用`eslint --fix`格式化文件\\n**eslint**虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下`eslint --fix`这个命令就好了，大部分代码都会根据规范格式化掉。\\n\\n\",\"frontmatter\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"path\":\"/post/pre-commit-hook\"}}},{\"node\":{\"excerpt\":\"\\n> 原文译自[10 Tips for Javascript Debugging Like a PRO with Console](https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6) - Yotam Kadishay\\n\\n在日常开发里，我们经常需要使用`console`调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些`console`的高级用法去更好的做调试工作和定位问题。\\n\\n我们都知道`console`的几个常用的方法\\n\\n```javascript\\nconsole.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n```\\n\\n除这些简单的使用外，下面几个`console`的用法希望能帮助你更好的调试你的应用。\\n\\n\",\"frontmatter\":{\"title\":\"10个console的高级使用方法\",\"date\":\"2018-03-19\",\"category\":[\"javascript\"],\"path\":\"/post/10tips-for-console\"}}},{\"node\":{\"excerpt\":\"\\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\\n\\n# 项目构建\\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\\n\\n\",\"frontmatter\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"path\":\"/post/2017-review\"}}},{\"node\":{\"excerpt\":\"\\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\\n\\n----\\n\\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\\n\\n# 几个重要概念\\n## 60fps与设备刷新率\\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\\n\\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\\n\\n\",\"frontmatter\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"path\":\"/post/60fps-web-app\"}}},{\"node\":{\"excerpt\":\"\\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\\n\\n# 配置\\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\\n```bash\\n$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n```\\n\\n\",\"frontmatter\":{\"title\":\"在vue项目中使用jest进行单元测试\",\"date\":\"2017-08-18\",\"category\":[\"前端工具\"],\"path\":\"/post/vue-jest-test\"}}},{\"node\":{\"excerpt\":\"\\n# 类理论\\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\\n\\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\\n\\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\\n\\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\\n\\n## js中实现类复制(混入)\\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"path\":\"/post/js-class\"}}},{\"node\":{\"excerpt\":\"\\n# 关于this\\n\\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\\n\\n# this的指向\\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\\n\\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\\n```javascript\\nfunction baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n```\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript - this\",\"date\":\"2017-06-27\",\"category\":null,\"path\":\"/post/js-this\"}}},{\"node\":{\"excerpt\":\"\\nwebpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。\\n\\n# 从webpack1中迁移\\n官方已经给出了详细的[迁移指南](https://webpack.js.org/guides/migrating/)，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。\\n\\n## 配置文件\\n如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。\\n\\n### `module.loaders`变成`module.rules`\\n旧的`module.loader`被`module.rules`取代，后者允许配置`loader`更多选项，具体查看文档[module.rules](https://webpack.js.org/configuration/module/#module-rules)\\n\\n```javascript\\n// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n```\\n\\n\",\"frontmatter\":{\"title\":\"webpack2新特性&迁移\",\"date\":\"2017-06-24\",\"category\":[\"前端工具\"],\"path\":\"/post/webpack2\"}}},{\"node\":{\"excerpt\":\"\\n# 什么是闭包\\n记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。\\n\\n> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）\\n\\n然后看个例子\\n```javascript\\nfunction foo() {\\n\\tvar a = 2;\\n\\n\\tfuntion bar() {\\n\\t\\tconsole.log(a);\\n\\t}\\n\\n\\tbar();\\n}\\n\\nfoo();\\n```\\n如果按上面第一条的定义，这里一定是生成了闭包，但是**确切的说并不是**，这里最准确的说是`bar`对`a`的引用方式是词法作用域的查找规则，而这些只是**闭包**的一部分。然后再看清晰闭包的例子\\n\\n```javascript\\nfucntion foo() {\\n\\tvar a = 2;\\n\\n\\tfunction bar() {\\n\\t\\tconsole.log(a)\\n\\t}\\n\\n\\treturn bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n```\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript-闭包\",\"date\":\"2017-06-14\",\"category\":null,\"path\":\"/post/js-closures\"}}},{\"node\":{\"excerpt\":\"\\n之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。\\n\\n# 主要需求\\n这个demo中爬虫有3个主要模块，**URL管理器**、**下载器**、**解析器**\\n* URL管理器主要处理爬取的URL的状态。\\n* 下载器会通过**URL管理器**传送过来有效URL进行下载。\\n* 解析器会将**下载器**下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给**URL管理器**进行重复操作。\\n\\n## 入口程序\\n`spider_main`文件为程序入口，处理整个爬虫的运行逻辑\\n\\n\",\"frontmatter\":{\"title\":\"用python写一个简单爬虫\",\"date\":\"2017-06-11\",\"category\":null,\"path\":\"/post/python-crawler\"}}},{\"node\":{\"excerpt\":\"\\n# 前言\\n使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。\\n\\n# 作用域是什么\\nJS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为**作用域**。\\n\\n\\n\\n## 理解作用域执行过程\\n如在`var a = 2`执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。\\n\\n首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在**作用域**中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为**引擎**生成运行时所需的代码，代码用来处理`a = 2`这个赋值操作。引擎运行时会首先询问**作用域**当前作用集合是否有一个`a`的变量。如果是，**引擎**就会使用这个变量；如果不是，引擎会继续查找该变量。如果**引擎**找到`a`变量，就会赋值2。否则，**引擎**会抛出一个异常。\\n\\n**总结**：变量赋值分别有两个动作，**编译器**会在当前**作用域**中声明一个变量（如果之前没有声明过），然后在运行时引擎会在**作用域**中查找该变量，如果能找到就对变量进行赋值。\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"path\":\"/post/js-scope\"}}},{\"node\":{\"excerpt\":\"\\n# 题目\\n之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现\\n\\n```javascript\\nfunction add(x) {\\n\\tvar fn = function(y) {\\n\\t\\treturn add(x + y);\\n\\t}\\n\\n\\treturn fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n```\\n\\n\",\"frontmatter\":{\"title\":\"js实现add(1)(2)(3)\",\"date\":\"2017-05-28\",\"category\":[\"javascript\"],\"path\":\"/post/add-chain\"}}},{\"node\":{\"excerpt\":\"\\n老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，[promise](https://promisesaplus.com/)（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。\\n\\n下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。\\n\\n\\n\\n# 初步构建一个Promise\\n我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现\\n```javascript\\n// 例1\\nfunction getAsyncData() {\\n\\treturn new Promise(function(resolve, reject) {\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tresolve('promise done!')\\n\\t\\t}, 1000)\\n\\t})\\n}\\n\\ngetAsyncData().then(function(result) {\\n\\tconsole.log(result);\\n}).then(function() {\\n\\tconsole.log('done too!');\\n})\\n```\\n\\n\",\"frontmatter\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"path\":\"/post/js-promise\"}}},{\"node\":{\"excerpt\":\"\\n# 什么是单元-测试?\\n- 单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。\\n- 而测试，就是测试啦。\\n\\n所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。\\n\\n# 为什么要写单元测试？\\n单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。\\n\\n\",\"frontmatter\":{\"title\":\"前端单元测试&Mocha指北\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"path\":\"/post/unit-test\"}}},{\"node\":{\"excerpt\":\"\\n> 原文译自[Smashing Magazine](https://www.smashingmagazine.com/) -- [[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)\\n\\n相信很多前端都听说过或者使用过[Gulp](http://www.gulpjs.com.cn/), [Angular CLI](https://cli.angular.io/), [Cordova](https://cordova.apache.org/), [Yeoman](http://yeoman.io/)或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用`ng new <project-name>`后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。\\n\\n在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用[SendGrid Api](https://github.com/sendgrid/sendgrid-nodejs)模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令\\n\\n\",\"frontmatter\":{\"title\":\"使用nodejs写一个命令行程序\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"path\":\"/post/node-command-app\"}}},{\"node\":{\"excerpt\":\"\\n好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。\\n\\n### 小科普\\n什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！\\n\\n\",\"frontmatter\":{\"title\":\"React-todo demo\",\"date\":\"2016-03-02\",\"category\":[\"js framework\"],\"path\":\"/post/react-todo\"}}}]}},\"pathContext\":{\"edgesLen\":16,\"tagsLen\":14,\"categoryLen\":6,\"nodes\":[{\"node\":{\"frontmatter\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"tags\":[\"自动化\",\"前端工具\"],\"path\":\"/post/pre-commit-hook\"},\"excerpt\":\"\\n作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。\\n\\n# something useful\\n1. 使用`eslint --fix`格式化文件\\n**eslint**虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下`eslint --fix`这个命令就好了，大部分代码都会根据规范格式化掉。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"something useful\"},{\"depth\":1,\"value\":\"Pre-commit hook\"},{\"depth\":2,\"value\":\"husky + lint-stage\"},{\"depth\":2,\"value\":\"集成prettier和Jest\"},{\"depth\":1,\"value\":\"Last\"},{\"depth\":2,\"value\":\"相关文档\"}],\"html\":\"<p>作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。</p>\\n<h1>something useful</h1>\\n<ol>\\n<li>使用<code class=\\\"language-text\\\">eslint --fix</code>格式化文件\\n<strong>eslint</strong>虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下<code class=\\\"language-text\\\">eslint --fix</code>这个命令就好了，大部分代码都会根据规范格式化掉。</li>\\n</ol>\\n<!-- more -->\\n<ol start=\\\"2\\\">\\n<li>\\n<p>使用各种编辑器、IDE插件\\n上方方法虽好，但是我们还是要从源头上解决问题，培养每个人的代码风格以及习惯，这时候插件就能帮住我们在写代码的时候及时发现，也不用看到一大片错误了。</p>\\n</li>\\n<li>\\n<p>使用<strong>prettier</strong>格式化代码\\nPrettier可以帮助我们做一些代码格式化的工作，如代码缩进，双引号变单引号等一些代码格式化工作，但是有些配置项与eslint是重复的，下面会介绍到如何解决。具体配置项可以查看<a href=\\\"https://prettier.io/docs/en/install.html\\\">官网文档</a>。</p>\\n</li>\\n</ol>\\n<p>虽然有很多方法提醒我们注意代码质量，但是有时候这并不能阻止我们把有linting error的代码提交到仓库上。有时候没有什么大问题，但是如果是使用YUI压缩或者其他代码检查工具导致发布失败，我们将会需要用大量地时间去找到n个人提交的代码中的1个不显眼的语法错误。</p>\\n<h1>Pre-commit hook</h1>\\n<p>所以，什么是<strong>pre-commit hook</strong>？其实Git给我门提供了很多钩子，比如pre-commit这个，就是提交前，还有提交后，其他钩子可自行查<a href=\\\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\\\">Git - Git 钩子</a>。(SVN暂时无能为力，不过Google中有提供解决方案，但是看过一下实现起来颇麻烦的，大家有兴趣可以自行查找一下)</p>\\n<h2>husky + lint-stage</h2>\\n<p>假设你的项目中已经有了eslint和使用vue，然后我们需要安装两个package</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> husky lint-stage --save-dev\\n\\n<span class=\\\"token comment\\\"># or use yarn</span>\\n$ yarn add husky lint-stage -D\\n</code></pre>\\n      </div>\\n<p><strong>1.</strong>    然后在<code class=\\\"language-text\\\">package.json</code>文件中添加如下配置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>2.</strong>    然后随便找个文件删掉两个缩进空格，然后跑下提交命令<code class=\\\"language-text\\\">git commit -am &#39;test precommit&#39;</code>，此时应该可以看到下图的运行及报错。</p>\\n<p>⚠️ 这里的错误大家可以看到是preiiter抛出的，是因为我的配置文件已经集成了prettier，如何集成下方有介绍。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/pre-commit-hook/lint-error.jpg\\\" alt=\\\"pre-commit-error\\\"></p>\\n<p>如果想使用eslint自动修复错误，可以修改成如下配置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --fix --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"git add\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样修正好的文件就会重新跑一遍add命令，我们只需重按一下⬆️键重新跑一下命令提交即可，perfect。</p>\\n<h2>集成prettier和Jest</h2>\\n<p><strong>1.</strong>    prettier虽然和eslint有很多共同配置，但是prettier还可以对<code class=\\\"language-text\\\">vue template</code>和样式文件做验证和格式化，更多配置方式可以查看<a href=\\\"https://prettier.io/docs/en/index.html\\\">文档</a>，下面只介绍快速集成eslint和prettier的方式。首先我们需要安装<code class=\\\"language-text\\\">eslint-plugin-prettier</code>和<code class=\\\"language-text\\\">eslint-config-prettier</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> eslint-plugin-prettier eslint-config-prettier --save-dev\\n</code></pre>\\n      </div>\\n<p>然后修改我们的<code class=\\\"language-text\\\">.eslintrc.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">\\\"extends\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"plugin:prettier/recommended\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后重新执行上方配置的第二部就可以看到结果了。</p>\\n<p><strong>2.</strong>    集成Jest做unit test。为什么这里也会抽出单独讲呢，理论上我们只需在配置中加段<code class=\\\"language-text\\\">npm run unit</code>就行了，但是运行时候会发现Jest会提升没有找到测试文件的情况。此时我们需要修改我们的npm script，给jest cli添加一个<code class=\\\"language-text\\\">--findRelatedTests</code>的参数。官网对这参数的解释是<strong>Useful for pre-commit hook integration to run the minimal amount of tests necessary.</strong> ，看起来是为pre-commit提供的特殊命令，but why🤷🏼‍</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"unit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config test/jest.conf.js --findRelatedTests\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --fix --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"git add\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"npm run unit\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Last</h1>\\n<p>参照上面几步，便很容易的实现提交前验证，想整合打包等功能也十分简单，只需要在<code class=\\\"language-text\\\">lint-stage</code>中添加<code class=\\\"language-text\\\">npm run *</code>或者集成其他命令。我们也可以看到lint-stage可以通过<code class=\\\"language-text\\\">glob</code>的语法区分文件类型执行对应的script，大家可以自由发挥实现一下自动部署。</p>\\n<h2>相关文档</h2>\\n<ul>\\n<li><a href=\\\"https://prettier.io/docs/en/eslint.html\\\">prettier- Integrating with ESLint</a></li>\\n<li><a href=\\\"https://github.com/typicode/husky/tree/master\\\">Husky</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/lint-staged\\\">lint-stage</a></li>\\n<li><a href=\\\"https://facebook.github.io/jest/docs/en/cli.html#findrelatedtests-spaceseparatedlistofsourcefiles\\\">Jest Cli Options</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。</p>\\n<h1>something useful</h1>\\n<ol>\\n<li>使用<code>eslint --fix</code>格式化文件\\n<strong>eslint</strong>虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下<code>eslint --fix</code>这个命令就好了，大部分代码都会根据规范格式化掉。</li>\\n</ol>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"10个console的高级使用方法\",\"date\":\"2018-03-19\",\"category\":[\"javascript\"],\"tags\":null,\"path\":\"/post/10tips-for-console\"},\"excerpt\":\"\\n> 原文译自[10 Tips for Javascript Debugging Like a PRO with Console](https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6) - Yotam Kadishay\\n\\n在日常开发里，我们经常需要使用`console`调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些`console`的高级用法去更好的做调试工作和定位问题。\\n\\n我们都知道`console`的几个常用的方法\\n\\n```javascript\\nconsole.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n```\\n\\n除这些简单的使用外，下面几个`console`的用法希望能帮助你更好的调试你的应用。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"Tip #1 console.trace()\"},{\"depth\":1,\"value\":\"Tip #2 console.time() && console.timeEnd()\"},{\"depth\":1,\"value\":\"Tip #3 console.memory()\"},{\"depth\":1,\"value\":\"Tip #4 console.profile(‘profileName’) & console.profileEnd(‘profileName’)\"},{\"depth\":1,\"value\":\"Tip #5 console.count(\\\"STUFF I COUNT\\\")\"},{\"depth\":1,\"value\":\"Tip #6 console.assert(false, “Log me!”)\"},{\"depth\":1,\"value\":\"Tip  #7 console.group(‘group’) & console.groupEnd(‘group’)\"},{\"depth\":1,\"value\":\"Tip #8 字符串替换\"},{\"depth\":1,\"value\":\"Tip #9 console.clear()\"},{\"depth\":1,\"value\":\"Tip #10 console.table()\"}],\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code class=\\\"language-text\\\">console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code class=\\\"language-text\\\">console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code class=\\\"language-text\\\">console</code>的几个常用的方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印信息或者数据</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span>‘Something happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 和console log一样</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>‘Something strange happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印警告信息</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>‘Something horrible happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印错误信息</span>\\n</code></pre>\\n      </div>\\n<p>除这些简单的使用外，下面几个<code class=\\\"language-text\\\">console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n<!-- more -->\\n<h1>Tip #1 console.trace()</h1>\\n<p>如果你想知道日志的函数执行位置，使用<code class=\\\"language-text\\\">console.trace()</code>可以打印栈堆跟踪信息。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/trace.png\\\" alt=\\\"trace\\\"></p>\\n<h1>Tip #2 console.time() &#x26;&#x26; console.timeEnd()</h1>\\n<p>如果你想知道某段程序的执行时间，可以使用<code class=\\\"language-text\\\">console.time()</code>和<code class=\\\"language-text\\\">console.timeEnd()</code>打印时间间隔。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/time.png\\\" alt=\\\"time\\\"></p>\\n<h1>Tip #3 console.memory()</h1>\\n<p>如果遇到一个相当棘手的性能问题，或者在寻找一个内存泄露的位置，可以尝试使用<code class=\\\"language-text\\\">console.memory(// property, not a function)</code>查看栈大小信息。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/memory.png\\\" alt=\\\"memory\\\"></p>\\n<h1>Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</h1>\\n<p>这个不是标准里面的方法，但是浏览器支持比较广泛。你可以使用这两个方法让浏览器的性能面板记录start至end的性能数据。使用这两个函数，能够更精准地定位你想要获取的数据。</p>\\n<h1>Tip #5 console.count(\\\"STUFF I COUNT\\\")</h1>\\n<p>在一些经常重复调用的代码中，使用<code class=\\\"language-text\\\">console.count()</code>可以记录该函数的执行次数。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/count.png\\\" alt=\\\"count\\\"></p>\\n<h1>Tip #6 console.assert(false, “Log me!”)</h1>\\n<p>当需要条件判断打印日志时候，可以使用<code class=\\\"language-text\\\">console.assert(condition, msg)</code>代替if-else。当<code class=\\\"language-text\\\">condition</code> 为false的时候就会打印出信息。\\n⚠️在Node.js中使用会抛出断言错误。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/assert.png\\\" alt=\\\"assert\\\"></p>\\n<h1>Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</h1>\\n<p>在一些写很多<code class=\\\"language-text\\\">console.log()</code>的情况下，你可能需要将日志分组。这时候就可以使用<code class=\\\"language-text\\\">console.group(name)</code> 去将日志分组，使用这个函数后，日志就会按层级打印。使用<code class=\\\"language-text\\\">console.groupEnd()</code>就能结束掉当前分组，在同级重新新建一个分组。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/group.png\\\" alt=\\\"group\\\"></p>\\n<h1>Tip #8 字符串替换</h1>\\n<p>使用<code class=\\\"language-text\\\">console</code>的时候可以使用字符串替换去合并变量，引用类型有下面几个<strong>(%s = string, %i = integer, %o = object, %f = float)</strong></p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/substitutions.png\\\" alt=\\\"substitutions\\\"></p>\\n<h1>Tip #9 console.clear()</h1>\\n<p>当代码里面很多<code class=\\\"language-text\\\">console</code>的时候，你可能会需要<code class=\\\"language-text\\\">console.clear()</code>清理一下前面的log</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/clear.png\\\" alt=\\\"clear\\\"></p>\\n<h1>Tip #10 console.table()</h1>\\n<p>好东西留到最后。使用<code class=\\\"language-text\\\">console.table()</code>，可以把对象打印成一个好看的表格。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/table.png\\\" alt=\\\"table\\\"></p>\\n<p>希望这几个能让你平时的调试工作能更高效和有趣。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code>console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code>console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code>console</code>的几个常用的方法</p>\\n<pre><code class=\\\"language-javascript\\\">console.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n</code></pre>\\n<p>除这些简单的使用外，下面几个<code>console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"tags\":[\"work\",\"vue\",\"webpack\"],\"path\":\"/post/2017-review\"},\"excerpt\":\"\\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\\n\\n# 项目构建\\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"项目构建\"},{\"depth\":2,\"value\":\"代码分割\"},{\"depth\":2,\"value\":\"代码风格及限制\"},{\"depth\":1,\"value\":\"开发阶段\"},{\"depth\":2,\"value\":\"组件化\"},{\"depth\":2,\"value\":\"动态接口地址\"},{\"depth\":2,\"value\":\"测试\"},{\"depth\":1,\"value\":\"SSR\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\\n<h1>项目构建</h1>\\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href=\\\"https://github.com/kitwon/vue-mpa\\\">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\\n<!-- more -->\\n<h2>代码分割</h2>\\n<p>SPA一个比较重要的点就是如何做代码分割了。代码分割涉及到几个方面：</p>\\n<ol>\\n<li><a href=\\\"https://router.vuejs.org/zh-cn/advanced/lazy-loading.html\\\">路由分割</a>官方已经有很好的解决方案了。除文档基本说明外，还使用了<a href=\\\"https://doc.webpack-china.org/api/module-methods/#import-\\\"><code class=\\\"language-text\\\">webpackChunkName</code></a>对组件进行模块合并，减少文件请求。</li>\\n<li>一些比较大的库例如<code class=\\\"language-text\\\">momentjs</code>、<code class=\\\"language-text\\\">lodash</code>代码提取。虽然<code class=\\\"language-text\\\">webpack</code>里面提供了<code class=\\\"language-text\\\">commonChunkPlugin</code>，但是这个插件只对入口文件进行分析和代码提取，而组件里面的一些库则使用了<a href=\\\"https://github.com/asfktz/autodll-webpack-plugin\\\">autodll-webpack-plugin</a>，对一些依赖库进行提取和合并操作，并配合<code class=\\\"language-text\\\">html-webpack-plugin</code>配合自动注入，生成页面模板。</li>\\n</ol>\\n<p>另外，引入了<a href=\\\"https://github.com/webpack-contrib/webpack-bundle-analyzer\\\">BundleAnalyzerPlugin</a>，对module进行图形化的分析。进行各种优化后，<code class=\\\"language-text\\\">vendor</code>和入口文件维持在600k左右，gzip后在200k左右，其他模块gzip后基本在<strong>20-50kb</strong>左右。</p>\\n<h2>代码风格及限制</h2>\\n<p>由于项目使用webpack和node构建，所以可以使用<code class=\\\"language-text\\\">eslint</code>等工具去做提交前代码规范检查，另外还使用了<code class=\\\"language-text\\\">editorconfig</code>和<a href=\\\"https://github.com/prettier/prettier\\\"><code class=\\\"language-text\\\">prettier</code></a>去编辑器的设置和统一代码格式化。另外提一下，<a href=\\\"https://github.com/prettier/prettier\\\"><code class=\\\"language-text\\\">prettier</code></a>可以通过配置项统一多种代码的格式化，因为在node端运行，所以可以做提交前的代码格式化。\\n在各种工具配合下，基本可以做到代码风格的统一。</p>\\n<p>此外，css方面没有使用csslint，但是普及了一下<a href=\\\"http://getbem.com/\\\"><strong><code class=\\\"language-text\\\">BEM</code></strong></a>，样式方面的统一情况也收到不错的成效。</p>\\n<h1>开发阶段</h1>\\n<p>vue在开发时候的好处就体现出来了，没写过项目的同事基本都能把页面写出来，但是对于一些参数传递、父子组件相互调用会需要一点时间去熟悉。但是在开发流程中基本没有出现什么断链的情况。</p>\\n<h2>组件化</h2>\\n<p>在公司期间接触过几个项目，项目结构都比较凌乱，并没有把组件化的优势发挥出来，很多页面都是重新写几遍。所以这项目开始做之前，就普及了一下react生态圈里面的几个组件概念。</p>\\n<ol>\\n<li><strong>container component(接入型组件)</strong>。负责主要业务逻辑，组装数据，提供业务方法。</li>\\n<li><strong>exhibition component(展示型组件)</strong>。负责数据展示工作，大部分是业务组件，数据进，页面出这样，没有复杂功能。</li>\\n<li><strong>interactive component(交互型组件)</strong>。复用性比较强的组件，如<code class=\\\"language-text\\\">dialog</code>、<code class=\\\"language-text\\\">toast</code>等组件。</li>\\n<li><strong>functional component(功能型组件)</strong>。这种组件一般都是作为一种扩展，抽象机制存在，没有渲染动作，例如vue中的<code class=\\\"language-text\\\">router-view</code>，<code class=\\\"language-text\\\">transition</code>等。</li>\\n</ol>\\n<p>了解大概组成后，一般都会把组件拆分得比较细，基本组件代码维持在<strong>300行代码</strong>左右，这样做得好处就是，业务变动时候需要改动的地方就比较少，但是组件对每个模块的影响相对的就变大了，但是这个可以通过<strong>测试</strong>去解决的。</p>\\n<h2>动态接口地址</h2>\\n<p>项目中接口跟静态资源会动态改变，所以需要取后台返回的值去拼接，页面静态资源可以自己写一个模板然后去拼接，接口可以取页面的变量，但是打包到项目的时候，发现路由分割的代码资源地址不对，由于代码是动态分割的，所以地址应该是取<code class=\\\"language-text\\\">config</code>里面的资源地址，所以导致加载失败。\\n通过webpack文档跟stackoverflow里面相似案例，可以在动态引入js之前加入一个<a href=\\\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific-\\\"><code class=\\\"language-text\\\">__webpack_public_path__</code></a>配置项，动态获取异步模块的地址。具体代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// variables就是动态的地址</span>\\n  __webpack_public_path__ <span class=\\\"token operator\\\">=</span> variables <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>测试</h2>\\n<p>由于前期比较急，单元测试到了中后期才加上，直接导致了单元测试的覆盖率不够，正常情况下应该一写完代码就马上加上测试。测试这些前期费点时间，后期获益良多的工作，项目、团队越大就越能体现测试的重要性了。\\n现在是使用<a href=\\\"https://facebook.github.io/jest/\\\">Jest</a> + <a href=\\\"https://eddyerburgh.gitbooks.io/avoriaz/content/\\\">Avariaz</a>的组合去做测试工作，后期会切换为<code class=\\\"language-text\\\">Jest</code> + 官方提供的<a href=\\\"https://vue-test-utils.vuejs.org/zh-cn/\\\">vue-test-utils</a>，两个<code class=\\\"language-text\\\">API</code>相似，切换代价不大。</p>\\n<h1>SSR</h1>\\n<p>项目没有这部分的需求，就自己在有空时间折腾了一下，照着官方的SSR文档搭了出来，不过用<a href=\\\"http://koajs.com/\\\"><code class=\\\"language-text\\\">koa</code></a>代替了express（await、async写起来更爽一点）。直出的速度果然是不一样啊，不过也存在几个暂时还没空看的问题。</p>\\n<ol>\\n<li>按需直出页面设置，比如我需要A页面直出，B页面不直出，这操作还没找到怎么配置。</li>\\n<li><code class=\\\"language-text\\\">Route</code>函数式的跳转无效，比如按钮需要动态去定义跳转方式的，绑定了函数，但是SSR处理后点击无效。</li>\\n<li>服务器性能测试。由于node是单线程的，没做过对应的项目，不知道流量大的时候怎么处理，有机会要了解下。</li>\\n</ol>\\n<h1>总结</h1>\\n<p>项目进行过程除了上面动态绑定接口地址，开发过程还是比较顺利的，不过还有几个需要改进的地方</p>\\n<ol>\\n<li>虽然有做code review，但是大部分都是自己改进，可以多留点问题和提出多点意见给对<code class=\\\"language-text\\\">vue</code>或者项目其他模块还不是很熟悉的同事去学习，共同进步。</li>\\n<li>项目启动前对业务的了解不够清楚，导致后期才介入<code class=\\\"language-text\\\">vuex</code>去改进一些模块，做了无用功。</li>\\n<li>项目启动前和设计沟通不够，导致后期图标没有使用到<code class=\\\"language-text\\\">iconfont</code>。不过后面也配合用按<code class=\\\"language-text\\\">BE(Block-Modify)</code>的方式命名图标，写了个脚本去自动生成less文件。</li>\\n</ol>\",\"htmlExcerpt\":\"<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\\n<h1>项目构建</h1>\\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href=\\\"https://github.com/kitwon/vue-mpa\\\">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"tags\":[\"chrome\",\"develop tool\",\"javascript\"],\"path\":\"/post/60fps-web-app\"},\"excerpt\":\"\\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\\n\\n----\\n\\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\\n\\n# 几个重要概念\\n## 60fps与设备刷新率\\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\\n\\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"几个重要概念\"},{\"depth\":2,\"value\":\"60fps与设备刷新率\"},{\"depth\":2,\"value\":\"pixel pipeline\"},{\"depth\":1,\"value\":\"关键渲染行为\"},{\"depth\":2,\"value\":\"触发layout、paint的关键操作\"},{\"depth\":1,\"value\":\"优化程序\"},{\"depth\":2,\"value\":\"performance panel\"},{\"depth\":2,\"value\":\"javascript\"},{\"depth\":2,\"value\":\"style & layout\"},{\"depth\":2,\"value\":\"paint & composite\"},{\"depth\":3,\"value\":\"怎么看到网页的分层\"},{\"depth\":3,\"value\":\"怎么生成层\"}],\"html\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n<!-- more -->\\n<h2>pixel pipeline</h2>\\n<p>影响浏览器渲染有很多因素，但是下面这5个关键的地方是我们可以控制的，也是像素至屏幕管道中关键的地方。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>Javascript。 js中的动画效果和一些dom操作。</li>\\n<li>样式计算(style)。 css匹配器的计算过程。例如<code class=\\\"language-text\\\">.nav__item &gt; .slot</code>。</li>\\n<li>布局(layout)。dom元素应用了规则之后，浏览器就会对其进行大小及位置的计算，这时候就会触发布局，而布局由于改变dom大小及位置，所以对其他元素也会造成影响。</li>\\n<li>绘制(paint)。绘制就是填充像素的过程。大部分像素相关如文字、图片、阴影等都会触发绘制。绘制一般在层(layer)上面完成。</li>\\n<li>合成。层的概念一般都出现在设计上面，但是浏览器中也有层的概念，所以有时候我们一些错误的操作或者属性都会使层的渲染顺序出现错误。</li>\\n</ul>\\n<h1>关键渲染行为</h1>\\n<p>从服务器返回一个html开始，可以分为以下几步(这里英文的过程分别对应开发工具中<strong>performance</strong>面板的表示</p>\\n<ol>\\n<li>解析html，生成dom树，这里显示为<strong>Parser Html</strong></li>\\n<li>然后根据页面的样式，将dom和css进行结合，此过程为<strong>Recalculate Style</strong></li>\\n<li>最后就生成渲染树，<code class=\\\"language-text\\\">display: none</code>或<code class=\\\"language-text\\\">:after</code>等伪元素都不会出现在渲染树上</li>\\n<li>浏览器知道哪个css规则应用哪个dom元素后，就开始计算布局(计算元素占用多少空间，出现在什么位置)，此过程是<strong>layout</strong></li>\\n<li>确定位置后浏览器就开始对dom的样式及内容进行渲染，称为<strong>paint</strong></li>\\n<li>dom渲染的时候，可能还会有图片资源，浏览器这时候就会将这些内容解码成内存，称为<strong>Image Decode + Resize</strong></li>\\n<li><strong>paint</strong>开始的操作都是在同一个层面中执行，但其实浏览器还会创建多个图层，并且对这些图层进行单独的绘制，这个过程称为<strong>Composite Layers</strong></li>\\n<li>这些操作在CPU中进行，执行完后上传到GPU中，最后显示到屏幕上</li>\\n</ol>\\n<h2>触发layout、paint的关键操作</h2>\\n<p>我们知道一帧中就包含了上面的操作，但并不是所有改变网页外观操作都会触发上面的行为。回到<strong>pipeline</strong>，看看什么操作会分别触发什么行为。(下面会用数字代表对应图片上的位置)\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>第一种，通过css或者js进行了外观的更改(1)，这时浏览器就要重新计算元素的样式(2)，如果还更改了布局属性，元素的大小改变，必定会影响其他元素的位置，这时就要重新布局(3)，然后受影响的区域就需要重新绘制(4)，最后将所有东西合成在一起(5)。</li>\\n<li>第二种，仅改变绘制属性(1)，例如背景、文字颜色、阴影等(2)，由于这些操作没有改变布局，所以会跳过(3)，直接进行(4)(5)的操作。</li>\\n<li>第三种，通过改变样式(1)(2)，但是样式并没有对(3)(4)进行改动，所以会直接执行(5)的操作，例如<code class=\\\"language-text\\\">cursor: pointer</code>等属性。</li>\\n</ul>\\n<h1>优化程序</h1>\\n<p>通过上面的介绍，我们知道影响帧数的主要是上面的几个渲染行为，但是要怎么知道是什么更改操作使帧数下降，就需要<strong>develop tool</strong>的帮助。</p>\\n<h2>performance panel</h2>\\n<p>性能分析面板是chrome中开发者工具自带的一个功能，我们能在上面看到录制实践中，<strong>pipeline</strong>的具体运行情况。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/performance.jpg\\\" alt=\\\"performance panel\\\"></p>\\n<ol>\\n<li>在(1)<strong>overview</strong>中，我们可以看到程序中大概的性能状况，fps、cpu、网络使用情况，还有对应的截图。一般情况，看到<strong>cpu</strong>部分一大片一大片的颜色就证明你的程序需要优化了。</li>\\n<li>(2)中的<strong>main</strong>部分，可以看到主进程中的活动，所有时间点执行的操作及渲染行为都能在这个部分找到，主要的性能分析也是围绕这里展开，一半看到<strong>飙红</strong>的地方就证明那里是要下手的地方。</li>\\n<li>(3)中则是对某个浏览器行为进行统计分析，能看到详细调用树和渲染层，找代码和<strong>layer tree</strong>都是(3)中。</li>\\n</ol>\\n<p>由于网上教程大部分的教程都用较低的版本，所以很多教程中的面板都找不到，比如<strong>painter</strong>就需要开启<strong>advance paint insturmentation</strong>，所以教程中找不到就需要google一下或者看下<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/\\\">goole的官方教程</a>。具体的使用方法就不赘述，反正看见<strong>飙红就是要优化了</strong>。</p>\\n<p>有工具之后，就可以针对具体的东西进行优化了，根据<strong>pipeline</strong>，我们其实可以知道优化点是哪几个了，javascript, style &#x26; layout, paint &#x26; composite。下面一个个分析下优化点。</p>\\n<h2>javascript</h2>\\n<p>由于javascript在<strong>pipeline</strong>中，所以在渲染过程中执行javascript代码必定会造成卡顿，俗称的帧丢失。在渲染过程中需要执行js代码的操作最常见的例子就是<strong>用js去操作动画</strong>，还有<strong>在浏览过程中做一些数据拉取及组装数据的操作</strong>。所以针对这些问题，我们需要使用一些新的api去改进我们的app。</p>\\n<p><strong>1.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">requestAnimationFrame</a>代替setTimeout和setInterval去执行动画。</strong>\\n一开始我们就说到帧数的概念，一个app想要不卡顿，必须达到60fps每秒的速度才能保证，减去浏览器自己的行为，每帧留给javascript执行的时间大概剩下10ms左右。或许不断调用setTimeout或者setIntervarl可以自定义函数执行时间，但是由于javascript是单线程，活着其他堆在栈中的代码会突然插入，导致函数执行中断。这时候raf就能解决这个问题了。具体使用方法可以自行查看<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">文档</a>。</p>\\n<p><strong>2.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\\\">web worker</a>去进行一些多线程的操作。</strong>\\n使用web worker后，浏览器会另起一个线程，所以就不会妨碍主线程中的pipeline了。我们可以在一些加载列表的场景中使用，比如用户在浏览，但是你想用这些时间去load一些数据回来，然后渲染页面，这时候worker会执行ajax，也不会妨碍到主线程执行。</p>\\n<h2>style &#x26; layout</h2>\\n<p>样式和布局也是帧里面的一部分，复杂的选择器或者某些js操作触发了强制布局，都会使性能下降，下面可以用这几个方法避免这些问题。\\n<strong>1.操作数量多的dom时，减少选择器的复杂度。</strong>\\n通常做项目的时候，我们一般都是操作少数的dom，但是某些特殊情况下可能要操作上千个dom(当然这不太现实)，这时候保持选择器的简洁就相当重要了，一个多级选择器计算时间足以超出10ms，所以，保持css中选择器的简洁是十分重要的。</p>\\n<p><strong>2.避免布局反复FSL</strong>\\n什么是布局反复，一帧的流程应该是按照<strong>pipeline</strong>的执行顺序去执行的，但是某些错误的javascript读写操作就很容易造成布局反复，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> elms <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">var</span> block <span class=\\\"token operator\\\">=</span> ducoment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'block'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> elms<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> height <span class=\\\"token operator\\\">=</span> block<span class=\\\"token punctuation\\\">.</span>offsetHeight\\n  elms<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> height\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在这段代码中，由于属性的读取操作<code class=\\\"language-text\\\">offsetHeight</code>会触发layout布局，然后下面设置高度的属性会触发style修改样式，两个在一个循环中就会造成布局反复，从而造成性能的损失。在<strong>performance panel</strong>中，缩小范围，如果看见layout中有红色的小三角，那么就是触发了FSL了，点进详情就能看到代码运行的地方在哪里了。</p>\\n<h2>paint &#x26; composite</h2>\\n<p>绘制和合成是一个相对比较复杂的流程，大多数样式更改都会触发这个过程，但是如果是大批量的元素或者一个复杂的动画绘制，在主线程中必定会造成性能问题。在这里就引入图层这个概念，由于浏览器的呈现器不在主线程中，所以图层会单独绘制，然后再和树进行合成。但如果层多的话，合成时间也会加长，所以使用层和限制层的数量也是需要注意的问题。</p>\\n<h3>怎么看到网页的分层</h3>\\n<p>具体看<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler\\\">教程</a>\\n进去搜<strong>View paint profiler</strong></p>\\n<ol>\\n<li>Enable advanced paint instrumentation.(这个选项在上图面板一，点击右上角的小齿轮)</li>\\n<li>Select a Paint event in the Main section.(教程里面看图)</li>\\n</ol>\\n<h3>怎么生成层</h3>\\n<ol>\\n<li>社区中比较常见的<code class=\\\"language-text\\\">transform: translate3d(0, 0, 0)</code>、<code class=\\\"language-text\\\">transform: translateZ(0)</code>。虽然会有一些性能的浪费，但是好像是现在比较好的解决方法了。</li>\\n<li>使用css新属性<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\\\"><code class=\\\"language-text\\\">will-change: transform</code></a>，浏览器支持度一般般。</li>\\n</ol>\\n<p>能够看完整篇的同学估计耐性都不错。通过一些基本的介绍，基本可以了解怎么查看和修复app的渲染性能问题了，不过使用现代的开发框架如<strong>react</strong>、<strong>vue</strong>、<strong>angular</strong>都很少会出现<strong>FSL</strong>的问题了，因为很大部分的<strong>layout</strong>动作都直接被<code class=\\\"language-text\\\">rerender</code>，但是一些比较旧的用dom操作些的APP或多或少都会出现上面的问题。大家可以看看自己的APP有没有达到要求。不说了，我去改代码了。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"在vue项目中使用jest进行单元测试\",\"date\":\"2017-08-18\",\"category\":[\"前端工具\"],\"tags\":[\"unit test\",\"vue\",\"javascript\"],\"path\":\"/post/vue-jest-test\"},\"excerpt\":\"\\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\\n\\n# 配置\\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\\n```bash\\n$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"配置\"},{\"depth\":2,\"value\":\"package.json\"},{\"depth\":1,\"value\":\"跑个测试\"},{\"depth\":1,\"value\":\"last\"}],\"html\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> jest jest-vue-preprocessor --save-dev\\n\\n<span class=\\\"token comment\\\"># or use yarn</span>\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h2>package.json</h2>\\n<p>下面的配置都在<strong>package.json</strong>文件中配置。</p>\\n<p>在文件最底部添加下面代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"jest\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 配置文件拓展名</span>\\n    <span class=\\\"token string\\\">\\\"moduleFileExtensions\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"vue\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 匹配webpack中配置的alias</span>\\n    <span class=\\\"token string\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\"^vue$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"vue/dist/vue.common.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"^@(.*)$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 编译工具</span>\\n    <span class=\\\"token string\\\">\\\"transform\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\".*\\\\\\\\.(vue)$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/node_modules/jest-vue-preprocessor\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\".*\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"babel-jest\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p>然后在上面<code class=\\\"language-text\\\">script</code>中添加一条新的命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./node_modules/.bin/jest\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后就配置好了，很快，很舒服。</p>\\n<h1>跑个测试</h1>\\n<p>首先，我有个vue组件cell，一个简单的列表item组件，代码如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token comment\\\">&lt;!-- vue template --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>href<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-wrapper<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>iconClass<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>iconClass<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-label<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>label<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>label<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-value<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>{ <span class=\\\"token punctuation\\\">'</span>isLink<span class=\\\"token punctuation\\\">'</span>: isLink }<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>value<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon-arrow-right<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>isLink<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ui-cell'</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    to<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>String<span class=\\\"token punctuation\\\">,</span> Object<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    iconClass<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    title<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  computed<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">href</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>added <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> resolve <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">.</span>matched<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$nextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>added <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> resolve<span class=\\\"token punctuation\\\">.</span>path\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">isLink</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleClick</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">preventDefault</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>href<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后编写测试文件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> Vue <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue'</span>\\n<span class=\\\"token keyword\\\">import</span> Cell <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@/components/cell'</span>\\n<span class=\\\"token keyword\\\">import</span> VueRouter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue-router'</span>\\n\\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueRouter<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> routes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> Cell\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  routes\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> mockFn <span class=\\\"token operator\\\">=</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nCell<span class=\\\"token punctuation\\\">.</span>methods <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    mockFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">mockReturnValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> Constructor <span class=\\\"token operator\\\">=</span> Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extend</span><span class=\\\"token punctuation\\\">(</span>Cell<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> vm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell1'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value1'</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'label1'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> vm2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  router<span class=\\\"token punctuation\\\">,</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell2'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value2'</span><span class=\\\"token punctuation\\\">,</span>\\n    to<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> vm3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell3'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value3'</span><span class=\\\"token punctuation\\\">,</span>\\n    iconClass<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'icon-test'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Cell component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'render currect dom'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm3<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'router action currectly run'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    vm2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$nextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      vm2<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>href<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>然后跑一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> run <span class=\\\"token function\\\">test</span>\\n\\n<span class=\\\"token operator\\\">></span> jest-test@1.0.0 <span class=\\\"token function\\\">test</span> /Users/kit/projects/jest-test\\n<span class=\\\"token operator\\\">></span> jest\\n\\n PASS  test/unit/Cell.spec.js\\n  Cell component\\n    ✓ render currect dom <span class=\\\"token punctuation\\\">(</span>8ms<span class=\\\"token punctuation\\\">)</span>\\n    ✓ router action currectly run <span class=\\\"token punctuation\\\">(</span>2ms<span class=\\\"token punctuation\\\">)</span>\\n\\nSnapshot Summary\\n › 3 snapshots written <span class=\\\"token keyword\\\">in</span> 1 <span class=\\\"token function\\\">test</span> suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   3 added, 3 total\\nTime:        2.295\\n</code></pre>\\n      </div>\\n<h1>last</h1>\\n<p>jest给我们提供了一个便捷的测试环境，简单的几个配置项，即可完成编译，不像mocha或jasmine需要其他<code class=\\\"language-text\\\">node module</code>配合完成测试的工作。个人认为fb还是做到了他希望的，让测试变得简单，让开发者有更多的时间去开发。至于自动化测试的好处这里就不再赘述了，有兴趣的朋友可以自行baidu、google。</p>\",\"htmlExcerpt\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"tags\":null,\"path\":\"/post/js-class\"},\"excerpt\":\"\\n# 类理论\\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\\n\\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\\n\\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\\n\\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\\n\\n## js中实现类复制(混入)\\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"类理论\"},{\"depth\":2,\"value\":\"js中实现类复制(混入)\"},{\"depth\":3,\"value\":\"显式混入\"},{\"depth\":3,\"value\":\"隐式混入\"},{\"depth\":1,\"value\":\"prototype-原型\"},{\"depth\":2,\"value\":\"如何工作\"},{\"depth\":1,\"value\":\"小结\"}],\"html\":\"<h1>类理论</h1>\\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code class=\\\"language-text\\\">Vehicle</code>类，<code class=\\\"language-text\\\">Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code class=\\\"language-text\\\">Car</code>时，只要声明它继承或者拓展<code class=\\\"language-text\\\">Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code class=\\\"language-text\\\">Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\\n<p>javascript中也有类中的<code class=\\\"language-text\\\">new</code>和<code class=\\\"language-text\\\">instanceof</code>，还有ES6中的<code class=\\\"language-text\\\">class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\\n<h2>js中实现类复制(混入)</h2>\\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\\n<!-- more -->\\n<h3>显式混入</h3>\\n<p>显示混入在其他库或者框架中一般被称为<code class=\\\"language-text\\\">extend</code>，在这方便理解会使用<code class=\\\"language-text\\\">mixin</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 前面的Vehicle和car的例子</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mixin</span><span class=\\\"token punctuation\\\">(</span>sourceObj<span class=\\\"token punctuation\\\">,</span> targetObj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token keyword\\\">in</span> sourceObj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token keyword\\\">in</span> targetObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      targetObj<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> sourceObj<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> targetObj<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Vehicle <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  engines<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  ignition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Turning on my engines.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  drive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ignition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Steering and moving forward.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Car <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mixin</span><span class=\\\"token punctuation\\\">(</span>Vehicle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  wheels<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n  drive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vehicle<span class=\\\"token punctuation\\\">.</span>drive<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Rolling on all'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'wheels!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>还有一种显示混入的变体叫<strong>寄生继承</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Vehicle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>engines <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nVehicle<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">ignition</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Turning on my engines.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nVehicle<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">drive</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ignition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Steering and moving forward.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 寄生类 car</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> car  <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vehicle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  car<span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> vehDrive <span class=\\\"token operator\\\">=</span> car<span class=\\\"token punctuation\\\">.</span>drive<span class=\\\"token punctuation\\\">;</span>\\n\\n  car<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">drive</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vehicle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Rolling on all'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'wheels!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> car<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> myCar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyCar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">drive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>隐式混入</h3>\\n<p>隐式混入就是改变在一个函数体内执行另外另一个函数的方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  cool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cool</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  cool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    foo<span class=\\\"token punctuation\\\">.</span>cool<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cool</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1, 数据不共享</span>\\n</code></pre>\\n      </div>\\n<h1>prototype-原型</h1>\\n<p>JS中，当试图引用对象属性时候就会触发<code class=\\\"language-text\\\">[[GET]]</code>操作，如果在对象属性中没有找到，就会使用对象的<code class=\\\"language-text\\\">[[prototype]]</code>链。JS大部分复杂类型都是<code class=\\\"language-text\\\">object</code>，所以<code class=\\\"language-text\\\">[[prototype]]</code>“尽头”应该是<code class=\\\"language-text\\\">Object.prototype</code>，里面包含了许多原生方法，如<code class=\\\"language-text\\\">toString</code>或<code class=\\\"language-text\\\">valueOf</code>。</p>\\n<h2>如何工作</h2>\\n<p>JS和其他OO语言并不同，JS中并没有类作为对象的抽象模式，JS中只有对象，所以当new一个对象时候，并不是复制一个类函数，而是将目标对象的<code class=\\\"language-text\\\">prototype</code>关联到新对象的<code class=\\\"language-text\\\">prototype</code>中。</p>\\n<h1>小结</h1>\\n<p><code class=\\\"language-text\\\">prototype</code>部分书本总结得比较清楚，想知道更多细节的同学可以参考<strong>you dont know javascript</strong>的5.1-5.4章节。</p>\\n<ul>\\n<li>访问对象时候都会触发对象的[[GET]]操作，如果没有找到属性的话会继续找[[Prototype]]链。</li>\\n<li>普通对象的原型链顶端都是<code class=\\\"language-text\\\">Object.prototype</code></li>\\n<li><code class=\\\"language-text\\\">new</code>调用函数时只会关系到对象，而不会复制</li>\\n</ul>\",\"htmlExcerpt\":\"<h1>类理论</h1>\\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code>Vehicle</code>类，<code>Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code>Car</code>时，只要声明它继承或者拓展<code>Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code>Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\\n<p>javascript中也有类中的<code>new</code>和<code>instanceof</code>，还有ES6中的<code>class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\\n<h2>js中实现类复制(混入)</h2>\\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript - this\",\"date\":\"2017-06-27\",\"category\":null,\"tags\":null,\"path\":\"/post/js-this\"},\"excerpt\":\"\\n# 关于this\\n\\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\\n\\n# this的指向\\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\\n\\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\\n```javascript\\nfunction baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"关于this\"},{\"depth\":1,\"value\":\"this的指向\"},{\"depth\":1,\"value\":\"绑定规则\"},{\"depth\":2,\"value\":\"默认绑定\"},{\"depth\":2,\"value\":\"隐式绑定\"},{\"depth\":3,\"value\":\"隐式丢失\"},{\"depth\":2,\"value\":\"显式绑定\"},{\"depth\":2,\"value\":\"硬绑定\"},{\"depth\":2,\"value\":\"new绑定\"},{\"depth\":1,\"value\":\"绑定优先级\"},{\"depth\":1,\"value\":\"绑定例外\"},{\"depth\":2,\"value\":\"被忽略的this\"},{\"depth\":2,\"value\":\"间接引用\"},{\"depth\":2,\"value\":\"软绑定\"},{\"depth\":1,\"value\":\"箭头函数\"}],\"html\":\"<h1>关于this</h1>\\n<p><code class=\\\"language-text\\\">this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code class=\\\"language-text\\\">this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\\n<h1>this的指向</h1>\\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前调用栈是 baz</span>\\n  <span class=\\\"token comment\\\">// 当前调用位置是全局作用域</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'baz'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bar的调用位置</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前的调用栈是 baz -> bar</span>\\n  <span class=\\\"token comment\\\">// 当前的调用位置是baz</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前的调用栈是 baz -> bar -> foo</span>\\n  <span class=\\\"token comment\\\">// 当前的调用位置是bar</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>绑定规则</h1>\\n<p>除了像上面分析代码，还有一个最简单的方式就是分析调用工具。找到调用位置后，就能根据下面的4条规则来判断this如何绑定。</p>\\n<h2>默认绑定</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>从上面代码可以知道，<code class=\\\"language-text\\\">foo</code>的调用位置在全局中，不带任何修饰地调用，因此只能使用<strong>默认绑定</strong>。</p>\\n<p>在这里要注意一个细节，如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定。</p>\\n<h2>隐式绑定</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span>  <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>从上代码可以看出<code class=\\\"language-text\\\">obj</code>，调用位置会使用<code class=\\\"language-text\\\">obj</code>上下文来引用函数，因此，可以说函数被调用时候<code class=\\\"language-text\\\">obj</code>对象“包含”它。当函数引用有上下文对象时，<strong>隐式绑定</strong> 规则会把函数引用调用中的<code class=\\\"language-text\\\">this</code>绑定到这个对象中。所以<code class=\\\"language-text\\\">this.a</code>与<code class=\\\"language-text\\\">obj.a</code>在此时是一样的。</p>\\n<p>对象属性应用链中只有最顶层或者说最后一层会影响调用位置。如下:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  obj2<span class=\\\"token punctuation\\\">:</span> obj2\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nobj1<span class=\\\"token punctuation\\\">.</span>obj2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 42</span>\\n</code></pre>\\n      </div>\\n<h3>隐式丢失</h3>\\n<p><strong>隐式丢失</strong> 就是隐式绑定的函数丢失绑定对象，然后应用<strong>默认绑定</strong>，从而把<code class=\\\"language-text\\\">this</code>绑定到全局对象或者<code class=\\\"language-text\\\">undefined</code>中，取决于是否严格模式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 函数别名</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// opps, global</span>\\n</code></pre>\\n      </div>\\n<p>或者在传入回调函数的时候：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// opps, global</span>\\n</code></pre>\\n      </div>\\n<p>传入函数就是一种隐式赋值，所以结果和上一个例子也是一样的。</p>\\n<h2>显式绑定</h2>\\n<p>使用<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>方法对对象进行强制调用函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>在绑定的机制基本是一样的，就是传参不一样，<code class=\\\"language-text\\\">call</code>为单独的参数，<code class=\\\"language-text\\\">apply</code>为数组。</p>\\n<h2>硬绑定</h2>\\n<p>硬绑定为显式绑定的一个变种，能够解决丢失绑定的问题，先思考下面代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">bar</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n\\n<span class=\\\"token comment\\\">// 硬绑定的bar不能再修改它的this</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>可以创建一个可以重复使用的硬绑定函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> something<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+</span> something<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 辅助绑定函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2 3</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5</span>\\n</code></pre>\\n      </div>\\n<p>其实在ES5中已经提供了原生的<code class=\\\"language-text\\\">Fucntion.prototype.bind</code>的方法，可以直接使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> something<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+</span> something<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>new绑定</h2>\\n<p>JavaScript中的new并不想其他oo语言那样会实例化一个类，只是使用new操作符调用普通的函数，在这个调用也会对this进行绑定。\\n使用new调用函数时，会自动执行下面操作：</p>\\n<ol>\\n<li>创建（或者说构造）一个全新的对象。</li>\\n<li>这个对象会被执行[[原型]]连接。</li>\\n<li>这个新对象会绑定到函数调用的this。</li>\\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\\n</ol>\\n<p>看下面代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>像这样普通的new调用<code class=\\\"language-text\\\">foo(...)</code>时，会构造一个新的对象并把它绑定到<code class=\\\"language-text\\\">foo(..)</code>调用中的this上。这个就称为new绑定。</p>\\n<h1>绑定优先级</h1>\\n<p>绑定优先级按照下面的顺序来判断：</p>\\n<ol>\\n<li>\\n<p>函数是否在new中调用(new绑定)？如果是的话this绑定的是新创建的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>函数是否通过call、apply(显示绑定)或者硬绑定调用？如果是的话，this绑定的是指定的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是哪个上下文对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>若果都不是的话，适用默认绑定，严格模式下绑定到<code class=\\\"language-text\\\">undefined</code>，否则就绑到全局对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ol>\\n<h1>绑定例外</h1>\\n<p>在某些场景下this的绑定用上面的规制是判断不了的，可能认为是其他绑定规则，实际引用的是<a href=\\\"#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\\\">默认绑定</a>规则。</p>\\n<h2>被忽略的this</h2>\\n<p>如果把<code class=\\\"language-text\\\">null</code>或者<code class=\\\"language-text\\\">undefined</code>作为this的绑定对象传入call、apply或者bind中，这些值在调用时会被忽略，实际应用的是默认规则。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fOO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>这种情况虽然并不多见，但是使用apply展开数组或者适用<code class=\\\"language-text\\\">bind(...)</code>进行<a href=\\\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\\\">柯里化</a>的时候会用到。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a: '</span> <span class=\\\"token operator\\\">+</span> a <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'b: '</span> <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// a: 2, b: 3</span>\\n\\n<span class=\\\"token comment\\\">// 适用bind(..) 进行柯里化</span>\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>nul<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// a: 2, b: 3</span>\\n</code></pre>\\n      </div>\\n<p><strong>注意：很多时候新建一个空对象<code class=\\\"language-text\\\">var n = Object.creat(null)</code>代替<code class=\\\"language-text\\\">null</code>更为安全。</strong></p>\\n<h2>间接引用</h2>\\n<p>间接引用上面介绍<a href=\\\"#%E9%9A%90%E5%BC%8F%E4%B8%A2%E5%A4%B1\\\">隐式丢失</a>的时候也有举过例子，调用间接引用的函数也会造成绑定例外。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> foo<span class=\\\"token punctuation\\\">:</span> foo <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\no<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n<span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> o<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<h2>软绑定</h2>\\n<p>软绑定可以实现硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改this的能力。具体使用方式如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name：'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj2'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj3'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 稍后实现softBind</span>\\n<span class=\\\"token keyword\\\">var</span> fooOBJ <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">softBind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">fooOBJ</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj</span>\\n\\nobj2<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">softBind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nobj2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj2</span>\\n\\nfooOBJ<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj3</span>\\n\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj 应用了软绑定</span>\\n</code></pre>\\n      </div>\\n<p>可以看到，软绑定的<code class=\\\"language-text\\\">foo()</code>可以手动将this绑定到<code class=\\\"language-text\\\">obj2</code>或者<code class=\\\"language-text\\\">obj3</code>上，但如果应用默认绑定，则会将this绑定到obj中。</p>\\n<p><code class=\\\"language-text\\\">softBind</code>的实现方式如下:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>softBind<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">softBind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">bound</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">(</span>window <span class=\\\"token operator\\\">||</span> global<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      curried<span class=\\\"token punctuation\\\">.</span>concat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>curried<span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    bound<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> bound<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个函数首先检查调用时候的this，如果this绑定到全局或者undefined中，那就把指定的默认对象<code class=\\\"language-text\\\">obj</code>绑定到this，否则不修改this。<strong>ES5中的bind()已经实现此部分功能</strong>。</p>\\n<h1>箭头函数</h1>\\n<p>前面接受的<a href=\\\"#%E7%BB%91%E5%AE%9A%E4%BC%98%E5%85%88%E7%BA%A7\\\">四条规则</a>可以包含所有正常函数。但是ES6中的<strong>箭头函数</strong>则无法使用这些规则。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this继承foo</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2，不是3</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">foo()</code>内部的箭头函数会捕获调用<code class=\\\"language-text\\\">foo()</code>时的this。由于<code class=\\\"language-text\\\">foo()</code>的this绑定到<code class=\\\"language-text\\\">obj1</code>,<code class=\\\"language-text\\\">bar</code>的this也会绑定到<code class=\\\"language-text\\\">obj1</code>，箭头函数的绑定无法被修改。(new也不行)</p>\\n<p>在ES6出现之前我们经常写的一种模式与箭头函数是几乎相同的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">var self = this</code>和箭头函数从本质来说是想取代this的机制，如果代码中大多数使用<code class=\\\"language-text\\\">var self = this;</code>，那么应该完全使用词法作用域或箭头函数，抛弃this风格的代码。相反，如果使用this，则可以上方的绑定机制。</p>\",\"htmlExcerpt\":\"<h1>关于this</h1>\\n<p><code>this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code>this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\\n<h1>this的指向</h1>\\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\\n<pre><code class=\\\"language-javascript\\\">function baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"webpack2新特性&迁移\",\"date\":\"2017-06-24\",\"category\":[\"前端工具\"],\"tags\":[\"webpack\"],\"path\":\"/post/webpack2\"},\"excerpt\":\"\\nwebpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。\\n\\n# 从webpack1中迁移\\n官方已经给出了详细的[迁移指南](https://webpack.js.org/guides/migrating/)，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。\\n\\n## 配置文件\\n如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。\\n\\n### `module.loaders`变成`module.rules`\\n旧的`module.loader`被`module.rules`取代，后者允许配置`loader`更多选项，具体查看文档[module.rules](https://webpack.js.org/configuration/module/#module-rules)\\n\\n```javascript\\n// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"从webpack1中迁移\"},{\"depth\":2,\"value\":\"配置文件\"},{\"depth\":3,\"value\":\"变成\"},{\"depth\":3,\"value\":\"改动\"},{\"depth\":3,\"value\":null},{\"depth\":3,\"value\":\"CLI中配置使用自定义参数\"},{\"depth\":2,\"value\":\"主要变更\"},{\"depth\":3,\"value\":\"ES6模块\"},{\"depth\":1,\"value\":\"总结\"},{\"depth\":2,\"value\":\"参考\"}],\"html\":\"<p>webpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。</p>\\n<h1>从webpack1中迁移</h1>\\n<p>官方已经给出了详细的<a href=\\\"https://webpack.js.org/guides/migrating/\\\">迁移指南</a>，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。</p>\\n<h2>配置文件</h2>\\n<p>如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。</p>\\n<h3><code class=\\\"language-text\\\">module.loaders</code>变成<code class=\\\"language-text\\\">module.rules</code></h3>\\n<p>旧的<code class=\\\"language-text\\\">module.loader</code>被<code class=\\\"language-text\\\">module.rules</code>取代，后者允许配置<code class=\\\"language-text\\\">loader</code>更多选项，具体查看文档<a href=\\\"https://webpack.js.org/configuration/module/#module-rules\\\">module.rules</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\nmdoule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span>\\n            use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token punctuation\\\">{</span> loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n                    options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.jsx$/</span><span class=\\\"token punctuation\\\">,</span>\\n            loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'babel-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// ...</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\nmodule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.less$/</span><span class=\\\"token punctuation\\\">,</span>\\n        use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'less-loader'</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>除上面两项外还有</p>\\n<ul>\\n<li>现在指定loader的时候不能再省略<code class=\\\"language-text\\\">-loader</code>后缀。具体原因参阅<a href=\\\"https://github.com/webpack/webpack/issues/2986\\\">#2968</a></li>\\n<li><code class=\\\"language-text\\\">json-loader</code>不需再手动添加。</li>\\n<li>loader默认的resolve配置是相对于<code class=\\\"language-text\\\">context</code>配置项的。</li>\\n<li>取消了<code class=\\\"language-text\\\">module.preLoaders</code>以及<code class=\\\"language-text\\\">module.postLoaders</code>。</li>\\n</ul>\\n<h3><code class=\\\"language-text\\\">UglifyPlugin</code>改动</h3>\\n<ul>\\n<li><code class=\\\"language-text\\\">UglifyPlugin</code>的<code class=\\\"language-text\\\">sourceMap</code>现在的默认值的<code class=\\\"language-text\\\">false</code>而不是<code class=\\\"language-text\\\">true</code>。</li>\\n<li><code class=\\\"language-text\\\">UglifyJsPlugin</code>的<code class=\\\"language-text\\\">compress.warnings</code>配置项现在默认为<code class=\\\"language-text\\\">false</code>而不是<code class=\\\"language-text\\\">true</code>。</li>\\n</ul>\\n<h3><code class=\\\"language-text\\\">ExtractTextWebpackPlugin</code></h3>\\n<p>插件变化主要体现在语法上，又原来的单个参数传变成了对象，现在的配置方式如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ExtractTextPlugin.extract</span>\\nmodule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span>\\n        loader<span class=\\\"token punctuation\\\">:</span> ExtractTextPlugin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            fallbackLoader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            publicPath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/dist'</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// new ExtractTextPlugin({options})</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ExtractTextPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bundle.css'</span><span class=\\\"token punctuation\\\">,</span>\\n        disabled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        allChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h3>CLI中配置使用自定义参数</h3>\\n<p>在webpack1中可以用<code class=\\\"language-text\\\">process.argv</code>获取自定义参数，但是在webpack2中这行为被禁止了，替代地提供了一个接口<code class=\\\"language-text\\\">env</code>去获取自定义参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">export</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> customStuff <span class=\\\"token operator\\\">=</span> env<span class=\\\"token punctuation\\\">.</span>customStuff<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token keyword\\\">return</span> config<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>主要变更</h2>\\n<h3>ES6模块</h3>\\n<p>webpack2现在增加对ES6的模块化的原生支持，意味着现在能够直接识别<code class=\\\"language-text\\\">import</code>和<code class=\\\"language-text\\\">export</code>了，不需要先转成CommonJS模块的格式。\\n支持原生<code class=\\\"language-text\\\">import</code>带来的影响就是支持异步加载模块，webpack1使用异步模块的时候如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ensure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chunkName'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>webpack2的<code class=\\\"language-text\\\">import</code>会返回一个<code class=\\\"language-text\\\">promise</code>对象</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>而且现在<strong>chunk加载失败能被Promise捕捉到</strong>，那就意味着我们能够在组件加载失败的时候采取相应的操作。</p>\\n<p>另外现在<code class=\\\"language-text\\\">import</code>还支持动态表达式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">route</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> query<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/routes/${path}/route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>route <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">route<span class=\\\"token punctuation\\\">.</span>Route</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>用着<em>vim-mode</em>，写完这篇已经完全头皮发麻了，完全熟悉估计不知道还要多久呢。回正题，·从官方文档来看，改动的地方的确不多，迁移成本应该是比较低的，至于要不要迁移我觉得还是见仁见智吧，如果新版的优点好处大于迁移的成本的话各位应该可以放心去改动你的配置文件了。总的来说webpack2有以下几个优点</p>\\n<ul>\\n<li>编译速度提高</li>\\n<li>编译文件大小相对减少了</li>\\n<li>支持promise</li>\\n<li>能捕捉到chunk加载失败</li>\\n</ul>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://webpack.js.org/guides/migrating/\\\">Migrating from v1 to v2</a></li>\\n<li><a href=\\\"http://www.tuicool.com/articles/aieAnan\\\">升级到 webpack2</a></li>\\n<li><a href=\\\"http://imweb.io/topic/58666d57b3ce6d8e3f9f99b0\\\">webpack2 的 tree-shaking 好用吗？</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>webpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。</p>\\n<h1>从webpack1中迁移</h1>\\n<p>官方已经给出了详细的<a href=\\\"https://webpack.js.org/guides/migrating/\\\">迁移指南</a>，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。</p>\\n<h2>配置文件</h2>\\n<p>如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。</p>\\n<h3><code>module.loaders</code>变成<code>module.rules</code></h3>\\n<p>旧的<code>module.loader</code>被<code>module.rules</code>取代，后者允许配置<code>loader</code>更多选项，具体查看文档<a href=\\\"https://webpack.js.org/configuration/module/#module-rules\\\">module.rules</a></p>\\n<pre><code class=\\\"language-javascript\\\">// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript-闭包\",\"date\":\"2017-06-14\",\"category\":null,\"tags\":null,\"path\":\"/post/js-closures\"},\"excerpt\":\"\\n# 什么是闭包\\n记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。\\n\\n> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）\\n\\n然后看个例子\\n```javascript\\nfunction foo() {\\n\\tvar a = 2;\\n\\n\\tfuntion bar() {\\n\\t\\tconsole.log(a);\\n\\t}\\n\\n\\tbar();\\n}\\n\\nfoo();\\n```\\n如果按上面第一条的定义，这里一定是生成了闭包，但是**确切的说并不是**，这里最准确的说是`bar`对`a`的引用方式是词法作用域的查找规则，而这些只是**闭包**的一部分。然后再看清晰闭包的例子\\n\\n```javascript\\nfucntion foo() {\\n\\tvar a = 2;\\n\\n\\tfunction bar() {\\n\\t\\tconsole.log(a)\\n\\t}\\n\\n\\treturn bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"什么是闭包\"},{\"depth\":1,\"value\":\"闭包与变量\"},{\"depth\":1,\"value\":\"模块\"},{\"depth\":2,\"value\":\"现代的模块机制\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<h1>什么是闭包</h1>\\n<p>记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。</p>\\n<blockquote>\\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）</p>\\n</blockquote>\\n<p>然后看个例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\tfuntion <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如果按上面第一条的定义，这里一定是生成了闭包，但是<strong>确切的说并不是</strong>，这里最准确的说是<code class=\\\"language-text\\\">bar</code>对<code class=\\\"language-text\\\">a</code>的引用方式是词法作用域的查找规则，而这些只是<strong>闭包</strong>的一部分。然后再看清晰闭包的例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">fucntion <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> bar<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> baz <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>；\\n\\n<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这就是闭包效果</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p>在这例子中，<code class=\\\"language-text\\\">bar</code>也是在<code class=\\\"language-text\\\">foo</code>的作用域内，但是不是直接执行，而是作为返回值返回。\\n<code class=\\\"language-text\\\">foo()</code>执行后，返回值<code class=\\\"language-text\\\">bar</code>赋值给<code class=\\\"language-text\\\">baz</code>并执行<code class=\\\"language-text\\\">baz()</code>，在这里，<code class=\\\"language-text\\\">bar()</code>显然可以正常执行，它在自己定义的词法作用域<strong>以外</strong>的地方。</p>\\n<p>在<code class=\\\"language-text\\\">foo()</code>执行之后，按js的垃圾回收机制，应该会对其进行回收，而闭包的神奇之处就是可以阻止这事情发生，因此<code class=\\\"language-text\\\">baz()</code>在执行的时候依然可以访问<code class=\\\"language-text\\\">a</code>。在此一看，原来平时写的大多数代码都是闭包啊。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfn <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这里也是闭包</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>闭包与变量</h1>\\n<p>要说明闭包，for循环也是一个很好的例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>正常情况下，我们会预期的认为这段会每秒输出1～10，但实际，这段代码会<strong>每秒输出10次11</strong>。</p>\\n<p>首先<strong>11</strong>是那里来的，这个循环应该是在<code class=\\\"language-text\\\">i=11</code>的时候符合终止条件，所以代码输出的是循环结束时<strong>i</strong>的最终值。</p>\\n<p>细想一下，答案其实显而易见，<strong>setTimeout</strong>会推到栈底部执行，所以会在循环结束后才开始执行，所以每次都是输出<strong>11</strong>。但是什么问题造成这样的结果呢。</p>\\n<p>虽然<strong>setTimeout</strong>都是在每个迭代时候分别定义的，但是根据作用域原理，其实几个函数都是都是<strong>保存在一个封闭的作用域中</strong>，因此它们引用都是同一个<strong>来自全局的i</strong>。</p>\\n<p>所以解决方法也很简单，我们需要每次循环都新建一个作用域，然后把迭代的值传入作用域中，所以我们可以用<strong>IIFE</strong>（上一篇作用域有介绍，IIFE是一个匿名函数，每次调用都会创建作用域）来解决</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> j <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 换成ES6中的let也可以</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>模块</h1>\\n<p>闭包除了平时实现的回调功能外，还可以实现另外一个强大的功能，<strong>模块</strong>。\\n旧的模块实现方式，如jQuery就可以使用闭包实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> $ <span class=\\\"token operator\\\">=</span> jQuery <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Module</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identify1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identify2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">change</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">.</span>identify <span class=\\\"token operator\\\">=</span> identify2<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tdoSomething<span class=\\\"token punctuation\\\">:</span> doSomething<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tidentify<span class=\\\"token punctuation\\\">:</span> identify1<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tchange<span class=\\\"token punctuation\\\">:</span> change\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 2</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">identify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// hello</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">change</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">identify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// HELLO</span>\\n</code></pre>\\n      </div>\\n<p>如果不用单例的话不用<strong>IIFE</strong>即可，通过在模块内保留对公共API的引用，可以从<strong>内部</strong>对模块实例进行修改，包括添加，删除，修改属性或者方法。</p>\\n<h2>现代的模块机制</h2>\\n<p>现在大部分的模块加载器本质上都是将这种模块定义封装进API中，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> Module <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Manager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> modules <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> deps<span class=\\\"token punctuation\\\">,</span> impl<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> deps<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// 在modules中寻找名字为deps[i]的模块</span>\\n\\t\\t\\tdeps<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> modules<span class=\\\"token punctuation\\\">[</span>deps<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token comment\\\">// 将依赖的模块作为arguments传入module中</span>\\n\\t\\tmodules<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> impl<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>impl<span class=\\\"token punctuation\\\">,</span> deps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> modules<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tdefine<span class=\\\"token punctuation\\\">:</span> define<span class=\\\"token punctuation\\\">,</span>\\n\\t\\trequire<span class=\\\"token punctuation\\\">:</span> require\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>这段代码核心在<code class=\\\"language-text\\\">module[name] = impl.apply(impl, deps)</code>中，模块都按名字保存在<code class=\\\"language-text\\\">modules</code>变量中，每次都能根据获取相关模块。下面看看使用方式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span>who<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Hello '</span> <span class=\\\"token operator\\\">+</span> who<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\thello<span class=\\\"token punctuation\\\">:</span> hello\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nModule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">awsome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'kit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tawsome<span class=\\\"token punctuation\\\">:</span> awsome\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tbar <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'kit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Hello kit</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awsome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// HELLO KIT</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>从上面可以知道，平时写的js大部分代码都使用了闭包，通过了解闭包和作用域的运行方式，能够减少平时使用的出现的错误。也能通过闭包，使用js实现模块化等其他更多的功能。</p>\",\"htmlExcerpt\":\"<h1>什么是闭包</h1>\\n<p>记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。</p>\\n<blockquote>\\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）</p>\\n</blockquote>\\n<p>然后看个例子</p>\\n<pre><code class=\\\"language-javascript\\\">function foo() {\\n    var a = 2;\\n\\n    funtion bar() {\\n        console.log(a);\\n    }\\n\\n    bar();\\n}\\n\\nfoo();\\n</code></pre>\\n<p>如果按上面第一条的定义，这里一定是生成了闭包，但是<strong>确切的说并不是</strong>，这里最准确的说是<code>bar</code>对<code>a</code>的引用方式是词法作用域的查找规则，而这些只是<strong>闭包</strong>的一部分。然后再看清晰闭包的例子</p>\\n<pre><code class=\\\"language-javascript\\\">fucntion foo() {\\n    var a = 2;\\n\\n    function bar() {\\n        console.log(a)\\n    }\\n\\n    return bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"用python写一个简单爬虫\",\"date\":\"2017-06-11\",\"category\":null,\"tags\":null,\"path\":\"/post/python-crawler\"},\"excerpt\":\"\\n之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。\\n\\n# 主要需求\\n这个demo中爬虫有3个主要模块，**URL管理器**、**下载器**、**解析器**\\n* URL管理器主要处理爬取的URL的状态。\\n* 下载器会通过**URL管理器**传送过来有效URL进行下载。\\n* 解析器会将**下载器**下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给**URL管理器**进行重复操作。\\n\\n## 入口程序\\n`spider_main`文件为程序入口，处理整个爬虫的运行逻辑\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"主要需求\"},{\"depth\":2,\"value\":\"入口程序\"},{\"depth\":2,\"value\":\"url管理器\"},{\"depth\":2,\"value\":\"下载器\"},{\"depth\":2,\"value\":\"解析器\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<p>之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。</p>\\n<h1>主要需求</h1>\\n<p>这个demo中爬虫有3个主要模块，<strong>URL管理器</strong>、<strong>下载器</strong>、<strong>解析器</strong></p>\\n<ul>\\n<li>URL管理器主要处理爬取的URL的状态。</li>\\n<li>下载器会通过<strong>URL管理器</strong>传送过来有效URL进行下载。</li>\\n<li>解析器会将<strong>下载器</strong>下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给<strong>URL管理器</strong>进行重复操作。</li>\\n</ul>\\n<h2>入口程序</h2>\\n<p><code class=\\\"language-text\\\">spider_main</code>文件为程序入口，处理整个爬虫的运行逻辑</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> url_manager<span class=\\\"token punctuation\\\">,</span> html_downloader<span class=\\\"token punctuation\\\">,</span> html_outputer<span class=\\\"token punctuation\\\">,</span> html_parser\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SpiderMain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token operator\\\">=</span> url_manager<span class=\\\"token punctuation\\\">.</span>UrlManager<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>downloder <span class=\\\"token operator\\\">=</span> html_downloader<span class=\\\"token punctuation\\\">.</span>HtmlDownloader<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>parser <span class=\\\"token operator\\\">=</span> html_parser<span class=\\\"token punctuation\\\">.</span>HtmlParser<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer <span class=\\\"token operator\\\">=</span> html_outputer<span class=\\\"token punctuation\\\">.</span>HtmlOutputer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">crawl</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> root_url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tcount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\t\\t<span class=\\\"token comment\\\"># 初始化原始的爬取地址</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>add_new_ursl<span class=\\\"token punctuation\\\">(</span>root_url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">while</span> self<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>has_new_url<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tnew_url <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>get_new_url<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">'crawl %d : %s'</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">,</span> new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\thtml_cont <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>downloder<span class=\\\"token punctuation\\\">.</span>download<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\tnew_urls<span class=\\\"token punctuation\\\">,</span> new_data <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>parser<span class=\\\"token punctuation\\\">.</span>parse<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">,</span> html_cont<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>add_new_urls<span class=\\\"token punctuation\\\">(</span>new_urls<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer<span class=\\\"token punctuation\\\">.</span>collect_data<span class=\\\"token punctuation\\\">(</span>new_data<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t\\t\\t<span class=\\\"token comment\\\"># 爬取的数据到1000条时跳出循环</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span> count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span>\\n\\n\\t\\t\\t\\tcount <span class=\\\"token operator\\\">=</span> count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">except</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\"># 使用sys抛出其他函数错误</span>\\n\\t\\t\\t\\tinfo<span class=\\\"token operator\\\">=</span>sys<span class=\\\"token punctuation\\\">.</span>exc_info<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> info<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">,</span>info<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">'crawl failed'</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 将爬取的数据组装</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer<span class=\\\"token punctuation\\\">.</span>output_html<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'__main__'</span><span class=\\\"token punctuation\\\">:</span>\\n\\troot_url <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'http://baike.baidu.com/item/Python'</span>\\n\\tobj_spider <span class=\\\"token operator\\\">=</span> SpiderMain<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\tobj_spider<span class=\\\"token punctuation\\\">.</span>crawl<span class=\\\"token punctuation\\\">(</span>root_url<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>url管理器</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># url_manager.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UrlManager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>new_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>old_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 添加一条新的url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">add_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>new_urls <span class=\\\"token operator\\\">and</span> url <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>old_urls<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 添加多条url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">add_new_urls</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> urls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> urls <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>urls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">for</span> url <span class=\\\"token keyword\\\">in</span> urls<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>add_new_url<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 是否有代爬取地址</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span>\\n\\n\\t<span class=\\\"token comment\\\"># 返回一条新的url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">get_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tnew_url <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>old_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_url\\n</code></pre>\\n      </div>\\n<h2>下载器</h2>\\n<p>下载器使用自带的<a href=\\\"https://docs.python.org/2/library/urllib2.html\\\">urllib2</a>库处理请求</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_downloader.py</span>\\n<span class=\\\"token keyword\\\">import</span> urllib2\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlDownloader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">download</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 这里设置一下超时，不然网络会使程序运行出现停止</span>\\n\\t\\tresponse <span class=\\\"token operator\\\">=</span> urllib2<span class=\\\"token punctuation\\\">.</span>urlopen<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> timeout <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 请求失败时候跳出程序</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> response<span class=\\\"token punctuation\\\">.</span>getcode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">None</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">.</span>read<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>解析器</h2>\\n<p>解析器分为两部分，一个解析，一个输出，首先看看解析模块。</p>\\n<p>解析html我们使用了<a href=\\\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\\\">beautifulsoup</a>，解析后可以使用库提供的方法做DOM操作，获取有用的信息</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_parser.py</span>\\n<span class=\\\"token keyword\\\">from</span> bs4 <span class=\\\"token keyword\\\">import</span> BeautifulSoup\\n<span class=\\\"token keyword\\\">import</span> re\\n<span class=\\\"token keyword\\\">import</span> urlparse\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlParser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_new_urls</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tnew_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 获取a标签中所有匹配的url地址</span>\\n\\t\\tlinks <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find_all<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> href<span class=\\\"token operator\\\">=</span>re<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">compile</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'/item/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">for</span> link <span class=\\\"token keyword\\\">in</span> links<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t \\tnew_url <span class=\\\"token operator\\\">=</span> link<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'href'</span><span class=\\\"token punctuation\\\">]</span>\\n\\t\\t \\tnew_full_url <span class=\\\"token operator\\\">=</span> urlparse<span class=\\\"token punctuation\\\">.</span>urljoin<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t \\tnew_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>new_full_url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_urls\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_new_data</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tres_data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 获取页面相关内容</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> page_url\\n\\n\\t\\t<span class=\\\"token comment\\\"># &lt;dd class=\\\"lemmaWgt-lemmaTitle-title\\\"> &lt;h1>Python&lt;/h1></span>\\n\\t\\ttitle_node <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dd'</span><span class=\\\"token punctuation\\\">,</span> class_<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'lemmaWgt-lemmaTitle-title'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> title_node<span class=\\\"token punctuation\\\">.</span>get_text<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># &lt;div class=\\\"lemma-summary\\\" label-module=\\\"lemmaSummary\\\"></span>\\n\\t\\tsummary_node <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> class_<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'lemma-summary'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'summary'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> summary_node<span class=\\\"token punctuation\\\">.</span>get_text<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> res_data\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> html_cont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> page_url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span> <span class=\\\"token operator\\\">or</span> html_cont <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\tsoup <span class=\\\"token operator\\\">=</span> BeautifulSoup<span class=\\\"token punctuation\\\">(</span>html_cont<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'html.parser'</span><span class=\\\"token punctuation\\\">,</span> from_encoding<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tnew_urls <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_get_new_urls<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tnew_data <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_get_new_data<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_urls<span class=\\\"token punctuation\\\">,</span> new_data\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_outputer.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlOutputer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>datas <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n\\t<span class=\\\"token comment\\\"># 获取到的页面内容对象push到数组中</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">collect_data</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> data <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>datas<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 将数组循环拼接，写入html文件中</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">output_html</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tfout <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'output.html'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;html>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;body>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;table>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">for</span> data <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>datas<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;tr>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'summary'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/tr>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/html>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/body>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/table>'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>短短几行代码就实现了一个简单的爬虫，足以体现python的简单易用。学习python主要是想了解一下机器学习，后面会看一些书籍和资料，应该会再记录，但是后面估计会先写完深度学习javascript系列先。</p>\",\"htmlExcerpt\":\"<p>之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。</p>\\n<h1>主要需求</h1>\\n<p>这个demo中爬虫有3个主要模块，<strong>URL管理器</strong>、<strong>下载器</strong>、<strong>解析器</strong></p>\\n<ul>\\n<li>URL管理器主要处理爬取的URL的状态。</li>\\n<li>下载器会通过<strong>URL管理器</strong>传送过来有效URL进行下载。</li>\\n<li>解析器会将<strong>下载器</strong>下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给<strong>URL管理器</strong>进行重复操作。</li>\\n</ul>\\n<h2>入口程序</h2>\\n<p><code>spider_main</code>文件为程序入口，处理整个爬虫的运行逻辑</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"tags\":null,\"path\":\"/post/js-scope\"},\"excerpt\":\"\\n# 前言\\n使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。\\n\\n# 作用域是什么\\nJS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为**作用域**。\\n\\n\\n\\n## 理解作用域执行过程\\n如在`var a = 2`执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。\\n\\n首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在**作用域**中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为**引擎**生成运行时所需的代码，代码用来处理`a = 2`这个赋值操作。引擎运行时会首先询问**作用域**当前作用集合是否有一个`a`的变量。如果是，**引擎**就会使用这个变量；如果不是，引擎会继续查找该变量。如果**引擎**找到`a`变量，就会赋值2。否则，**引擎**会抛出一个异常。\\n\\n**总结**：变量赋值分别有两个动作，**编译器**会在当前**作用域**中声明一个变量（如果之前没有声明过），然后在运行时引擎会在**作用域**中查找该变量，如果能找到就对变量进行赋值。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"前言\"},{\"depth\":1,\"value\":\"作用域是什么\"},{\"depth\":2,\"value\":\"理解作用域执行过程\"},{\"depth\":3,\"value\":\"LSH和RSH查询\"},{\"depth\":2,\"value\":\"提升\"},{\"depth\":3,\"value\":\"函数优先\"},{\"depth\":2,\"value\":\"作用域嵌套\"},{\"depth\":1,\"value\":\"函数作用域\"},{\"depth\":1,\"value\":\"块作用域\"},{\"depth\":2,\"value\":\"延长作用域链(块作用域)\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<h1>前言</h1>\\n<p>使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。</p>\\n<h1>作用域是什么</h1>\\n<p>JS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为<strong>作用域</strong>。</p>\\n<h2>理解作用域执行过程</h2>\\n<p>如在<code class=\\\"language-text\\\">var a = 2</code>执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。</p>\\n<p>首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。</p>\\n<ol>\\n<li>遇到var a，编译器会在<strong>作用域</strong>中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。</li>\\n<li>接下来，编译器会为<strong>引擎</strong>生成运行时所需的代码，代码用来处理<code class=\\\"language-text\\\">a = 2</code>这个赋值操作。引擎运行时会首先询问<strong>作用域</strong>当前作用集合是否有一个<code class=\\\"language-text\\\">a</code>的变量。如果是，<strong>引擎</strong>就会使用这个变量；如果不是，引擎会继续查找该变量。如果<strong>引擎</strong>找到<code class=\\\"language-text\\\">a</code>变量，就会赋值2。否则，<strong>引擎</strong>会抛出一个异常。</li>\\n</ol>\\n<p><strong>总结</strong>：变量赋值分别有两个动作，<strong>编译器</strong>会在当前<strong>作用域</strong>中声明一个变量（如果之前没有声明过），然后在运行时引擎会在<strong>作用域</strong>中查找该变量，如果能找到就对变量进行赋值。</p>\\n<!-- more -->\\n<h3>LSH和RSH查询</h3>\\n<p>定义一个变量<code class=\\\"language-text\\\">var a = 2</code>，或者执行一个简单的函数<code class=\\\"language-text\\\">console.log(2)</code>中，会同时或者单独出现<strong>LSH</strong>或者<strong>RSH</strong>查询。其实在作用域执行过程中，第一步就是LSH查询，第二步就是RSH查询，简单点来说</p>\\n<ul>\\n<li>LSH查询就是找到变量的容器本身</li>\\n<li>RSH查询就是找到容器的原值</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// var a就是LSH</span>\\n<span class=\\\"token comment\\\">// a = 2就是RSH</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 这里的a其实就是做了一个RSH查询</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>为什么需要理解这两个概念呢，因为在变量没有声明的情况下，这两种查询的行为是不一样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\tb <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在第一次对b做RSH查询时候是无法找到该变量，所以引擎在这时候就会报出一个<code class=\\\"language-text\\\">ReferenceError</code>的错误。第二个b也还没有声明，但是引擎并没有报错，因为这里先做了LSH查询，所以可以知道，LSH查询如果未找到变量，会在全局中定义一个变量b（非严格模式下），再做RSH查询。引擎还有一个<code class=\\\"language-text\\\">TypeError</code>的错误，在试图对一个非函数类型的值执行函数调用，或者引用<code class=\\\"language-text\\\">null</code>, <code class=\\\"language-text\\\">undefined</code>类型值中的属性时候，就会报这个错误。</p>\\n<h2>提升</h2>\\n<p>很多时候都会认为javascript代码是由上到下一行一行执行的，但实际上并不完全正确，有一种特殊情况会导致这个假设是错误的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>还有另外一段</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>当js执行一个<code class=\\\"language-text\\\">var a = 2</code>的时候，这里并不是我们看到的一个声明，而是<code class=\\\"language-text\\\">var a</code>, <code class=\\\"language-text\\\">a = 2</code>两个声明，<code class=\\\"language-text\\\">var a</code>会在编译阶段执行，<code class=\\\"language-text\\\">a = 2</code>则会在执行阶段执行。所以第二段代码就很容易解释通了，代码执行顺序应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\na <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>而这个函数声明自动移动到顶部，就叫做<strong>提升</strong>。</p>\\n<p>提升操作会出现在<strong>每个作用域</strong>中，看以下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>实际执行如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ta <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>可以看到，函数声明会被提升到最顶部，但是函数表达式却不会被提升</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ReferenceError</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在这里要注意，把foo分配到具名函数下，但是具名函数下也无法在所在作用域中运行。上面函数的执行方式应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ReferenceError</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">...</span> self <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>函数优先</h3>\\n<p>从上面可以知道定义变量和声明函数都会触发提升，但是如果在重复声明的代码下，会出现什么情况呢</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">var</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里会出现<strong>1</strong>而不是<strong>2</strong>！因为函数会首先被提升，再到变量，所以执行顺序应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在一个普通的块( { ... } 的代码)，函数也会提升，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的<code class=\\\"language-text\\\">foo</code>和<code class=\\\"language-text\\\">bar</code>都不会按判断来声明函数，所以在判断声明函数并不可靠。</p>\\n<h2>作用域嵌套</h2>\\n<p>当一个块或者函数嵌套在另一个块或者函数中，就称为作用域嵌套。在当前作用域没有找到某个变量时，<strong>引擎</strong>就会在外层的作用域继续查找，直到找到该变量，或者抵达最外层（全局）作用域为止。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// b在函数中尚未定义，所以在上一个作用域中查找</span>\\n\\t<span class=\\\"token comment\\\">// 在全局中找到变量b，赋值</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<h1>函数作用域</h1>\\n<p>每个函数都有自己的执行环境，或者说函数有自己作用域。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而函数执行之后，栈将其环境弹出，把控制权返回之前的执行环境。函数作用域内的变量访问正是又这个执行机制控制着。而通过这一机制，能实现隐藏作用域中变量或者函数，规避同名标识符之间的冲突。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// i会从for块中找到变量容器，然后执行赋值</span>\\n\\t\\ti <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// 执行bar后会给i重新赋值3，满足i&lt;=10，函数死循环</span>\\n\\t\\t<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这时候只需要在bar内部修改<code class=\\\"language-text\\\">i = 3</code>为<code class=\\\"language-text\\\">var i = 3</code>，将i变为<code class=\\\"language-text\\\">bar</code>中的本地变量即可。除了新建一个函数去隐藏变量，还能通过匿名函数的特性去实现隐藏变量，社区中也称为<strong>IIFE</strong>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>还能当作函数调用传参</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>global<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>global<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>通过隐藏变量活着函数，能实现<strong>全局命名空间</strong>或者<strong>JS模块化</strong>(后面会讨论到)。</p>\\n<h1>块作用域</h1>\\n<p>在JS中块作用域并不常见，但是某些代码却经常会被误以为是块作用域，所以很容易造成理解上的错误，例如下面的常用代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10 bar</span>\\n</code></pre>\\n      </div>\\n<p>上面代码的<code class=\\\"language-text\\\">i</code>和<code class=\\\"language-text\\\">foo</code>其实都在外部作用域中定义的，而不是在代码块中定义的变量，所以平时在这些代码中定义变量应该是距离使用的地方越近越好。</p>\\n<h2>延长作用域链(块作用域)</h2>\\n<ul>\\n<li>\\n<p>with语句。with从对象中创建出来的对象只在with声明中有效。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">var</span> qs <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"?bar=true\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// href实际是location.href，只能在with内部使用</span>\\n\\t<span class=\\\"token keyword\\\">var</span> url <span class=\\\"token operator\\\">=</span> href <span class=\\\"token operator\\\">+</span> qs<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> url<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>try/catch中的catch分句会创造一个块作用域，声明的错误对象变量仅在catch内部有效。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token function\\\">undefined</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 强制执行一个错误操作</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>console.log(err); // ReferenceError</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">## let/const\\n在ES6中，引入了let和const，提供了除var以外的另一种声明变量的方式。用let/const声明的变量会绑定在所在的所用域中（通常是{ ... }内部，换句话说，let/const能劫持所在作用域。\\n```javascript\\n// 修改下上面的循环例子\\nfor(let i = 0; i &lt; 10; i++) {\\n\\tconsole.log(i);\\n}\\n\\nconsole.log(i); // ReferenceError</code></pre>\\n      </div>\\n<p>const在使用方法上跟len是一样，只是创建的值是固定的（常量）。后面任何修改值的操作都会报错。<strong>(注：const实际保证的并不是常量不能改变，而是变量的内存地址不能改变，所以对于复杂的类型object，也只能保证对象的指针地址是固定的，但是对象内部的数据结构则不能固定)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bar</span>\\n\\nfoo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>通过学习js中的作用域运行方式，了解变量在执行环境的声明周期，以及哪部分代码能访问其中的变量。能为后面学习<strong>闭包</strong>还有实现模块化打下基础。以下是关于作用域的几点总结：</p>\\n<ul>\\n<li>函数局部环境不仅有访问函数作用域的变量的权限，而且还有权访问其包含(父)环境的变量。</li>\\n<li>除全局、函数作用域外，还有比较少用的块作用域。</li>\\n</ul>\",\"htmlExcerpt\":\"<h1>前言</h1>\\n<p>使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。</p>\\n<h1>作用域是什么</h1>\\n<p>JS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为<strong>作用域</strong>。</p>\\n<h2>理解作用域执行过程</h2>\\n<p>如在<code>var a = 2</code>执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。</p>\\n<p>首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在<strong>作用域</strong>中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为<strong>引擎</strong>生成运行时所需的代码，代码用来处理<code>a = 2</code>这个赋值操作。引擎运行时会首先询问<strong>作用域</strong>当前作用集合是否有一个<code>a</code>的变量。如果是，<strong>引擎</strong>就会使用这个变量；如果不是，引擎会继续查找该变量。如果<strong>引擎</strong>找到<code>a</code>变量，就会赋值2。否则，<strong>引擎</strong>会抛出一个异常。</p>\\n<p><strong>总结</strong>：变量赋值分别有两个动作，<strong>编译器</strong>会在当前<strong>作用域</strong>中声明一个变量（如果之前没有声明过），然后在运行时引擎会在<strong>作用域</strong>中查找该变量，如果能找到就对变量进行赋值。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"js实现add(1)(2)(3)\",\"date\":\"2017-05-28\",\"category\":[\"javascript\"],\"tags\":null,\"path\":\"/post/add-chain\"},\"excerpt\":\"\\n# 题目\\n之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现\\n\\n```javascript\\nfunction add(x) {\\n\\tvar fn = function(y) {\\n\\t\\treturn add(x + y);\\n\\t}\\n\\n\\treturn fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"题目\"},{\"depth\":1,\"value\":\"实现方法\"}],\"html\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>实现方法</h1>\\n<p>这样写是可以实现调用方式，但是怎么<code class=\\\"language-text\\\">return x</code>呢，回来想还是一脸懵逼，于是上网找了点其他人的实现方式，发现他们是重写了<code class=\\\"language-text\\\">object</code>的<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>的方法。然后再跑了一遍。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">toString</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// chrome  function 6</span>\\n<span class=\\\"token comment\\\">// firefox function add/fn</span>\\n<span class=\\\"token comment\\\">// node    { [Number: 6] toString: [Function], valueOf: [Function] }</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 6</span>\\n</code></pre>\\n      </div>\\n<p>由此看出在不同客户端下返回的结果并不一样，并不是完美的结果，但是查阅了其他资料并没有其他十分好的解决办法，估计这道题的考查点是关于js深度的，比如原生对象里面的基本方法和<code class=\\\"language-text\\\">alert</code>, <code class=\\\"language-text\\\">console</code>会自动执行toString等方法。</p>\\n<p>另外，<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>方法其实是差不多的，返回的结果基本都是相同的，但是试了一下定义了两个不同的方法，发现总是会返回valueOf的值先，所以觉得toString应该是应用于valueOf的结果。</p>\",\"htmlExcerpt\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<pre><code class=\\\"language-javascript\\\">function add(x) {\\n    var fn = function(y) {\\n        return add(x + y);\\n    }\\n\\n    return fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"tags\":[\"javascript\"],\"path\":\"/post/js-promise\"},\"excerpt\":\"\\n老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，[promise](https://promisesaplus.com/)（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。\\n\\n下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。\\n\\n\\n\\n# 初步构建一个Promise\\n我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现\\n```javascript\\n// 例1\\nfunction getAsyncData() {\\n\\treturn new Promise(function(resolve, reject) {\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tresolve('promise done!')\\n\\t\\t}, 1000)\\n\\t})\\n}\\n\\ngetAsyncData().then(function(result) {\\n\\tconsole.log(result);\\n}).then(function() {\\n\\tconsole.log('done too!');\\n})\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"初步构建一个Promise\"},{\"depth\":1,\"value\":\"引入状态\"},{\"depth\":1,\"value\":\"串行promise\"},{\"depth\":1,\"value\":\"添加reject功能\"},{\"depth\":1,\"value\":\"总结\"},{\"depth\":2,\"value\":\"参考\"}],\"html\":\"<p>老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，<a href=\\\"https://promisesaplus.com/\\\">promise</a>（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。</p>\\n<p>下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。</p>\\n<h1>初步构建一个Promise</h1>\\n<p>我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 例1</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'promise done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'done too!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p><code class=\\\"language-text\\\">getAsyncData</code>函数中返回一个promise对象，然后通过<code class=\\\"language-text\\\">then</code>方法执行函数的回调，然后尝试实现一下这个基本的功能</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// promise.js</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Primose</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> callbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">done</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// 支持链式调用</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// push到队列的最底端，保证链式代码执行完后再执行方法</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>到这里就完成了promise的基础功能，然后执行一下看下有没有达到预期情况:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node promise\\npromise done<span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token keyword\\\">done</span> too<span class=\\\"token operator\\\">!</span>\\n</code></pre>\\n      </div>\\n<p>乍看一下，怎么有点像lazyman(js中比较有名的题目，可以自行百度一下) ，看来平时多读书还是有好处的（手动滑稽）v</p>\\n<h1>引入状态</h1>\\n<p>这里我们可以先看下<a href=\\\"https://promisesaplus.com/#requirements\\\">promise状态规范</a></p>\\n<p>promise必需在pending, fulfilled或者reject三个状态中的一个</p>\\n<ul>\\n<li>\\n<p>当promise在pending状态中</p>\\n<ul>\\n<li>可以变为fulfilled或者reject状态</li>\\n</ul>\\n</li>\\n<li>\\n<p>当promise在fulfilled中</p>\\n<ul>\\n<li>不能过渡为其他状态</li>\\n<li>必需返回一个值，并且不能改变</li>\\n</ul>\\n</li>\\n<li>\\n<p>当promise在reject中</p>\\n<ul>\\n<li>不能过渡为其他状态</li>\\n<li>必需返回一个失败原因，并且不能改变</li>\\n</ul>\\n</li>\\n</ul>\\n<p>从这里可以看出，我们需要添加一个<code class=\\\"language-text\\\">status</code>变量保存状态，并且随着代码执行更新状态。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tvalue <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tvalue <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>串行promise</h1>\\n<p>在执行promise的时候，经常会在<code class=\\\"language-text\\\">then</code>的方法里面执行另外一个promise，<em>串联执行promise应该是promise里面最有趣并且是最核心的功能了</em>。</p>\\n<p>串行promise指执行完一个异步函数达到fulfilled状态后，接着执行下一个promise，例如</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 接着例1</span>\\n\\n<span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>getAsyncData2<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'done too!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getAsyncData2</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'next promise done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>要实现这个功能，首先，我们，之前的<code class=\\\"language-text\\\">then</code>方法是直接把<code class=\\\"language-text\\\">this</code>返回出去，所以实现链式调用，执行起来的时候也扛扛的，没毛病，但如果then中执行下一个promise，这时候按上面的代码，应该是直接就return一个promise出去的，走不了下一步，所以<code class=\\\"language-text\\\">then</code>方法应该需要处理一下，promise的执行方式应该要变为：</p>\\n<ol>\\n<li>执行代码，将所有方法push到<code class=\\\"language-text\\\">callbacks</code>数组里面</li>\\n<li>如果<code class=\\\"language-text\\\">then</code>中是一个promise，把剩下的<code class=\\\"language-text\\\">callbacks</code>提交到这个promise中执行</li>\\n<li>再循环第一步</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// value = null,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttemp <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 顺序执行数组，如果是resolve返回value</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 如果是promise则把后面的then方法提交到下个promise中执行</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>temp <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\ttemp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\tvalue <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>添加reject功能</h1>\\n<p>因为不确定then方法中是否会添加reject的处理，所以选用了一个比较笨的方法，加一个<code class=\\\"language-text\\\">errDerrers</code>的数组，每次执行不管有没有方法<code class=\\\"language-text\\\">then</code>都<code class=\\\"language-text\\\">push</code>到数组里面，<code class=\\\"language-text\\\">resolve</code>一个方法就<code class=\\\"language-text\\\">shift</code>一个，跟成功的回调一样，当reject的时候，判断下当前的方法是不是一个可执行函数，如果是的话则执行。至于catch的方法按这个思路暂时没想到，后面想到再更新。修改的地方都有添加注释。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// value = null,</span>\\n\\t\\terror <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\terrDeffers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">,</span> rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 每次执行then都push一次</span>\\n\\t\\t\\t\\terrDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// reject的话直接执行</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'rejected'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">rejected</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">catch</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>errDeffer <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\terrDeffer <span class=\\\"token operator\\\">=</span> rejected<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttemp <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\terrDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 顺序执行数组，如果是resolve返回value</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 如果是promise则把后面的then方法提交到下个promise中执行</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>temp <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token comment\\\">// 成功的时候也要更新一下errDeffers数组</span>\\n\\t\\t\\t\\t\\t\\ttemp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> errDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\tvalue <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// reject方法</span>\\n\\t<span class=\\\"token comment\\\">// 判断rejected是否一个函数，是的话执行，不是的话抛出一个错误</span>\\n\\t<span class=\\\"token comment\\\">// reject也要提交到栈的最底端执行</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'rejected'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\terror <span class=\\\"token operator\\\">=</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> rejected <span class=\\\"token operator\\\">=</span> errDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Function]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Uncaught promise error!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\t<span class=\\\"token function\\\">rejected</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>找资料的时候看到<a href=\\\"http://tech.meituan.com/promise-insight.html\\\">美团技术团队博客的实现方式</a>采用了另外一种解决方式解决串行promise，后面接着研究下，有兴趣也可以自行看下。\\n实现promise应该有下面几个要点：</p>\\n<ol>\\n<li>函数的顺序执行</li>\\n<li>处理好状态（这部分感觉我的方法跟promiseA的状态要求有点偏差）</li>\\n<li>链式调用\\n这个例子只是根据promise的执行方式实现大概的功能，后面或许会根据promise规范去实现一个比较规范的demo。</li>\\n</ol>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://promisesaplus.com/#requirements\\\">Promises/A+</a></li>\\n<li><a href=\\\"http://tech.meituan.com/promise-insight.html\\\">剖析 Promise 之基础篇</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\\\">Javascript异步编程的4种方法</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，<a href=\\\"https://promisesaplus.com/\\\">promise</a>（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。</p>\\n<p>下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。</p>\\n<h1>初步构建一个Promise</h1>\\n<p>我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现</p>\\n<pre><code class=\\\"language-javascript\\\">// 例1\\nfunction getAsyncData() {\\n    return new Promise(function(resolve, reject) {\\n        setTimeout(function() {\\n            resolve('promise done!')\\n        }, 1000)\\n    })\\n}\\n\\ngetAsyncData().then(function(result) {\\n    console.log(result);\\n}).then(function() {\\n    console.log('done too!');\\n})\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"前端单元测试&Mocha指北\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"tags\":null,\"path\":\"/post/unit-test\"},\"excerpt\":\"\\n# 什么是单元-测试?\\n- 单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。\\n- 而测试，就是测试啦。\\n\\n所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。\\n\\n# 为什么要写单元测试？\\n单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"什么是单元-测试?\"},{\"depth\":1,\"value\":\"为什么要写单元测试？\"},{\"depth\":1,\"value\":\"干了这杯 \\\"Mocha\\\"\"},{\"depth\":2,\"value\":\"举个例子\"},{\"depth\":1,\"value\":\"小结\"}],\"html\":\"<h1>什么是单元-测试?</h1>\\n<ul>\\n<li>单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。</li>\\n<li>而测试，就是测试啦。</li>\\n</ul>\\n<p>所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。</p>\\n<h1>为什么要写单元测试？</h1>\\n<p>单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。</p>\\n<!-- more -->\\n<h1>干了这杯 \\\"Mocha\\\"</h1>\\n<p>mocha是一个js测试框架，除此外，类似的测试框架还有Jasmine、Karma、Tape等，至于为什么要介绍Mocha？因为我只懂这一个。\\n上代码前还要普及一下两个概念</p>\\n<ul>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%A1%8C%E4%B8%BA%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91\\\">BDD（Behavior Driven Development）</a>\\nBDD意为行为驱动开发，是一种敏捷软件开发技术，具体内容大家可以参考wikipedia的解释。</li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E6%96%B7%E8%A8%80_(%E7%A8%8B%E5%BC%8F)\\\">Assertion 断言</a>\\n断言，就是判断代码的执行结果与预期是否一致，不一致就抛出错误，说得简单点就是判断程序的真假。</li>\\n</ul>\\n<h2>举个例子</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.js</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> add\\n</code></pre>\\n      </div>\\n<p>通常测试脚本要与测试源码同名，比如add.js的测试脚本就是add.test.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.test.js</span>\\n<span class=\\\"token keyword\\\">const</span> add <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./add.js'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> expect <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>expect\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'加法函数测试'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1 + 1 等于 2'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>be<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'返回值是Number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>be<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>上面代码块就是测试脚本，可独立运行，测试脚本中应该包括一个或多个<code class=\\\"language-text\\\">describe</code>块，每个<code class=\\\"language-text\\\">describe</code>块应包括多个<code class=\\\"language-text\\\">it</code>块。\\n<code class=\\\"language-text\\\">describe</code>是测试套件，这个方法需要传两个参数，第一个为测试套件的名称<code class=\\\"language-text\\\">(&#39;加法函数测试&#39;)</code>，第二个是执行函数。\\n<code class=\\\"language-text\\\">it</code>块是测试用例，表示一个单独的测试，是测试的最小单位，第一个参数是测试用例的名称('1 + 1 等于 2')，第二个是执行函数。</p>\\n<p>然后在terminal下执行<code class=\\\"language-text\\\">mocha add.test.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-terminal\\\"><code class=\\\"language-terminal\\\">$ mocha add.test.js\\n\\n   加法函数测试\\n     √ 1 + 1 等于 2\\n     √ 返回值是Number\\n   2 passing (12ms)</code></pre>\\n      </div>\\n<p>如果我们改变一下<code class=\\\"language-text\\\">add.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.js</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">*</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> add\\n</code></pre>\\n      </div>\\n<p>然后再执行一下<code class=\\\"language-text\\\">mocha add.test.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-terminal\\\"><code class=\\\"language-terminal\\\">$ mocha add.test.js\\n\\n   加法函数测试\\n     √ 1 + 1 等于 2\\n     1) 返回值是Number\\n   1 passing (8ms)\\n   1 failing\\n\\n   1) 加法函数测试 返回值是Number:\\n       AssertionError: expected 2 to equal 3\\n       + expected - actual\\n\\n       -2\\n       +3\\n\\n       at Context.it(add.test.js:6:27)</code></pre>\\n      </div>\\n<p>这里也可以很明显看出哪个测试用例报错、还有报错的位置，这样在开发的时候开发人员就能很容易定位错误。</p>\\n<h1>小结</h1>\\n<p>从上面一个简单的例子可以看出，利用mocha实现自动化测试是很简单的。虽然前期开发需要花一点时间去写单元测试，但是后面提供的便利性足以将其弥补。</p>\",\"htmlExcerpt\":\"<h1>什么是单元-测试?</h1>\\n<ul>\\n<li>单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。</li>\\n<li>而测试，就是测试啦。</li>\\n</ul>\\n<p>所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。</p>\\n<h1>为什么要写单元测试？</h1>\\n<p>单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"使用nodejs写一个命令行程序\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"tags\":[\"nodejs\",\"bash\"],\"path\":\"/post/node-command-app\"},\"excerpt\":\"\\n> 原文译自[Smashing Magazine](https://www.smashingmagazine.com/) -- [[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)\\n\\n相信很多前端都听说过或者使用过[Gulp](http://www.gulpjs.com.cn/), [Angular CLI](https://cli.angular.io/), [Cordova](https://cordova.apache.org/), [Yeoman](http://yeoman.io/)或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用`ng new <project-name>`后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。\\n\\n在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用[SendGrid Api](https://github.com/sendgrid/sendgrid-nodejs)模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令\\n\\n\",\"headings\":[{\"depth\":2,\"value\":\"“Hello World”\"},{\"depth\":2,\"value\":\"处理命令行参数\"},{\"depth\":2,\"value\":\"运行时输入参数\"},{\"depth\":2,\"value\":\"模拟发送邮件\"},{\"depth\":2,\"value\":\"变成bash命令\"}],\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://www.smashingmagazine.com/\\\">Smashing Magazine</a> -- <a href=\\\"https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/\\\">[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)</a></p>\\n</blockquote>\\n<p>相信很多前端都听说过或者使用过<a href=\\\"http://www.gulpjs.com.cn/\\\">Gulp</a>, <a href=\\\"https://cli.angular.io/\\\">Angular CLI</a>, <a href=\\\"https://cordova.apache.org/\\\">Cordova</a>, <a href=\\\"http://yeoman.io/\\\">Yeoman</a>或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用<code class=\\\"language-text\\\">ng new &lt;project-name&gt;</code>后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。</p>\\n<p>在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用<a href=\\\"https://github.com/sendgrid/sendgrid-nodejs\\\">SendGrid Api</a>模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令</p>\\n<!-- more -->\\n<hr>\\n<h2>“Hello World”</h2>\\n<p>开始前，首先你得有node，如果没有，请自行安装下。node中自带npm，使用<a href=\\\"https://www.npmjs.com/\\\">npm</a>能安装许多开源的node模块。首先，使用npm创建一个node项目</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> init\\nname: broadcast\\nversion: 0.0.1\\ndescription: CLI utility to broadcast email\\nentry point: broadcast.js\\n</code></pre>\\n      </div>\\n<p>除这些参数外，npm还提供了其他如Git repository等参数，可根据自身需求设置输入。执行完<code class=\\\"language-text\\\">npm init</code>后，会发现在同目录下生成了一个<code class=\\\"language-text\\\">package.json</code>文件，文件里面包含了上面命令输入的信息。配置内容信息可以在<a href=\\\"https://docs.npmjs.com/files/package.json\\\">package.json文档</a>中找到。</p>\\n<p>然后，还是从最简单的Hello World入手。首先在同目录下建一个<code class=\\\"language-text\\\">broadcast.js</code>文件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello World!'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>然后在terminal中执行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast\\nHello World<span class=\\\"token operator\\\">!</span>\\n</code></pre>\\n      </div>\\n<p>well done, 根据<a href=\\\"https://docs.npmjs.com/files/package.json\\\">package.json文档</a>，我们可以找到一个<code class=\\\"language-text\\\">dependencies</code>参数，在这参数中你可以找到所有这项目需要用到的第三方模块和它们的版本号，上面也有提及到，我们需要用到模块去开发这个工具。最后开发完成，<code class=\\\"language-text\\\">package.json</code>应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0.0.1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"CLI utility to broadcast emails\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast.js\\\"</span>\\n    <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MIT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"dependencies\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"chalk\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^1.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"commander\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.9.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"csv\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^1.1.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"inquirer\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.0.0\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这几个模块 <a href=\\\"https://github.com/chalk/chalk\\\">Chalk</a>, <a href=\\\"https://github.com/tj/commander.js\\\">Commander</a>, <a href=\\\"https://github.com/sboudrias/Inquirer.js\\\">Inquirer</a>, <a href=\\\"http://www.adaltas.com/en/2012/08/21/node-csv-stable-version-0-1-0/\\\">CSV</a>的具体用处跟其他参数，可以自行查看。</p>\\n<h2>处理命令行参数</h2>\\n<p>node原生也有读取命令行的函数<a href=\\\"https://nodejs.org/docs/latest/api/process.html\\\"><code class=\\\"language-text\\\">process.argv</code></a>，但是解析参数是个繁琐的工作，所以我们会使用<a href=\\\"https://github.com/tj/commander.js\\\">Commander</a>去替代这些工作。Commande的另外一个好处就是不用额外的去写一个<code class=\\\"language-text\\\">--help</code>函数，只要定义了其他参数，<code class=\\\"language-text\\\">--help</code>函数就会自动生成。首先安装一下Commander和其他package</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> commander chalk csv inquirer --save\\n</code></pre>\\n      </div>\\n<p>然后修改<code class=\\\"language-text\\\">broadcast.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'commander'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'list of customers in CSV file'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>从上面可以看出，处理一个参数是十分简单的。我们定义了一个<code class=\\\"language-text\\\">--list</code>的参数，现在我们就能通过<code class=\\\"language-text\\\">--list</code>参数获取到命令行传过来的值。在这程序中，list应该是接收一个csv的地址参数，然后打印在console中。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --list ./test.csv\\n./test.csv\\n</code></pre>\\n      </div>\\n<p>从js中可以看到还有一个<code class=\\\"language-text\\\">version</code>参数，所以我们可以使用<code class=\\\"language-text\\\">--version</code>读取版本号。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --version\\n0.0.1\\n</code></pre>\\n      </div>\\n<p>又或者能使用<code class=\\\"language-text\\\">--help</code>获取app能接收的参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --help\\n\\n  Usage: broadcast <span class=\\\"token punctuation\\\">[</span>options<span class=\\\"token punctuation\\\">]</span>\\n\\n  Options:\\n\\n    -h, --help                 output usage information\\n    -V, --version              output the version number\\n    -l, --list <span class=\\\"token operator\\\">&lt;</span>list<span class=\\\"token operator\\\">></span>          list of customers <span class=\\\"token keyword\\\">in</span> CSV <span class=\\\"token function\\\">file</span>\\n</code></pre>\\n      </div>\\n<p>现在我们已经能够接收到命令行传递过来的参数了，下面我们会利用接收到的CSV文件地址，并使用<a href=\\\"http://www.adaltas.com/en/2012/08/21/node-csv-stable-version-0-1-0/\\\">CSV</a>模块处理CSV文件的内容。\\n我们会使用下面的比哦啊哥内容作为CSV文件的内容。使用CSV模块，会读取内容，并显示各列的内容。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>First name</th>\\n<th>Last name</th>\\n<th>Email</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Dwight</td>\\n<td>Schrute</td>\\n<td>dwight.schrute@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Jim</td>\\n<td>Halpert</td>\\n<td>jim.halpert@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Pam</td>\\n<td>Beesly</td>\\n<td>pam.beesly@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Ryan</td>\\n<td>Howard</td>\\n<td>ryan.howard@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Stanley</td>\\n<td>Hudson</td>\\n<td>stanley.hudson@dundermifflin.com</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>现在，更新下<code class=\\\"language-text\\\">broadcast.js</code>，使用CSV读取内容并打印在console</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'commander'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> csv <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'csv'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'List of customers in CSV'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\nstream\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> delimiter <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\",\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         <span class=\\\"token keyword\\\">const</span> firstname <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n         <span class=\\\"token keyword\\\">const</span> lastname <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n         <span class=\\\"token keyword\\\">const</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>firstname<span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>除csv模块外，还使用了node的<a href=\\\"https://nodejs.org/dist/latest-v7.x/docs/api/fs.html\\\">File System</a>模块读取文件内容，csv的<code class=\\\"language-text\\\">parse</code>方法把列数据解析为数组，然后在terminal中运行一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast.js --list ./test.csv\\nDwight Schrute dwight.schrute@dundermifflin.com\\nJim Halpert jim.halpert@dundermifflin.com\\nPam Beesly pam.beesly@dundermifflin.com\\nRyan Howard ryan.howard@dundermifflin.com\\nStanley Hudson stanley.hudson@dundermifflin.com\\n</code></pre>\\n      </div>\\n<h2>运行时输入参数</h2>\\n<p>上面已经实现了获取命令行参数，但如果想在运行时候接收参数值的话我们就需要另外一个模块<a href=\\\"https://github.com/sboudrias/Inquirer.js\\\">inquirer.js</a>，通过这个模块，用户可以自定义多种参数类型，如文本，密码，单选或者多选列表等。</p>\\n<p>下面的demo会通过inquirer接收邮件发送人的名字，email还有邮件主题。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> inquirer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inquirer'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> questions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sender.email\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Sender's email address - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sender.name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Sender's name - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"subject\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Subject - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n\\nprogram\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'List of customers in CSV'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 储存CSV数据</span>\\n<span class=\\\"token keyword\\\">const</span> contactList <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> delimiter <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\",\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nstream\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> name <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">let</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n    contactList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token punctuation\\\">:</span> name<span class=\\\"token punctuation\\\">,</span> email <span class=\\\"token punctuation\\\">:</span> email <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'end'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inquirer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span>questions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>answers<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>answers<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Inquire.js的<code class=\\\"language-text\\\">prompt</code>方法接受一个数组参数，数组里可以自定义运行时需要接受的问题参数，在这demo里面，我们想知道发送者的名字还要email还有邮件主题，所以定义了一个<code class=\\\"language-text\\\">questions</code>的数组来储存问题，从对象里面可以看到有一个<code class=\\\"language-text\\\">input</code>的参数，除此外还可以接受<code class=\\\"language-text\\\">password</code>等其他类型，具体可以查询一下<a href=\\\"https://github.com/SBoudrias/Inquirer.js/\\\">inquirer的文档</a>。此外，参数<code class=\\\"language-text\\\">name</code>保存input的key值。<code class=\\\"language-text\\\">prompt</code>方法会返还一个promise对象，promise中会返回一个<code class=\\\"language-text\\\">answer</code>变量，里面带有刚才输入的值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast -l input/employees.csv\\n? Sender<span class=\\\"token string\\\">'s email address -  kitssang_demo@163.com\\n? Sender'</span>s name -  kit\\n? Subject - Hello World\\n<span class=\\\"token punctuation\\\">{</span> sender:\\n   <span class=\\\"token punctuation\\\">{</span> email: <span class=\\\"token string\\\">'  kitssang_demo@163.com'</span>,\\n     name: <span class=\\\"token string\\\">'kit'</span> <span class=\\\"token punctuation\\\">}</span>,\\n  subject: <span class=\\\"token string\\\">'Hello World'</span> <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>模拟发送邮件</h2>\\n<p>由于原文使用的<code class=\\\"language-text\\\">sendgrid</code>没有跑通，所以只组装了一下数据模拟了发送邮件。原本的第五部分也在这里一起用上了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'list of customers in CSV file'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sendEmail</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> subject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> sender <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">green</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> receiver <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">green</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>to<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>to<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> theme <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">blue</span><span class=\\\"token punctuation\\\">(</span>subject<span class=\\\"token punctuation\\\">)</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>sender<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> send a mail to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>receiver<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> and the subject of the email is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>theme<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 储存CSV数据</span>\\n<span class=\\\"token keyword\\\">let</span> concatList <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    delimiter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">','</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> name <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' '</span> <span class=\\\"token operator\\\">+</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">const</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n\\n    concatList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> name<span class=\\\"token punctuation\\\">,</span>\\n      email<span class=\\\"token punctuation\\\">:</span> email\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'end'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inquirer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span>questions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>ans<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> concatList<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>concatList<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> ans<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ans<span class=\\\"token punctuation\\\">.</span>subject<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>由于没有异步请求，<code class=\\\"language-text\\\">async</code>模块没有用上，另外使用了<code class=\\\"language-text\\\">chalk</code>模块改变了console打印结果的颜色。</p>\\n<h2>变成bash命令</h2>\\n<p>至此，整个工具已经基本完成，但是如果想像一个普通的bash命令(不加<code class=\\\"language-text\\\">$ node xx</code>)执行，还需要做以下操作。首先，添加<a href=\\\"https://zh.wikipedia.org/wiki/Shebang\\\">shebang</a>在js的头部，让bash知道如何执行这个文件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">#<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">/</span>usr<span class=\\\"token operator\\\">/</span>bin<span class=\\\"token operator\\\">/</span>env node\\n\\n<span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"commander\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> inquirer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"inquirer\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>然后再配置一下<code class=\\\"language-text\\\">package.json</code>使代码可运行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">…\\n  <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"CLI utility to broadcast emails\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"bin\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"broadcast\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./broadcast.js\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n…\\n</code></pre>\\n      </div>\\n<p>从代码可以看到加了一个<a href=\\\"https://docs.npmjs.com/files/package.json#bin\\\"><code class=\\\"language-text\\\">bin</code></a>的参数，这个参数可以使broadcast命令与broadcast.js建立连接。</p>\\n<p>最后一步，在全局安装一下依赖包。在项目目录运行一下下面的命令。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g\\n</code></pre>\\n      </div>\\n<p>然后测试一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ broadcast --help\\n</code></pre>\\n      </div>\\n<p>需要注意的是，在开发时候如果使用<code class=\\\"language-text\\\">commaner</code>默认给出的命令执行<code class=\\\"language-text\\\">broadcast</code>则在代码中所做的任何更改都是看不见的。假如输入<code class=\\\"language-text\\\">which broadcast</code>，你会发现地址不是你当前目录，所以这时应该要用<code class=\\\"language-text\\\">npm link</code>去查看命令的目录映射。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://www.smashingmagazine.com/\\\">Smashing Magazine</a> -- <a href=\\\"https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/\\\">[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)</a></p>\\n</blockquote>\\n<p>相信很多前端都听说过或者使用过<a href=\\\"http://www.gulpjs.com.cn/\\\">Gulp</a>, <a href=\\\"https://cli.angular.io/\\\">Angular CLI</a>, <a href=\\\"https://cordova.apache.org/\\\">Cordova</a>, <a href=\\\"http://yeoman.io/\\\">Yeoman</a>或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用<code>ng new &#x3C;project-name></code>后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。</p>\\n<p>在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用<a href=\\\"https://github.com/sendgrid/sendgrid-nodejs\\\">SendGrid Api</a>模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"React-todo demo\",\"date\":\"2016-03-02\",\"category\":[\"js framework\"],\"tags\":[\"React\",\"Webpack\",\"js框架\"],\"path\":\"/post/react-todo\"},\"excerpt\":\"\\n好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。\\n\\n### 小科普\\n什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！\\n\\n\",\"headings\":[{\"depth\":3,\"value\":\"小科普\"},{\"depth\":3,\"value\":\"Demo功能需求\"},{\"depth\":3,\"value\":\"开始\"},{\"depth\":4,\"value\":\"配置webpack\"},{\"depth\":4,\"value\":\"上代码\"},{\"depth\":4,\"value\":\"App生命 - state\"},{\"depth\":4,\"value\":\"其他组件\"},{\"depth\":3,\"value\":\"总结\"}],\"html\":\"<p>好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。</p>\\n<h3>小科普</h3>\\n<p>什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！</p>\\n<!-- more -->\\n<h3>Demo功能需求</h3>\\n<ul>\\n<li>input输入内容，回车键或按钮增加一条todo</li>\\n<li>checkbox添加完成状态</li>\\n<li>移动到列表时显示删除</li>\\n<li>显示todo总数和已经完成数</li>\\n<li>list全选</li>\\n<li>清除已完成</li>\\n<li>添加动画效果</li>\\n</ul>\\n<h3>开始</h3>\\n<p>开始需要npm安装一下等下要用的packages，如果是checkout我的demo，就动动手指头，install一下，我的demo地址是<a href=\\\"https://github.com/kitwon/react-todo\\\">https://github.com/kitwon/react-todo</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span>\\n</code></pre>\\n      </div>\\n<h4>配置webpack</h4>\\n<p>所有东西安装完成之后首先就是配置<a href=\\\"http://webpack.github.io/docs/\\\">webpack</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tentry <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./src/entry.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\toutput <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tpath <span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"out\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tpublicPath <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./out/\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tfilename <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bundle.js\\\"</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\texternals <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\treact <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"React\\\"</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\tmodule <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tloaders <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.js$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jsx\\\"</span><span class=\\\"token punctuation\\\">,</span>include<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/src/</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"style!css\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.less$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"style!css!less\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.(jpg|png)$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"url?limit=8192\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">]</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>从上面可以看到，webpack的入口文件是entry.js，打包输出的文件是bundle.js，external属性是告诉webpack，当API已经存在的时候，使用全局变量，并不作任何操作。</p>\\n<p>loader的话没啥，看文档就知道，各种编译打包。具体使用方法可以看官方文档。</p>\\n<h4>上代码</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tReactDOM <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../less/app.less'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppFooter <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppFooter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tAppHeader <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppHeader'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tItemMain <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./ItemMain'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">var</span> App <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\tgetInitialState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttodoItem <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\tisAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//添加todo</span>\\n\\taddItem <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> todoList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>isAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t <span class=\\\"token comment\\\">//更改todo状态</span>\\n\\tchangeTodoState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">,</span> isAllChange<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// isAllChange = false;</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>isAllChange<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttodoItem<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>todo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\ttodo<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">=</span> isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> todo<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tisAllChecked <span class=\\\"token punctuation\\\">:</span> isDone\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">=</span> isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allChecked</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//删除todo</span>\\n\\tdeleteTodo <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> newTodo <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>todoList<span class=\\\"token punctuation\\\">:</span> newTodo<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//清楚已完成</span>\\n\\tclearDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> doneList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>todoItem<span class=\\\"token punctuation\\\">:</span> doneList<span class=\\\"token punctuation\\\">,</span> isAllChecked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//全部完成</span>\\n\\tallChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> allCheck <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>allCheck<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>isAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    \\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t<span class=\\\"token keyword\\\">var</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t\\ttodoLength <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    \\t\\t\\tdoneLength <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    \\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span>\\n    \\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    \\t    \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    \\t        \\t<span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"panel\\\"</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>header  className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"mainHeader\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span>h2<span class=\\\"token operator\\\">></span>Webpack <span class=\\\"token operator\\\">+</span> React TODO Demo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>AppHeader addItem<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>addItem<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>ItemMain itemList<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t    \\t<span class=\\\"token operator\\\">&lt;</span>AppFooter <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> isAllChecked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isAllChecked<span class=\\\"token punctuation\\\">}</span> clearDone<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>clearDone<span class=\\\"token punctuation\\\">}</span> changeAllState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    \\t    \\t<span class=\\\"token punctuation\\\">)</span>\\n    \\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"app\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">//渲染</span>\\n</code></pre>\\n      </div>\\n<p>从代码上面可以看到各种require，没加载commonjs、seajs或其他模块化工具，为什么能直接require呢，而且还有require less，没错，webpack就是那么暴力！js后面都会打包好一个文件，样式都会加载到html里面，做spa时候，和react简直绝配。</p>\\n<h4>App生命 - state</h4>\\n<p>React主流思想就是父组件控制state，然后通过props传递给子组建，所以简单来说界面就像状态机，只要更新state，然后根据新的state重新渲染界面，不需要操作dom，所以react高性能原因也是因为这个。\\n从最上代码就可以看出父组件中的定义的方法基本是整个todo的功能了，然后render方法即渲染html和组件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token operator\\\">&lt;</span>ItemMain itemList<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>然后取一小段渲染组件代码（上面代码）就可发现，父组件向ItemMain这个组件传了4个属性，其中itemList为state，只要todoItem一更新，react就会重新渲染这个组件，其他三个为方法，方法更新也会重新渲染组件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ItemMain.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./Items'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> ItemMain <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>ul className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"itemList\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">{</span>_this<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>itemList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>todo<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>Items <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>todo<span class=\\\"token punctuation\\\">}</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>_this<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>这里不注释代码不高亮，比较奇葩，各位官人将就着看<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> ItemMain<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看这里估计有点蒙，我自己看的时候也有点蒙，因为太久的代码了哈哈哈。\\n这个js只有一个循环Item的逻辑，首先看看<code class=\\\"language-text\\\">{...todo}</code>这个prop，这个是把itemList[i]中的<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">数组对象解构</a>，然后传到item里面，如果没有...这个字符，则需要</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">\\t<span class=\\\"token operator\\\">&lt;</span>Items text<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span> isDone<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">}</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>proprs<span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>具体数据大家可以在代码里面console打印一下，这样印象会更深。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// item.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Items <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\thandleChange <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> isDone <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeTodoState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleDeleteTodo <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deleteTodo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> doneStyle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>textDecoration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'line-through'</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>textDecoration <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>li key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">}</span> onMouseOver<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerMouseOver<span class=\\\"token punctuation\\\">}</span> onMouseOut<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerMouseOut<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"checkbox\\\"</span> checked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>span style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>doneStyle<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-default delete-item\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleDeleteTodo<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> Items<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这个就是js里面有两个方法，一个是改变状态，一个是删除当前todo，这这能发现，两个方法都是执行了又父组件传过来的方法，如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeTodoState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>执行这个函数，state就会更新，react就会根据状态重新渲染组件</p>\\n<h4>其他组件</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// AppHeader.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppHeader <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\tgetInitialState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandlerKeyUp <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>keyCode <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> newTodoItem <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> value<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tisDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\tevent<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addItem</span><span class=\\\"token punctuation\\\">(</span>newTodoItem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleChange <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text <span class=\\\"token punctuation\\\">:</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandlerClick <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> newTodoItem <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\tisDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addItem</span><span class=\\\"token punctuation\\\">(</span>newTodoItem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"appHeader from-group\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"test\\\"</span> className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"form-control\\\"</span> onKeyUp<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerKeyUp<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">}</span> placeholder<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"add one todo\\\"</span> value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-primary\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>add one<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> AppHeader<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// AppHeader.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppFooter <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\thandleClick <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clearDone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleAllState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeAllState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"appFooter\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"checkbox\\\"</span> checked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isAllChecked<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleAllState<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>doneLength<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>已经完成 <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>todoLength<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>总数\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-default btn-tiny pull-right\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>clean done<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> AppFooter<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Header Footer的方法都是大同小异，输入改变state，然后存起来，执行相应操作时候通过props的方法传给父组件，然后重新渲染界面。</p>\\n<h3>总结</h3>\\n<p>回头看代码，react的组件化相比现在的组件化思想真的先进很多。React通过父组件来控制状态，并通过props传递给子组件。因此我们能很容易看出我们的事件属于哪个组件管理，然后修改相应的方法，维护起来相当高效，相比现在的控制dom，每次修改按钮的方法，都需要先找到id或者class，然后绑定响应的方法，假如页面id或者class改变，页面逻辑又非常复杂的话，修改起来是相当麻烦的。\\nReact凭着出色的设计思想和性能，我相信不久就会成为主流的移动端开发方式，至于PC端，大天朝你懂的。</p>\",\"htmlExcerpt\":\"<p>好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。</p>\\n<h3>小科普</h3>\\n<p>什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！</p>\\n\"}}],\"page\":1,\"pages\":1,\"total\":16,\"limit\":20}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---archive-1-997df99d2d3a86c11f76.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"\\n作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。\\n\\n# something useful\\n1. 使用`eslint --fix`格式化文件\\n**eslint**虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下`eslint --fix`这个命令就好了，大部分代码都会根据规范格式化掉。\\n\\n\",\"frontmatter\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"path\":\"/post/pre-commit-hook\"}}},{\"node\":{\"excerpt\":\"\\n> 原文译自[10 Tips for Javascript Debugging Like a PRO with Console](https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6) - Yotam Kadishay\\n\\n在日常开发里，我们经常需要使用`console`调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些`console`的高级用法去更好的做调试工作和定位问题。\\n\\n我们都知道`console`的几个常用的方法\\n\\n```javascript\\nconsole.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n```\\n\\n除这些简单的使用外，下面几个`console`的用法希望能帮助你更好的调试你的应用。\\n\\n\",\"frontmatter\":{\"title\":\"10个console的高级使用方法\",\"date\":\"2018-03-19\",\"category\":[\"javascript\"],\"path\":\"/post/10tips-for-console\"}}},{\"node\":{\"excerpt\":\"\\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\\n\\n# 项目构建\\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\\n\\n\",\"frontmatter\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"path\":\"/post/2017-review\"}}},{\"node\":{\"excerpt\":\"\\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\\n\\n----\\n\\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\\n\\n# 几个重要概念\\n## 60fps与设备刷新率\\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\\n\\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\\n\\n\",\"frontmatter\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"path\":\"/post/60fps-web-app\"}}},{\"node\":{\"excerpt\":\"\\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\\n\\n# 配置\\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\\n```bash\\n$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n```\\n\\n\",\"frontmatter\":{\"title\":\"在vue项目中使用jest进行单元测试\",\"date\":\"2017-08-18\",\"category\":[\"前端工具\"],\"path\":\"/post/vue-jest-test\"}}},{\"node\":{\"excerpt\":\"\\n# 类理论\\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\\n\\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\\n\\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\\n\\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\\n\\n## js中实现类复制(混入)\\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"path\":\"/post/js-class\"}}},{\"node\":{\"excerpt\":\"\\n# 关于this\\n\\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\\n\\n# this的指向\\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\\n\\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\\n```javascript\\nfunction baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n```\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript - this\",\"date\":\"2017-06-27\",\"category\":null,\"path\":\"/post/js-this\"}}},{\"node\":{\"excerpt\":\"\\nwebpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。\\n\\n# 从webpack1中迁移\\n官方已经给出了详细的[迁移指南](https://webpack.js.org/guides/migrating/)，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。\\n\\n## 配置文件\\n如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。\\n\\n### `module.loaders`变成`module.rules`\\n旧的`module.loader`被`module.rules`取代，后者允许配置`loader`更多选项，具体查看文档[module.rules](https://webpack.js.org/configuration/module/#module-rules)\\n\\n```javascript\\n// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n```\\n\\n\",\"frontmatter\":{\"title\":\"webpack2新特性&迁移\",\"date\":\"2017-06-24\",\"category\":[\"前端工具\"],\"path\":\"/post/webpack2\"}}},{\"node\":{\"excerpt\":\"\\n# 什么是闭包\\n记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。\\n\\n> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）\\n\\n然后看个例子\\n```javascript\\nfunction foo() {\\n\\tvar a = 2;\\n\\n\\tfuntion bar() {\\n\\t\\tconsole.log(a);\\n\\t}\\n\\n\\tbar();\\n}\\n\\nfoo();\\n```\\n如果按上面第一条的定义，这里一定是生成了闭包，但是**确切的说并不是**，这里最准确的说是`bar`对`a`的引用方式是词法作用域的查找规则，而这些只是**闭包**的一部分。然后再看清晰闭包的例子\\n\\n```javascript\\nfucntion foo() {\\n\\tvar a = 2;\\n\\n\\tfunction bar() {\\n\\t\\tconsole.log(a)\\n\\t}\\n\\n\\treturn bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n```\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript-闭包\",\"date\":\"2017-06-14\",\"category\":null,\"path\":\"/post/js-closures\"}}},{\"node\":{\"excerpt\":\"\\n之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。\\n\\n# 主要需求\\n这个demo中爬虫有3个主要模块，**URL管理器**、**下载器**、**解析器**\\n* URL管理器主要处理爬取的URL的状态。\\n* 下载器会通过**URL管理器**传送过来有效URL进行下载。\\n* 解析器会将**下载器**下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给**URL管理器**进行重复操作。\\n\\n## 入口程序\\n`spider_main`文件为程序入口，处理整个爬虫的运行逻辑\\n\\n\",\"frontmatter\":{\"title\":\"用python写一个简单爬虫\",\"date\":\"2017-06-11\",\"category\":null,\"path\":\"/post/python-crawler\"}}},{\"node\":{\"excerpt\":\"\\n# 前言\\n使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。\\n\\n# 作用域是什么\\nJS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为**作用域**。\\n\\n\\n\\n## 理解作用域执行过程\\n如在`var a = 2`执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。\\n\\n首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在**作用域**中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为**引擎**生成运行时所需的代码，代码用来处理`a = 2`这个赋值操作。引擎运行时会首先询问**作用域**当前作用集合是否有一个`a`的变量。如果是，**引擎**就会使用这个变量；如果不是，引擎会继续查找该变量。如果**引擎**找到`a`变量，就会赋值2。否则，**引擎**会抛出一个异常。\\n\\n**总结**：变量赋值分别有两个动作，**编译器**会在当前**作用域**中声明一个变量（如果之前没有声明过），然后在运行时引擎会在**作用域**中查找该变量，如果能找到就对变量进行赋值。\\n\\n\",\"frontmatter\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"path\":\"/post/js-scope\"}}},{\"node\":{\"excerpt\":\"\\n# 题目\\n之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现\\n\\n```javascript\\nfunction add(x) {\\n\\tvar fn = function(y) {\\n\\t\\treturn add(x + y);\\n\\t}\\n\\n\\treturn fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n```\\n\\n\",\"frontmatter\":{\"title\":\"js实现add(1)(2)(3)\",\"date\":\"2017-05-28\",\"category\":[\"javascript\"],\"path\":\"/post/add-chain\"}}},{\"node\":{\"excerpt\":\"\\n老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，[promise](https://promisesaplus.com/)（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。\\n\\n下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。\\n\\n\\n\\n# 初步构建一个Promise\\n我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现\\n```javascript\\n// 例1\\nfunction getAsyncData() {\\n\\treturn new Promise(function(resolve, reject) {\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tresolve('promise done!')\\n\\t\\t}, 1000)\\n\\t})\\n}\\n\\ngetAsyncData().then(function(result) {\\n\\tconsole.log(result);\\n}).then(function() {\\n\\tconsole.log('done too!');\\n})\\n```\\n\\n\",\"frontmatter\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"path\":\"/post/js-promise\"}}},{\"node\":{\"excerpt\":\"\\n# 什么是单元-测试?\\n- 单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。\\n- 而测试，就是测试啦。\\n\\n所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。\\n\\n# 为什么要写单元测试？\\n单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。\\n\\n\",\"frontmatter\":{\"title\":\"前端单元测试&Mocha指北\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"path\":\"/post/unit-test\"}}},{\"node\":{\"excerpt\":\"\\n> 原文译自[Smashing Magazine](https://www.smashingmagazine.com/) -- [[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)\\n\\n相信很多前端都听说过或者使用过[Gulp](http://www.gulpjs.com.cn/), [Angular CLI](https://cli.angular.io/), [Cordova](https://cordova.apache.org/), [Yeoman](http://yeoman.io/)或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用`ng new <project-name>`后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。\\n\\n在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用[SendGrid Api](https://github.com/sendgrid/sendgrid-nodejs)模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令\\n\\n\",\"frontmatter\":{\"title\":\"使用nodejs写一个命令行程序\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"path\":\"/post/node-command-app\"}}},{\"node\":{\"excerpt\":\"\\n好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。\\n\\n### 小科普\\n什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！\\n\\n\",\"frontmatter\":{\"title\":\"React-todo demo\",\"date\":\"2016-03-02\",\"category\":[\"js framework\"],\"path\":\"/post/react-todo\"}}}]}},\"pathContext\":{\"edgesLen\":16,\"tagsLen\":14,\"categoryLen\":6,\"nodes\":[{\"node\":{\"frontmatter\":{\"title\":\"使用pre-commit实现提交前验证或自动部署代码\",\"date\":\"2018-03-29\",\"category\":[\"tools\"],\"tags\":[\"自动化\",\"前端工具\"],\"path\":\"/post/pre-commit-hook\"},\"excerpt\":\"\\n作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。\\n\\n# something useful\\n1. 使用`eslint --fix`格式化文件\\n**eslint**虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下`eslint --fix`这个命令就好了，大部分代码都会根据规范格式化掉。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"something useful\"},{\"depth\":1,\"value\":\"Pre-commit hook\"},{\"depth\":2,\"value\":\"husky + lint-stage\"},{\"depth\":2,\"value\":\"集成prettier和Jest\"},{\"depth\":1,\"value\":\"Last\"},{\"depth\":2,\"value\":\"相关文档\"}],\"html\":\"<p>作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。</p>\\n<h1>something useful</h1>\\n<ol>\\n<li>使用<code class=\\\"language-text\\\">eslint --fix</code>格式化文件\\n<strong>eslint</strong>虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下<code class=\\\"language-text\\\">eslint --fix</code>这个命令就好了，大部分代码都会根据规范格式化掉。</li>\\n</ol>\\n<!-- more -->\\n<ol start=\\\"2\\\">\\n<li>\\n<p>使用各种编辑器、IDE插件\\n上方方法虽好，但是我们还是要从源头上解决问题，培养每个人的代码风格以及习惯，这时候插件就能帮住我们在写代码的时候及时发现，也不用看到一大片错误了。</p>\\n</li>\\n<li>\\n<p>使用<strong>prettier</strong>格式化代码\\nPrettier可以帮助我们做一些代码格式化的工作，如代码缩进，双引号变单引号等一些代码格式化工作，但是有些配置项与eslint是重复的，下面会介绍到如何解决。具体配置项可以查看<a href=\\\"https://prettier.io/docs/en/install.html\\\">官网文档</a>。</p>\\n</li>\\n</ol>\\n<p>虽然有很多方法提醒我们注意代码质量，但是有时候这并不能阻止我们把有linting error的代码提交到仓库上。有时候没有什么大问题，但是如果是使用YUI压缩或者其他代码检查工具导致发布失败，我们将会需要用大量地时间去找到n个人提交的代码中的1个不显眼的语法错误。</p>\\n<h1>Pre-commit hook</h1>\\n<p>所以，什么是<strong>pre-commit hook</strong>？其实Git给我门提供了很多钩子，比如pre-commit这个，就是提交前，还有提交后，其他钩子可自行查<a href=\\\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\\\">Git - Git 钩子</a>。(SVN暂时无能为力，不过Google中有提供解决方案，但是看过一下实现起来颇麻烦的，大家有兴趣可以自行查找一下)</p>\\n<h2>husky + lint-stage</h2>\\n<p>假设你的项目中已经有了eslint和使用vue，然后我们需要安装两个package</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> husky lint-stage --save-dev\\n\\n<span class=\\\"token comment\\\"># or use yarn</span>\\n$ yarn add husky lint-stage -D\\n</code></pre>\\n      </div>\\n<p><strong>1.</strong>    然后在<code class=\\\"language-text\\\">package.json</code>文件中添加如下配置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>2.</strong>    然后随便找个文件删掉两个缩进空格，然后跑下提交命令<code class=\\\"language-text\\\">git commit -am &#39;test precommit&#39;</code>，此时应该可以看到下图的运行及报错。</p>\\n<p>⚠️ 这里的错误大家可以看到是preiiter抛出的，是因为我的配置文件已经集成了prettier，如何集成下方有介绍。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/pre-commit-hook/lint-error.jpg\\\" alt=\\\"pre-commit-error\\\"></p>\\n<p>如果想使用eslint自动修复错误，可以修改成如下配置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --fix --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"git add\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样修正好的文件就会重新跑一遍add命令，我们只需重按一下⬆️键重新跑一下命令提交即可，perfect。</p>\\n<h2>集成prettier和Jest</h2>\\n<p><strong>1.</strong>    prettier虽然和eslint有很多共同配置，但是prettier还可以对<code class=\\\"language-text\\\">vue template</code>和样式文件做验证和格式化，更多配置方式可以查看<a href=\\\"https://prettier.io/docs/en/index.html\\\">文档</a>，下面只介绍快速集成eslint和prettier的方式。首先我们需要安装<code class=\\\"language-text\\\">eslint-plugin-prettier</code>和<code class=\\\"language-text\\\">eslint-config-prettier</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> eslint-plugin-prettier eslint-config-prettier --save-dev\\n</code></pre>\\n      </div>\\n<p>然后修改我们的<code class=\\\"language-text\\\">.eslintrc.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token string\\\">\\\"extends\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"plugin:prettier/recommended\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后重新执行上方配置的第二部就可以看到结果了。</p>\\n<p><strong>2.</strong>    集成Jest做unit test。为什么这里也会抽出单独讲呢，理论上我们只需在配置中加段<code class=\\\"language-text\\\">npm run unit</code>就行了，但是运行时候会发现Jest会提升没有找到测试文件的情况。此时我们需要修改我们的npm script，给jest cli添加一个<code class=\\\"language-text\\\">--findRelatedTests</code>的参数。官网对这参数的解释是<strong>Useful for pre-commit hook integration to run the minimal amount of tests necessary.</strong> ，看起来是为pre-commit提供的特殊命令，but why🤷🏼‍</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"script\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"unit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jest --config test/jest.conf.js --findRelatedTests\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --fix --ext .js,.vue\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"precommit\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"lint-staged\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"lint-staged\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">\\\"*.{js|vue}\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"npm run lint\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"git add\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"npm run unit\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Last</h1>\\n<p>参照上面几步，便很容易的实现提交前验证，想整合打包等功能也十分简单，只需要在<code class=\\\"language-text\\\">lint-stage</code>中添加<code class=\\\"language-text\\\">npm run *</code>或者集成其他命令。我们也可以看到lint-stage可以通过<code class=\\\"language-text\\\">glob</code>的语法区分文件类型执行对应的script，大家可以自由发挥实现一下自动部署。</p>\\n<h2>相关文档</h2>\\n<ul>\\n<li><a href=\\\"https://prettier.io/docs/en/eslint.html\\\">prettier- Integrating with ESLint</a></li>\\n<li><a href=\\\"https://github.com/typicode/husky/tree/master\\\">Husky</a></li>\\n<li><a href=\\\"https://www.npmjs.com/package/lint-staged\\\">lint-stage</a></li>\\n<li><a href=\\\"https://facebook.github.io/jest/docs/en/cli.html#findrelatedtests-spaceseparatedlistofsourcefiles\\\">Jest Cli Options</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>作为一个程序员，想必每个都有自己的编码风格。有风格虽好，但这问题令很多项目管理者头疼，不一样的代码风格及缩进，必会降低代码可读性，从而间接降低效率。但是这个问题都难不到我们伟大的程序员，很多如eslint，prettier等库的出现帮我们去解决问题。很多cli在生成初始项目时都会给我们加上eslint、csslint等，这不就能解决我们的问题了吗？too young too simple，每保存一次就弹出一个错误，还是一大堆英文，估计大部分人心里就默默一句what the fuck is that了，从而就导致我们嘴上虽很强硬的说着要规范我们的代码风格，身体却很诚实地默默把各种lint的配置关掉🤷🏼‍。\\n所以在这篇文章里，会给大家提供一些好用的方法，使各位重拾定规范时候的激情。</p>\\n<h1>something useful</h1>\\n<ol>\\n<li>使用<code>eslint --fix</code>格式化文件\\n<strong>eslint</strong>虽好，但是对规范还没适应的同学却是一个难题，每写一遍都弹个黑白屏出来，特别英文不好的，估计半天都不知道哪里出问题，这样子下来估计半天没写几行代码。这时候其实我们可以贴心地把配置项注释掉，只有提交前跑一下<code>eslint --fix</code>这个命令就好了，大部分代码都会根据规范格式化掉。</li>\\n</ol>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"10个console的高级使用方法\",\"date\":\"2018-03-19\",\"category\":[\"javascript\"],\"tags\":null,\"path\":\"/post/10tips-for-console\"},\"excerpt\":\"\\n> 原文译自[10 Tips for Javascript Debugging Like a PRO with Console](https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6) - Yotam Kadishay\\n\\n在日常开发里，我们经常需要使用`console`调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些`console`的高级用法去更好的做调试工作和定位问题。\\n\\n我们都知道`console`的几个常用的方法\\n\\n```javascript\\nconsole.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n```\\n\\n除这些简单的使用外，下面几个`console`的用法希望能帮助你更好的调试你的应用。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"Tip #1 console.trace()\"},{\"depth\":1,\"value\":\"Tip #2 console.time() && console.timeEnd()\"},{\"depth\":1,\"value\":\"Tip #3 console.memory()\"},{\"depth\":1,\"value\":\"Tip #4 console.profile(‘profileName’) & console.profileEnd(‘profileName’)\"},{\"depth\":1,\"value\":\"Tip #5 console.count(\\\"STUFF I COUNT\\\")\"},{\"depth\":1,\"value\":\"Tip #6 console.assert(false, “Log me!”)\"},{\"depth\":1,\"value\":\"Tip  #7 console.group(‘group’) & console.groupEnd(‘group’)\"},{\"depth\":1,\"value\":\"Tip #8 字符串替换\"},{\"depth\":1,\"value\":\"Tip #9 console.clear()\"},{\"depth\":1,\"value\":\"Tip #10 console.table()\"}],\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code class=\\\"language-text\\\">console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code class=\\\"language-text\\\">console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code class=\\\"language-text\\\">console</code>的几个常用的方法</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello world'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印信息或者数据</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span>‘Something happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 和console log一样</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>‘Something strange happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印警告信息</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>‘Something horrible happened…’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 打印错误信息</span>\\n</code></pre>\\n      </div>\\n<p>除这些简单的使用外，下面几个<code class=\\\"language-text\\\">console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n<!-- more -->\\n<h1>Tip #1 console.trace()</h1>\\n<p>如果你想知道日志的函数执行位置，使用<code class=\\\"language-text\\\">console.trace()</code>可以打印栈堆跟踪信息。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/trace.png\\\" alt=\\\"trace\\\"></p>\\n<h1>Tip #2 console.time() &#x26;&#x26; console.timeEnd()</h1>\\n<p>如果你想知道某段程序的执行时间，可以使用<code class=\\\"language-text\\\">console.time()</code>和<code class=\\\"language-text\\\">console.timeEnd()</code>打印时间间隔。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/time.png\\\" alt=\\\"time\\\"></p>\\n<h1>Tip #3 console.memory()</h1>\\n<p>如果遇到一个相当棘手的性能问题，或者在寻找一个内存泄露的位置，可以尝试使用<code class=\\\"language-text\\\">console.memory(// property, not a function)</code>查看栈大小信息。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/memory.png\\\" alt=\\\"memory\\\"></p>\\n<h1>Tip #4 console.profile(‘profileName’) &#x26; console.profileEnd(‘profileName’)</h1>\\n<p>这个不是标准里面的方法，但是浏览器支持比较广泛。你可以使用这两个方法让浏览器的性能面板记录start至end的性能数据。使用这两个函数，能够更精准地定位你想要获取的数据。</p>\\n<h1>Tip #5 console.count(\\\"STUFF I COUNT\\\")</h1>\\n<p>在一些经常重复调用的代码中，使用<code class=\\\"language-text\\\">console.count()</code>可以记录该函数的执行次数。\\n<img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/count.png\\\" alt=\\\"count\\\"></p>\\n<h1>Tip #6 console.assert(false, “Log me!”)</h1>\\n<p>当需要条件判断打印日志时候，可以使用<code class=\\\"language-text\\\">console.assert(condition, msg)</code>代替if-else。当<code class=\\\"language-text\\\">condition</code> 为false的时候就会打印出信息。\\n⚠️在Node.js中使用会抛出断言错误。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/assert.png\\\" alt=\\\"assert\\\"></p>\\n<h1>Tip  #7 console.group(‘group’) &#x26; console.groupEnd(‘group’)</h1>\\n<p>在一些写很多<code class=\\\"language-text\\\">console.log()</code>的情况下，你可能需要将日志分组。这时候就可以使用<code class=\\\"language-text\\\">console.group(name)</code> 去将日志分组，使用这个函数后，日志就会按层级打印。使用<code class=\\\"language-text\\\">console.groupEnd()</code>就能结束掉当前分组，在同级重新新建一个分组。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/group.png\\\" alt=\\\"group\\\"></p>\\n<h1>Tip #8 字符串替换</h1>\\n<p>使用<code class=\\\"language-text\\\">console</code>的时候可以使用字符串替换去合并变量，引用类型有下面几个<strong>(%s = string, %i = integer, %o = object, %f = float)</strong></p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/substitutions.png\\\" alt=\\\"substitutions\\\"></p>\\n<h1>Tip #9 console.clear()</h1>\\n<p>当代码里面很多<code class=\\\"language-text\\\">console</code>的时候，你可能会需要<code class=\\\"language-text\\\">console.clear()</code>清理一下前面的log</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/clear.png\\\" alt=\\\"clear\\\"></p>\\n<h1>Tip #10 console.table()</h1>\\n<p>好东西留到最后。使用<code class=\\\"language-text\\\">console.table()</code>，可以把对象打印成一个好看的表格。</p>\\n<p><img src=\\\"http://kiit-1253813979.file.myqcloud.com/10tips-for-console/table.png\\\" alt=\\\"table\\\"></p>\\n<p>希望这几个能让你平时的调试工作能更高效和有趣。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://medium.com/appsflyer/10-tips-for-javascript-debugging-like-a-pro-with-console-7140027eb5f6\\\">10 Tips for Javascript Debugging Like a PRO with Console</a> - Yotam Kadishay</p>\\n</blockquote>\\n<p>在日常开发里，我们经常需要使用<code>console</code>调试我们的代码，但是使用仅仅是用来打印参数数据。在这篇文章中，将会介绍如何一些<code>console</code>的高级用法去更好的做调试工作和定位问题。</p>\\n<p>我们都知道<code>console</code>的几个常用的方法</p>\\n<pre><code class=\\\"language-javascript\\\">console.log('hello world'); // 打印信息或者数据\\nconsole.info(‘Something happened…’); // 和console log一样\\nconsole.warn(‘Something strange happened…’); // 打印警告信息\\nconsole.error(‘Something horrible happened…’); // 打印错误信息\\n</code></pre>\\n<p>除这些简单的使用外，下面几个<code>console</code>的用法希望能帮助你更好的调试你的应用。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"年底项目复盘\",\"date\":\"2018-01-23\",\"category\":[\"工作\"],\"tags\":[\"work\",\"vue\",\"webpack\"],\"path\":\"/post/2017-review\"},\"excerpt\":\"\\n这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。\\n\\n# 项目构建\\n项目创建是使用vue-cli创建的，模版则是使用我自己维护的[vue-mpa](https://github.com/kitwon/vue-mpa)多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"项目构建\"},{\"depth\":2,\"value\":\"代码分割\"},{\"depth\":2,\"value\":\"代码风格及限制\"},{\"depth\":1,\"value\":\"开发阶段\"},{\"depth\":2,\"value\":\"组件化\"},{\"depth\":2,\"value\":\"动态接口地址\"},{\"depth\":2,\"value\":\"测试\"},{\"depth\":1,\"value\":\"SSR\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\\n<h1>项目构建</h1>\\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href=\\\"https://github.com/kitwon/vue-mpa\\\">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\\n<!-- more -->\\n<h2>代码分割</h2>\\n<p>SPA一个比较重要的点就是如何做代码分割了。代码分割涉及到几个方面：</p>\\n<ol>\\n<li><a href=\\\"https://router.vuejs.org/zh-cn/advanced/lazy-loading.html\\\">路由分割</a>官方已经有很好的解决方案了。除文档基本说明外，还使用了<a href=\\\"https://doc.webpack-china.org/api/module-methods/#import-\\\"><code class=\\\"language-text\\\">webpackChunkName</code></a>对组件进行模块合并，减少文件请求。</li>\\n<li>一些比较大的库例如<code class=\\\"language-text\\\">momentjs</code>、<code class=\\\"language-text\\\">lodash</code>代码提取。虽然<code class=\\\"language-text\\\">webpack</code>里面提供了<code class=\\\"language-text\\\">commonChunkPlugin</code>，但是这个插件只对入口文件进行分析和代码提取，而组件里面的一些库则使用了<a href=\\\"https://github.com/asfktz/autodll-webpack-plugin\\\">autodll-webpack-plugin</a>，对一些依赖库进行提取和合并操作，并配合<code class=\\\"language-text\\\">html-webpack-plugin</code>配合自动注入，生成页面模板。</li>\\n</ol>\\n<p>另外，引入了<a href=\\\"https://github.com/webpack-contrib/webpack-bundle-analyzer\\\">BundleAnalyzerPlugin</a>，对module进行图形化的分析。进行各种优化后，<code class=\\\"language-text\\\">vendor</code>和入口文件维持在600k左右，gzip后在200k左右，其他模块gzip后基本在<strong>20-50kb</strong>左右。</p>\\n<h2>代码风格及限制</h2>\\n<p>由于项目使用webpack和node构建，所以可以使用<code class=\\\"language-text\\\">eslint</code>等工具去做提交前代码规范检查，另外还使用了<code class=\\\"language-text\\\">editorconfig</code>和<a href=\\\"https://github.com/prettier/prettier\\\"><code class=\\\"language-text\\\">prettier</code></a>去编辑器的设置和统一代码格式化。另外提一下，<a href=\\\"https://github.com/prettier/prettier\\\"><code class=\\\"language-text\\\">prettier</code></a>可以通过配置项统一多种代码的格式化，因为在node端运行，所以可以做提交前的代码格式化。\\n在各种工具配合下，基本可以做到代码风格的统一。</p>\\n<p>此外，css方面没有使用csslint，但是普及了一下<a href=\\\"http://getbem.com/\\\"><strong><code class=\\\"language-text\\\">BEM</code></strong></a>，样式方面的统一情况也收到不错的成效。</p>\\n<h1>开发阶段</h1>\\n<p>vue在开发时候的好处就体现出来了，没写过项目的同事基本都能把页面写出来，但是对于一些参数传递、父子组件相互调用会需要一点时间去熟悉。但是在开发流程中基本没有出现什么断链的情况。</p>\\n<h2>组件化</h2>\\n<p>在公司期间接触过几个项目，项目结构都比较凌乱，并没有把组件化的优势发挥出来，很多页面都是重新写几遍。所以这项目开始做之前，就普及了一下react生态圈里面的几个组件概念。</p>\\n<ol>\\n<li><strong>container component(接入型组件)</strong>。负责主要业务逻辑，组装数据，提供业务方法。</li>\\n<li><strong>exhibition component(展示型组件)</strong>。负责数据展示工作，大部分是业务组件，数据进，页面出这样，没有复杂功能。</li>\\n<li><strong>interactive component(交互型组件)</strong>。复用性比较强的组件，如<code class=\\\"language-text\\\">dialog</code>、<code class=\\\"language-text\\\">toast</code>等组件。</li>\\n<li><strong>functional component(功能型组件)</strong>。这种组件一般都是作为一种扩展，抽象机制存在，没有渲染动作，例如vue中的<code class=\\\"language-text\\\">router-view</code>，<code class=\\\"language-text\\\">transition</code>等。</li>\\n</ol>\\n<p>了解大概组成后，一般都会把组件拆分得比较细，基本组件代码维持在<strong>300行代码</strong>左右，这样做得好处就是，业务变动时候需要改动的地方就比较少，但是组件对每个模块的影响相对的就变大了，但是这个可以通过<strong>测试</strong>去解决的。</p>\\n<h2>动态接口地址</h2>\\n<p>项目中接口跟静态资源会动态改变，所以需要取后台返回的值去拼接，页面静态资源可以自己写一个模板然后去拼接，接口可以取页面的变量，但是打包到项目的时候，发现路由分割的代码资源地址不对，由于代码是动态分割的，所以地址应该是取<code class=\\\"language-text\\\">config</code>里面的资源地址，所以导致加载失败。\\n通过webpack文档跟stackoverflow里面相似案例，可以在动态引入js之前加入一个<a href=\\\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific-\\\"><code class=\\\"language-text\\\">__webpack_public_path__</code></a>配置项，动态获取异步模块的地址。具体代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span>NODE_ENV <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// variables就是动态的地址</span>\\n  __webpack_public_path__ <span class=\\\"token operator\\\">=</span> variables <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>测试</h2>\\n<p>由于前期比较急，单元测试到了中后期才加上，直接导致了单元测试的覆盖率不够，正常情况下应该一写完代码就马上加上测试。测试这些前期费点时间，后期获益良多的工作，项目、团队越大就越能体现测试的重要性了。\\n现在是使用<a href=\\\"https://facebook.github.io/jest/\\\">Jest</a> + <a href=\\\"https://eddyerburgh.gitbooks.io/avoriaz/content/\\\">Avariaz</a>的组合去做测试工作，后期会切换为<code class=\\\"language-text\\\">Jest</code> + 官方提供的<a href=\\\"https://vue-test-utils.vuejs.org/zh-cn/\\\">vue-test-utils</a>，两个<code class=\\\"language-text\\\">API</code>相似，切换代价不大。</p>\\n<h1>SSR</h1>\\n<p>项目没有这部分的需求，就自己在有空时间折腾了一下，照着官方的SSR文档搭了出来，不过用<a href=\\\"http://koajs.com/\\\"><code class=\\\"language-text\\\">koa</code></a>代替了express（await、async写起来更爽一点）。直出的速度果然是不一样啊，不过也存在几个暂时还没空看的问题。</p>\\n<ol>\\n<li>按需直出页面设置，比如我需要A页面直出，B页面不直出，这操作还没找到怎么配置。</li>\\n<li><code class=\\\"language-text\\\">Route</code>函数式的跳转无效，比如按钮需要动态去定义跳转方式的，绑定了函数，但是SSR处理后点击无效。</li>\\n<li>服务器性能测试。由于node是单线程的，没做过对应的项目，不知道流量大的时候怎么处理，有机会要了解下。</li>\\n</ol>\\n<h1>总结</h1>\\n<p>项目进行过程除了上面动态绑定接口地址，开发过程还是比较顺利的，不过还有几个需要改进的地方</p>\\n<ol>\\n<li>虽然有做code review，但是大部分都是自己改进，可以多留点问题和提出多点意见给对<code class=\\\"language-text\\\">vue</code>或者项目其他模块还不是很熟悉的同事去学习，共同进步。</li>\\n<li>项目启动前对业务的了解不够清楚，导致后期才介入<code class=\\\"language-text\\\">vuex</code>去改进一些模块，做了无用功。</li>\\n<li>项目启动前和设计沟通不够，导致后期图标没有使用到<code class=\\\"language-text\\\">iconfont</code>。不过后面也配合用按<code class=\\\"language-text\\\">BE(Block-Modify)</code>的方式命名图标，写了个脚本去自动生成less文件。</li>\\n</ol>\",\"htmlExcerpt\":\"<p>这次做的是一个类似teambition的团队协作类项目，因为上级反映交互和视觉方面都没有达到要求，以前的代码也没有用模块化和用node做一些自动化的工作，旧代码是基本改不了的，所以就没看以前的代码，直接看着交互跟设计稿就开撸了。\\n库选择基本没有什么选择了，angular版本不稳定，pass，react 和 vue之间为什么选后者呢，一方面受公司政治因素影响，另一方面vue文档有中文，template的写法对新手也比较友好，考虑到后期人员配置就选择vue了。\\n重构了4个大模块，改版用时大概一个半月，测试时间一周左右，期间没有什么比较大卡进度的问题。下面通过对项目的构建，组织，测试等工作做下记录以及分析。</p>\\n<h1>项目构建</h1>\\n<p>项目创建是使用vue-cli创建的，模版则是使用我自己维护的<a href=\\\"https://github.com/kitwon/vue-mpa\\\">vue-mpa</a>多页模板创建的单页应用🤩(出于对自己的支持，对模版bug的测试，以及切换为单页应用也方便)。除了官方基本的功能外，项目还加入了打包完成后自动删除并拷贝到后台项目文件夹，自动生成jsp模板等一些自动化功能。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"构建60fps-web-app\",\"date\":\"2017-09-13\",\"category\":[\"前端\"],\"tags\":[\"chrome\",\"develop tool\",\"javascript\"],\"path\":\"/post/60fps-web-app\"},\"excerpt\":\"\\n> 这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。\\n\\n----\\n\\n> 现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的[render performance](https://developers.google.com/web/fundamentals/performance/rendering/)对前端渲染优化有了一个新的认识。\\n\\n# 几个重要概念\\n## 60fps与设备刷新率\\n目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。\\n\\n其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"几个重要概念\"},{\"depth\":2,\"value\":\"60fps与设备刷新率\"},{\"depth\":2,\"value\":\"pixel pipeline\"},{\"depth\":1,\"value\":\"关键渲染行为\"},{\"depth\":2,\"value\":\"触发layout、paint的关键操作\"},{\"depth\":1,\"value\":\"优化程序\"},{\"depth\":2,\"value\":\"performance panel\"},{\"depth\":2,\"value\":\"javascript\"},{\"depth\":2,\"value\":\"style & layout\"},{\"depth\":2,\"value\":\"paint & composite\"},{\"depth\":3,\"value\":\"怎么看到网页的分层\"},{\"depth\":3,\"value\":\"怎么生成层\"}],\"html\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n<!-- more -->\\n<h2>pixel pipeline</h2>\\n<p>影响浏览器渲染有很多因素，但是下面这5个关键的地方是我们可以控制的，也是像素至屏幕管道中关键的地方。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>Javascript。 js中的动画效果和一些dom操作。</li>\\n<li>样式计算(style)。 css匹配器的计算过程。例如<code class=\\\"language-text\\\">.nav__item &gt; .slot</code>。</li>\\n<li>布局(layout)。dom元素应用了规则之后，浏览器就会对其进行大小及位置的计算，这时候就会触发布局，而布局由于改变dom大小及位置，所以对其他元素也会造成影响。</li>\\n<li>绘制(paint)。绘制就是填充像素的过程。大部分像素相关如文字、图片、阴影等都会触发绘制。绘制一般在层(layer)上面完成。</li>\\n<li>合成。层的概念一般都出现在设计上面，但是浏览器中也有层的概念，所以有时候我们一些错误的操作或者属性都会使层的渲染顺序出现错误。</li>\\n</ul>\\n<h1>关键渲染行为</h1>\\n<p>从服务器返回一个html开始，可以分为以下几步(这里英文的过程分别对应开发工具中<strong>performance</strong>面板的表示</p>\\n<ol>\\n<li>解析html，生成dom树，这里显示为<strong>Parser Html</strong></li>\\n<li>然后根据页面的样式，将dom和css进行结合，此过程为<strong>Recalculate Style</strong></li>\\n<li>最后就生成渲染树，<code class=\\\"language-text\\\">display: none</code>或<code class=\\\"language-text\\\">:after</code>等伪元素都不会出现在渲染树上</li>\\n<li>浏览器知道哪个css规则应用哪个dom元素后，就开始计算布局(计算元素占用多少空间，出现在什么位置)，此过程是<strong>layout</strong></li>\\n<li>确定位置后浏览器就开始对dom的样式及内容进行渲染，称为<strong>paint</strong></li>\\n<li>dom渲染的时候，可能还会有图片资源，浏览器这时候就会将这些内容解码成内存，称为<strong>Image Decode + Resize</strong></li>\\n<li><strong>paint</strong>开始的操作都是在同一个层面中执行，但其实浏览器还会创建多个图层，并且对这些图层进行单独的绘制，这个过程称为<strong>Composite Layers</strong></li>\\n<li>这些操作在CPU中进行，执行完后上传到GPU中，最后显示到屏幕上</li>\\n</ol>\\n<h2>触发layout、paint的关键操作</h2>\\n<p>我们知道一帧中就包含了上面的操作，但并不是所有改变网页外观操作都会触发上面的行为。回到<strong>pipeline</strong>，看看什么操作会分别触发什么行为。(下面会用数字代表对应图片上的位置)\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/pixel-pipline.jpg\\\" alt=\\\"pixel pipeline\\\"></p>\\n<ul>\\n<li>第一种，通过css或者js进行了外观的更改(1)，这时浏览器就要重新计算元素的样式(2)，如果还更改了布局属性，元素的大小改变，必定会影响其他元素的位置，这时就要重新布局(3)，然后受影响的区域就需要重新绘制(4)，最后将所有东西合成在一起(5)。</li>\\n<li>第二种，仅改变绘制属性(1)，例如背景、文字颜色、阴影等(2)，由于这些操作没有改变布局，所以会跳过(3)，直接进行(4)(5)的操作。</li>\\n<li>第三种，通过改变样式(1)(2)，但是样式并没有对(3)(4)进行改动，所以会直接执行(5)的操作，例如<code class=\\\"language-text\\\">cursor: pointer</code>等属性。</li>\\n</ul>\\n<h1>优化程序</h1>\\n<p>通过上面的介绍，我们知道影响帧数的主要是上面的几个渲染行为，但是要怎么知道是什么更改操作使帧数下降，就需要<strong>develop tool</strong>的帮助。</p>\\n<h2>performance panel</h2>\\n<p>性能分析面板是chrome中开发者工具自带的一个功能，我们能在上面看到录制实践中，<strong>pipeline</strong>的具体运行情况。\\n<img src=\\\"http://kiit-1253813979.cosgz.myqcloud.com/%25E6%259E%2584%25E5%25BB%25BA60fps-web-app/performance.jpg\\\" alt=\\\"performance panel\\\"></p>\\n<ol>\\n<li>在(1)<strong>overview</strong>中，我们可以看到程序中大概的性能状况，fps、cpu、网络使用情况，还有对应的截图。一般情况，看到<strong>cpu</strong>部分一大片一大片的颜色就证明你的程序需要优化了。</li>\\n<li>(2)中的<strong>main</strong>部分，可以看到主进程中的活动，所有时间点执行的操作及渲染行为都能在这个部分找到，主要的性能分析也是围绕这里展开，一半看到<strong>飙红</strong>的地方就证明那里是要下手的地方。</li>\\n<li>(3)中则是对某个浏览器行为进行统计分析，能看到详细调用树和渲染层，找代码和<strong>layer tree</strong>都是(3)中。</li>\\n</ol>\\n<p>由于网上教程大部分的教程都用较低的版本，所以很多教程中的面板都找不到，比如<strong>painter</strong>就需要开启<strong>advance paint insturmentation</strong>，所以教程中找不到就需要google一下或者看下<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/\\\">goole的官方教程</a>。具体的使用方法就不赘述，反正看见<strong>飙红就是要优化了</strong>。</p>\\n<p>有工具之后，就可以针对具体的东西进行优化了，根据<strong>pipeline</strong>，我们其实可以知道优化点是哪几个了，javascript, style &#x26; layout, paint &#x26; composite。下面一个个分析下优化点。</p>\\n<h2>javascript</h2>\\n<p>由于javascript在<strong>pipeline</strong>中，所以在渲染过程中执行javascript代码必定会造成卡顿，俗称的帧丢失。在渲染过程中需要执行js代码的操作最常见的例子就是<strong>用js去操作动画</strong>，还有<strong>在浏览过程中做一些数据拉取及组装数据的操作</strong>。所以针对这些问题，我们需要使用一些新的api去改进我们的app。</p>\\n<p><strong>1.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">requestAnimationFrame</a>代替setTimeout和setInterval去执行动画。</strong>\\n一开始我们就说到帧数的概念，一个app想要不卡顿，必须达到60fps每秒的速度才能保证，减去浏览器自己的行为，每帧留给javascript执行的时间大概剩下10ms左右。或许不断调用setTimeout或者setIntervarl可以自定义函数执行时间，但是由于javascript是单线程，活着其他堆在栈中的代码会突然插入，导致函数执行中断。这时候raf就能解决这个问题了。具体使用方法可以自行查看<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\\\">文档</a>。</p>\\n<p><strong>2.使用<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\\\">web worker</a>去进行一些多线程的操作。</strong>\\n使用web worker后，浏览器会另起一个线程，所以就不会妨碍主线程中的pipeline了。我们可以在一些加载列表的场景中使用，比如用户在浏览，但是你想用这些时间去load一些数据回来，然后渲染页面，这时候worker会执行ajax，也不会妨碍到主线程执行。</p>\\n<h2>style &#x26; layout</h2>\\n<p>样式和布局也是帧里面的一部分，复杂的选择器或者某些js操作触发了强制布局，都会使性能下降，下面可以用这几个方法避免这些问题。\\n<strong>1.操作数量多的dom时，减少选择器的复杂度。</strong>\\n通常做项目的时候，我们一般都是操作少数的dom，但是某些特殊情况下可能要操作上千个dom(当然这不太现实)，这时候保持选择器的简洁就相当重要了，一个多级选择器计算时间足以超出10ms，所以，保持css中选择器的简洁是十分重要的。</p>\\n<p><strong>2.避免布局反复FSL</strong>\\n什么是布局反复，一帧的流程应该是按照<strong>pipeline</strong>的执行顺序去执行的，但是某些错误的javascript读写操作就很容易造成布局反复，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> elms <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">var</span> block <span class=\\\"token operator\\\">=</span> ducoment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'block'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> elms<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> height <span class=\\\"token operator\\\">=</span> block<span class=\\\"token punctuation\\\">.</span>offsetHeight\\n  elms<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> height\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在这段代码中，由于属性的读取操作<code class=\\\"language-text\\\">offsetHeight</code>会触发layout布局，然后下面设置高度的属性会触发style修改样式，两个在一个循环中就会造成布局反复，从而造成性能的损失。在<strong>performance panel</strong>中，缩小范围，如果看见layout中有红色的小三角，那么就是触发了FSL了，点进详情就能看到代码运行的地方在哪里了。</p>\\n<h2>paint &#x26; composite</h2>\\n<p>绘制和合成是一个相对比较复杂的流程，大多数样式更改都会触发这个过程，但是如果是大批量的元素或者一个复杂的动画绘制，在主线程中必定会造成性能问题。在这里就引入图层这个概念，由于浏览器的呈现器不在主线程中，所以图层会单独绘制，然后再和树进行合成。但如果层多的话，合成时间也会加长，所以使用层和限制层的数量也是需要注意的问题。</p>\\n<h3>怎么看到网页的分层</h3>\\n<p>具体看<a href=\\\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler\\\">教程</a>\\n进去搜<strong>View paint profiler</strong></p>\\n<ol>\\n<li>Enable advanced paint instrumentation.(这个选项在上图面板一，点击右上角的小齿轮)</li>\\n<li>Select a Paint event in the Main section.(教程里面看图)</li>\\n</ol>\\n<h3>怎么生成层</h3>\\n<ol>\\n<li>社区中比较常见的<code class=\\\"language-text\\\">transform: translate3d(0, 0, 0)</code>、<code class=\\\"language-text\\\">transform: translateZ(0)</code>。虽然会有一些性能的浪费，但是好像是现在比较好的解决方法了。</li>\\n<li>使用css新属性<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\\\"><code class=\\\"language-text\\\">will-change: transform</code></a>，浏览器支持度一般般。</li>\\n</ol>\\n<p>能够看完整篇的同学估计耐性都不错。通过一些基本的介绍，基本可以了解怎么查看和修复app的渲染性能问题了，不过使用现代的开发框架如<strong>react</strong>、<strong>vue</strong>、<strong>angular</strong>都很少会出现<strong>FSL</strong>的问题了，因为很大部分的<strong>layout</strong>动作都直接被<code class=\\\"language-text\\\">rerender</code>，但是一些比较旧的用dom操作些的APP或多或少都会出现上面的问题。大家可以看看自己的APP有没有达到要求。不说了，我去改代码了。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>这篇文章大概5500字体左右，可能需要浪费5-10分钟去阅读。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>现在javascript性能已经足够快了，但是很多时候我们的web app还是会出现卡顿的情况。这时候我们首先会想到是去优化我们的js代码，比如将for循环改为while，但其实这些微粒度的优化其实对性能提示是皮毛。看完google的<a href=\\\"https://developers.google.com/web/fundamentals/performance/rendering/\\\">render performance</a>对前端渲染优化有了一个新的认识。</p>\\n</blockquote>\\n<h1>几个重要概念</h1>\\n<h2>60fps与设备刷新率</h2>\\n<p>目前大多数设备的刷新率都是60fps。玩游戏的都知道，如果当前刷新率在30-60fps，游戏运行会基本流畅，而少于60fps就会出现卡顿的状况了。web app基本也是如此，如果浏览器渲染帧突然下降，或者帧数低的情况，就出现程序运行卡的情况了。</p>\\n<p>其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"在vue项目中使用jest进行单元测试\",\"date\":\"2017-08-18\",\"category\":[\"前端工具\"],\"tags\":[\"unit test\",\"vue\",\"javascript\"],\"path\":\"/post/vue-jest-test\"},\"excerpt\":\"\\n在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下[jest](http://facebook.github.io/jest/)，这是一个[Facebook OpenSource](https://code.facebook.com/projects/)的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持**快照测试**(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。\\n\\n# 配置\\n首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。\\n```bash\\n$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"配置\"},{\"depth\":2,\"value\":\"package.json\"},{\"depth\":1,\"value\":\"跑个测试\"},{\"depth\":1,\"value\":\"last\"}],\"html\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> jest jest-vue-preprocessor --save-dev\\n\\n<span class=\\\"token comment\\\"># or use yarn</span>\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h2>package.json</h2>\\n<p>下面的配置都在<strong>package.json</strong>文件中配置。</p>\\n<p>在文件最底部添加下面代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"jest\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 配置文件拓展名</span>\\n    <span class=\\\"token string\\\">\\\"moduleFileExtensions\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"vue\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 匹配webpack中配置的alias</span>\\n    <span class=\\\"token string\\\">\\\"moduleNameMapper\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\"^vue$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"vue/dist/vue.common.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"^@(.*)$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/src$1\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token comment\\\">// 编译工具</span>\\n    <span class=\\\"token string\\\">\\\"transform\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\".*\\\\\\\\.(vue)$\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"&lt;rootDir>/node_modules/jest-vue-preprocessor\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\".*\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"babel-jest\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p>然后在上面<code class=\\\"language-text\\\">script</code>中添加一条新的命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token string\\\">\\\"test\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./node_modules/.bin/jest\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后就配置好了，很快，很舒服。</p>\\n<h1>跑个测试</h1>\\n<p>首先，我有个vue组件cell，一个简单的列表item组件，代码如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token comment\\\">&lt;!-- vue template --></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>href<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-wrapper<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>iconClass<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>iconClass<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>title<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-label<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>label<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>label<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ui-cell-value<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">:class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>{ <span class=\\\"token punctuation\\\">'</span>isLink<span class=\\\"token punctuation\\\">'</span>: isLink }<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n           <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span> <span class=\\\"token attr-name\\\">v-text</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>value<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>slot</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>i</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>icon-arrow-right<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>isLink<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>i</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ui-cell'</span><span class=\\\"token punctuation\\\">,</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    to<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>String<span class=\\\"token punctuation\\\">,</span> Object<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    iconClass<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    title<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  computed<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">href</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>added <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> resolve <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">.</span>matched<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$nextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>added <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> resolve<span class=\\\"token punctuation\\\">.</span>path\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">isLink</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>to\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleClick</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      e<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">preventDefault</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>href<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后编写测试文件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> Vue <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue'</span>\\n<span class=\\\"token keyword\\\">import</span> Cell <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@/components/cell'</span>\\n<span class=\\\"token keyword\\\">import</span> VueRouter <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'vue-router'</span>\\n\\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>VueRouter<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> routes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span><span class=\\\"token punctuation\\\">,</span>\\n    component<span class=\\\"token punctuation\\\">:</span> Cell\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> router <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">VueRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  routes\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> mockFn <span class=\\\"token operator\\\">=</span> jest<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nCell<span class=\\\"token punctuation\\\">.</span>methods <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    mockFn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">mockReturnValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> Constructor <span class=\\\"token operator\\\">=</span> Vue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extend</span><span class=\\\"token punctuation\\\">(</span>Cell<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> vm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell1'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value1'</span><span class=\\\"token punctuation\\\">,</span>\\n    label<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'label1'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> vm2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  router<span class=\\\"token punctuation\\\">,</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell2'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value2'</span><span class=\\\"token punctuation\\\">,</span>\\n    to<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/foo'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> vm3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propsData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'cell3'</span><span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'value3'</span><span class=\\\"token punctuation\\\">,</span>\\n    iconClass<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'icon-test'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$mount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Cell component'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'render currect dom'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm3<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMatchSnapshot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'router action currectly run'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    vm2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$nextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      vm2<span class=\\\"token punctuation\\\">.</span>$el<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>href<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span>vm2<span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">mockFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>然后跑一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> run <span class=\\\"token function\\\">test</span>\\n\\n<span class=\\\"token operator\\\">></span> jest-test@1.0.0 <span class=\\\"token function\\\">test</span> /Users/kit/projects/jest-test\\n<span class=\\\"token operator\\\">></span> jest\\n\\n PASS  test/unit/Cell.spec.js\\n  Cell component\\n    ✓ render currect dom <span class=\\\"token punctuation\\\">(</span>8ms<span class=\\\"token punctuation\\\">)</span>\\n    ✓ router action currectly run <span class=\\\"token punctuation\\\">(</span>2ms<span class=\\\"token punctuation\\\">)</span>\\n\\nSnapshot Summary\\n › 3 snapshots written <span class=\\\"token keyword\\\">in</span> 1 <span class=\\\"token function\\\">test</span> suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       2 passed, 2 total\\nSnapshots:   3 added, 3 total\\nTime:        2.295\\n</code></pre>\\n      </div>\\n<h1>last</h1>\\n<p>jest给我们提供了一个便捷的测试环境，简单的几个配置项，即可完成编译，不像mocha或jasmine需要其他<code class=\\\"language-text\\\">node module</code>配合完成测试的工作。个人认为fb还是做到了他希望的，让测试变得简单，让开发者有更多的时间去开发。至于自动化测试的好处这里就不再赘述了，有兴趣的朋友可以自行baidu、google。</p>\",\"htmlExcerpt\":\"<p>在之前已经写过一篇关于前端单元测试的文章，相关概念就不作阐述了，有兴趣或者有需求的同学可以在往期找一下。然后这里简单介绍一下<a href=\\\"http://facebook.github.io/jest/\\\">jest</a>，这是一个<a href=\\\"https://code.facebook.com/projects/\\\">Facebook OpenSource</a>的一个开源项目。项目已经集成好了一些测试相关的框架的代码，主打的是零配置测试平台（react中应该算是零配置，其他项目还是要手动配置一下的），里面一个比较好地方是支持<strong>快照测试</strong>(为dom结构生成一个快照，每次测试都对比dom结构)。其他一些好用的地方可以自己查看文档，有中文。</p>\\n<h1>配置</h1>\\n<p>首先是安装jest, jset-vue-preprocessor(jest的一个插件，用来解析'.vue'文件的)。</p>\\n<pre><code class=\\\"language-bash\\\">$ npm install jest jest-vue-preprocessor --save-dev\\n\\n# or use yarn\\n$ yarn add jest jest-vue-preprocessor --save\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript-类\",\"date\":\"2017-07-20\",\"category\":null,\"tags\":null,\"path\":\"/post/js-class\"},\"excerpt\":\"\\n# 类理论\\n类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。\\n\\n类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。**汽车**可以被看作**交通工具中的一种**，所以在软件开发时可以定义一个`Vehicle`类，`Vehicle`中包含推进器（引擎）、载人能力等方法。定义`Car`时，只要声明它继承或者拓展`Vehicle`这个基础定义就行了，其他交通工具如船、飞机也可以继承`Vehicle`。**这就是类的实例化与继承**。\\n\\n类的另外一个核心概念是**多态**，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。\\n\\njavascript中也有类中的`new`和`instanceof`，还有ES6中的`class`关键字，但这些并不是说明js中有**类**的。javascript中只是为了满足类的设计需求而提供一些类似的语法。\\n\\n## js中实现类复制(混入)\\njavascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"类理论\"},{\"depth\":2,\"value\":\"js中实现类复制(混入)\"},{\"depth\":3,\"value\":\"显式混入\"},{\"depth\":3,\"value\":\"隐式混入\"},{\"depth\":1,\"value\":\"prototype-原型\"},{\"depth\":2,\"value\":\"如何工作\"},{\"depth\":1,\"value\":\"小结\"}],\"html\":\"<h1>类理论</h1>\\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code class=\\\"language-text\\\">Vehicle</code>类，<code class=\\\"language-text\\\">Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code class=\\\"language-text\\\">Car</code>时，只要声明它继承或者拓展<code class=\\\"language-text\\\">Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code class=\\\"language-text\\\">Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\\n<p>javascript中也有类中的<code class=\\\"language-text\\\">new</code>和<code class=\\\"language-text\\\">instanceof</code>，还有ES6中的<code class=\\\"language-text\\\">class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\\n<h2>js中实现类复制(混入)</h2>\\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\\n<!-- more -->\\n<h3>显式混入</h3>\\n<p>显示混入在其他库或者框架中一般被称为<code class=\\\"language-text\\\">extend</code>，在这方便理解会使用<code class=\\\"language-text\\\">mixin</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 前面的Vehicle和car的例子</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mixin</span><span class=\\\"token punctuation\\\">(</span>sourceObj<span class=\\\"token punctuation\\\">,</span> targetObj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token keyword\\\">in</span> sourceObj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token keyword\\\">in</span> targetObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      targetObj<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> sourceObj<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> targetObj<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Vehicle <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  engines<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n  ignition<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Turning on my engines.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  drive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ignition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Steering and moving forward.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Car <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mixin</span><span class=\\\"token punctuation\\\">(</span>Vehicle<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  wheels<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span>\\n  drive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vehicle<span class=\\\"token punctuation\\\">.</span>drive<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Rolling on all'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'wheels!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>还有一种显示混入的变体叫<strong>寄生继承</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Vehicle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>engines <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nVehicle<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">ignition</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Turning on my engines.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nVehicle<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">drive</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ignition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Steering and moving forward.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 寄生类 car</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> car  <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vehicle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  car<span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> vehDrive <span class=\\\"token operator\\\">=</span> car<span class=\\\"token punctuation\\\">.</span>drive<span class=\\\"token punctuation\\\">;</span>\\n\\n  car<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">drive</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Vehicle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Rolling on all'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>wheels <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'wheels!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> car<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> myCar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Car</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmyCar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">drive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>隐式混入</h3>\\n<p>隐式混入就是改变在一个函数体内执行另外另一个函数的方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  cool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cool</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  cool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    foo<span class=\\\"token punctuation\\\">.</span>cool<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cool</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1, 数据不共享</span>\\n</code></pre>\\n      </div>\\n<h1>prototype-原型</h1>\\n<p>JS中，当试图引用对象属性时候就会触发<code class=\\\"language-text\\\">[[GET]]</code>操作，如果在对象属性中没有找到，就会使用对象的<code class=\\\"language-text\\\">[[prototype]]</code>链。JS大部分复杂类型都是<code class=\\\"language-text\\\">object</code>，所以<code class=\\\"language-text\\\">[[prototype]]</code>“尽头”应该是<code class=\\\"language-text\\\">Object.prototype</code>，里面包含了许多原生方法，如<code class=\\\"language-text\\\">toString</code>或<code class=\\\"language-text\\\">valueOf</code>。</p>\\n<h2>如何工作</h2>\\n<p>JS和其他OO语言并不同，JS中并没有类作为对象的抽象模式，JS中只有对象，所以当new一个对象时候，并不是复制一个类函数，而是将目标对象的<code class=\\\"language-text\\\">prototype</code>关联到新对象的<code class=\\\"language-text\\\">prototype</code>中。</p>\\n<h1>小结</h1>\\n<p><code class=\\\"language-text\\\">prototype</code>部分书本总结得比较清楚，想知道更多细节的同学可以参考<strong>you dont know javascript</strong>的5.1-5.4章节。</p>\\n<ul>\\n<li>访问对象时候都会触发对象的[[GET]]操作，如果没有找到属性的话会继续找[[Prototype]]链。</li>\\n<li>普通对象的原型链顶端都是<code class=\\\"language-text\\\">Object.prototype</code></li>\\n<li><code class=\\\"language-text\\\">new</code>调用函数时只会关系到对象，而不会复制</li>\\n</ul>\",\"htmlExcerpt\":\"<h1>类理论</h1>\\n<p>类／继承描述了一种代码的组织结构形式，这个理论在软件设计中一直作为一个主导的角色。通过学习类理论，能为更好地学习js中的设计模式和对js中原型链的理解打下基础。</p>\\n<p>类是在软件中对真实世界问题领域的建模方法。如一个经常看见的交通例子。<strong>汽车</strong>可以被看作<strong>交通工具中的一种</strong>，所以在软件开发时可以定义一个<code>Vehicle</code>类，<code>Vehicle</code>中包含推进器（引擎）、载人能力等方法。定义<code>Car</code>时，只要声明它继承或者拓展<code>Vehicle</code>这个基础定义就行了，其他交通工具如船、飞机也可以继承<code>Vehicle</code>。<strong>这就是类的实例化与继承</strong>。</p>\\n<p>类的另外一个核心概念是<strong>多态</strong>，这个概念是说夫类的通用行为可以被子类更特殊的行为重写。</p>\\n<p>javascript中也有类中的<code>new</code>和<code>instanceof</code>，还有ES6中的<code>class</code>关键字，但这些并不是说明js中有<strong>类</strong>的。javascript中只是为了满足类的设计需求而提供一些类似的语法。</p>\\n<h2>js中实现类复制(混入)</h2>\\n<p>javascript中的对象机制并不会自动执行复制行为，简单来说javascript中只有对象，并不存在可以实例的类。一个对象并不会复制一个对象，只会把它关联起来(prototype)。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript - this\",\"date\":\"2017-06-27\",\"category\":null,\"tags\":null,\"path\":\"/post/js-this\"},\"excerpt\":\"\\n# 关于this\\n\\n`this`应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是`this`的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。\\n\\n# this的指向\\nthis是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\\n\\n通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：\\n```javascript\\nfunction baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"关于this\"},{\"depth\":1,\"value\":\"this的指向\"},{\"depth\":1,\"value\":\"绑定规则\"},{\"depth\":2,\"value\":\"默认绑定\"},{\"depth\":2,\"value\":\"隐式绑定\"},{\"depth\":3,\"value\":\"隐式丢失\"},{\"depth\":2,\"value\":\"显式绑定\"},{\"depth\":2,\"value\":\"硬绑定\"},{\"depth\":2,\"value\":\"new绑定\"},{\"depth\":1,\"value\":\"绑定优先级\"},{\"depth\":1,\"value\":\"绑定例外\"},{\"depth\":2,\"value\":\"被忽略的this\"},{\"depth\":2,\"value\":\"间接引用\"},{\"depth\":2,\"value\":\"软绑定\"},{\"depth\":1,\"value\":\"箭头函数\"}],\"html\":\"<h1>关于this</h1>\\n<p><code class=\\\"language-text\\\">this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code class=\\\"language-text\\\">this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\\n<h1>this的指向</h1>\\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前调用栈是 baz</span>\\n  <span class=\\\"token comment\\\">// 当前调用位置是全局作用域</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'baz'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bar的调用位置</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前的调用栈是 baz -> bar</span>\\n  <span class=\\\"token comment\\\">// 当前的调用位置是baz</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 当前的调用栈是 baz -> bar -> foo</span>\\n  <span class=\\\"token comment\\\">// 当前的调用位置是bar</span>\\n\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>绑定规则</h1>\\n<p>除了像上面分析代码，还有一个最简单的方式就是分析调用工具。找到调用位置后，就能根据下面的4条规则来判断this如何绑定。</p>\\n<h2>默认绑定</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>从上面代码可以知道，<code class=\\\"language-text\\\">foo</code>的调用位置在全局中，不带任何修饰地调用，因此只能使用<strong>默认绑定</strong>。</p>\\n<p>在这里要注意一个细节，如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定。</p>\\n<h2>隐式绑定</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span>  <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>从上代码可以看出<code class=\\\"language-text\\\">obj</code>，调用位置会使用<code class=\\\"language-text\\\">obj</code>上下文来引用函数，因此，可以说函数被调用时候<code class=\\\"language-text\\\">obj</code>对象“包含”它。当函数引用有上下文对象时，<strong>隐式绑定</strong> 规则会把函数引用调用中的<code class=\\\"language-text\\\">this</code>绑定到这个对象中。所以<code class=\\\"language-text\\\">this.a</code>与<code class=\\\"language-text\\\">obj.a</code>在此时是一样的。</p>\\n<p>对象属性应用链中只有最顶层或者说最后一层会影响调用位置。如下:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  obj2<span class=\\\"token punctuation\\\">:</span> obj2\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nobj1<span class=\\\"token punctuation\\\">.</span>obj2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 42</span>\\n</code></pre>\\n      </div>\\n<h3>隐式丢失</h3>\\n<p><strong>隐式丢失</strong> 就是隐式绑定的函数丢失绑定对象，然后应用<strong>默认绑定</strong>，从而把<code class=\\\"language-text\\\">this</code>绑定到全局对象或者<code class=\\\"language-text\\\">undefined</code>中，取决于是否严格模式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 函数别名</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// opps, global</span>\\n</code></pre>\\n      </div>\\n<p>或者在传入回调函数的时候：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n  foo<span class=\\\"token punctuation\\\">:</span> foo\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'oops, global'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">doFoo</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// opps, global</span>\\n</code></pre>\\n      </div>\\n<p>传入函数就是一种隐式赋值，所以结果和上一个例子也是一样的。</p>\\n<h2>显式绑定</h2>\\n<p>使用<code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>方法对对象进行强制调用函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">call</code>和<code class=\\\"language-text\\\">apply</code>在绑定的机制基本是一样的，就是传参不一样，<code class=\\\"language-text\\\">call</code>为单独的参数，<code class=\\\"language-text\\\">apply</code>为数组。</p>\\n<h2>硬绑定</h2>\\n<p>硬绑定为显式绑定的一个变种，能够解决丢失绑定的问题，先思考下面代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">bar</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n\\n<span class=\\\"token comment\\\">// 硬绑定的bar不能再修改它的this</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>可以创建一个可以重复使用的硬绑定函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> something<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+</span> something<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 辅助绑定函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2 3</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5</span>\\n</code></pre>\\n      </div>\\n<p>其实在ES5中已经提供了原生的<code class=\\\"language-text\\\">Fucntion.prototype.bind</code>的方法，可以直接使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>something<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> something<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">+</span> something<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>new绑定</h2>\\n<p>JavaScript中的new并不想其他oo语言那样会实例化一个类，只是使用new操作符调用普通的函数，在这个调用也会对this进行绑定。\\n使用new调用函数时，会自动执行下面操作：</p>\\n<ol>\\n<li>创建（或者说构造）一个全新的对象。</li>\\n<li>这个对象会被执行[[原型]]连接。</li>\\n<li>这个新对象会绑定到函数调用的this。</li>\\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\\n</ol>\\n<p>看下面代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>像这样普通的new调用<code class=\\\"language-text\\\">foo(...)</code>时，会构造一个新的对象并把它绑定到<code class=\\\"language-text\\\">foo(..)</code>调用中的this上。这个就称为new绑定。</p>\\n<h1>绑定优先级</h1>\\n<p>绑定优先级按照下面的顺序来判断：</p>\\n<ol>\\n<li>\\n<p>函数是否在new中调用(new绑定)？如果是的话this绑定的是新创建的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>函数是否通过call、apply(显示绑定)或者硬绑定调用？如果是的话，this绑定的是指定的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是哪个上下文对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>若果都不是的话，适用默认绑定，严格模式下绑定到<code class=\\\"language-text\\\">undefined</code>，否则就绑到全局对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ol>\\n<h1>绑定例外</h1>\\n<p>在某些场景下this的绑定用上面的规制是判断不了的，可能认为是其他绑定规则，实际引用的是<a href=\\\"#%E9%BB%98%E8%AE%A4%E7%BB%91%E5%AE%9A\\\">默认绑定</a>规则。</p>\\n<h2>被忽略的this</h2>\\n<p>如果把<code class=\\\"language-text\\\">null</code>或者<code class=\\\"language-text\\\">undefined</code>作为this的绑定对象传入call、apply或者bind中，这些值在调用时会被忽略，实际应用的是默认规则。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fOO</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>这种情况虽然并不多见，但是使用apply展开数组或者适用<code class=\\\"language-text\\\">bind(...)</code>进行<a href=\\\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\\\">柯里化</a>的时候会用到。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a: '</span> <span class=\\\"token operator\\\">+</span> a <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'b: '</span> <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// a: 2, b: 3</span>\\n\\n<span class=\\\"token comment\\\">// 适用bind(..) 进行柯里化</span>\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>nul<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// a: 2, b: 3</span>\\n</code></pre>\\n      </div>\\n<p><strong>注意：很多时候新建一个空对象<code class=\\\"language-text\\\">var n = Object.creat(null)</code>代替<code class=\\\"language-text\\\">null</code>更为安全。</strong></p>\\n<h2>间接引用</h2>\\n<p>间接引用上面介绍<a href=\\\"#%E9%9A%90%E5%BC%8F%E4%B8%A2%E5%A4%B1\\\">隐式丢失</a>的时候也有举过例子，调用间接引用的函数也会造成绑定例外。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> foo<span class=\\\"token punctuation\\\">:</span> foo <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\no<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n<span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> o<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<h2>软绑定</h2>\\n<p>软绑定可以实现硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改this的能力。具体使用方式如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name：'</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj2'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'obj3'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 稍后实现softBind</span>\\n<span class=\\\"token keyword\\\">var</span> fooOBJ <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">softBind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">fooOBJ</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj</span>\\n\\nobj2<span class=\\\"token punctuation\\\">.</span>foo <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">softBind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nobj2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj2</span>\\n\\nfooOBJ<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj3</span>\\n\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">.</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// name: obj 应用了软绑定</span>\\n</code></pre>\\n      </div>\\n<p>可以看到，软绑定的<code class=\\\"language-text\\\">foo()</code>可以手动将this绑定到<code class=\\\"language-text\\\">obj2</code>或者<code class=\\\"language-text\\\">obj3</code>上，但如果应用默认绑定，则会将this绑定到obj中。</p>\\n<p><code class=\\\"language-text\\\">softBind</code>的实现方式如下:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>softBind<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Function<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">softBind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">bound</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token punctuation\\\">(</span>window <span class=\\\"token operator\\\">||</span> global<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      curried<span class=\\\"token punctuation\\\">.</span>concat<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>curried<span class=\\\"token punctuation\\\">,</span> arguments<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    bound<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> bound<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个函数首先检查调用时候的this，如果this绑定到全局或者undefined中，那就把指定的默认对象<code class=\\\"language-text\\\">obj</code>绑定到this，否则不修改this。<strong>ES5中的bind()已经实现此部分功能</strong>。</p>\\n<h1>箭头函数</h1>\\n<p>前面接受的<a href=\\\"#%E7%BB%91%E5%AE%9A%E4%BC%98%E5%85%88%E7%BA%A7\\\">四条规则</a>可以包含所有正常函数。但是ES6中的<strong>箭头函数</strong>则无法使用这些规则。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this继承foo</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2，不是3</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">foo()</code>内部的箭头函数会捕获调用<code class=\\\"language-text\\\">foo()</code>时的this。由于<code class=\\\"language-text\\\">foo()</code>的this绑定到<code class=\\\"language-text\\\">obj1</code>,<code class=\\\"language-text\\\">bar</code>的this也会绑定到<code class=\\\"language-text\\\">obj1</code>，箭头函数的绑定无法被修改。(new也不行)</p>\\n<p>在ES6出现之前我们经常写的一种模式与箭头函数是几乎相同的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">var self = this</code>和箭头函数从本质来说是想取代this的机制，如果代码中大多数使用<code class=\\\"language-text\\\">var self = this;</code>，那么应该完全使用词法作用域或箭头函数，抛弃this风格的代码。相反，如果使用this，则可以上方的绑定机制。</p>\",\"htmlExcerpt\":\"<h1>关于this</h1>\\n<p><code>this</code>应该是javascript中一个比较复杂的机制了，在日常工作中我们可能有意无意都会使用到这个机制，但是<code>this</code>的工作机制真正了解的可能只有皮毛，通过学习这一机制，能够提高对js代码的理解和阅读能力，还有对js程序设计模式有着更深的理解。</p>\\n<h1>this的指向</h1>\\n<p>this是运行时进行绑定的，而不是编写时绑定的，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</p>\\n<p>通过分析调用位置，就能知道this到底引用的是什么。所以，寻找调用位置就能弄清上面的问题，通过一个例子，就能很好地理解这个问题：</p>\\n<pre><code class=\\\"language-javascript\\\">function baz() {\\n  // 当前调用栈是 baz\\n  // 当前调用位置是全局作用域\\n\\n  console.log('baz');\\n  bar(); // bar的调用位置\\n}\\n\\nfunction bar() {\\n  // 当前的调用栈是 baz -> bar\\n  // 当前的调用位置是baz\\n\\n  console.log('bar');\\n  foo();\\n}\\n\\nfunction foo() {\\n  // 当前的调用栈是 baz -> bar -> foo\\n  // 当前的调用位置是bar\\n\\n  console.log('foo');\\n}\\n\\nbaz();\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"webpack2新特性&迁移\",\"date\":\"2017-06-24\",\"category\":[\"前端工具\"],\"tags\":[\"webpack\"],\"path\":\"/post/webpack2\"},\"excerpt\":\"\\nwebpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。\\n\\n# 从webpack1中迁移\\n官方已经给出了详细的[迁移指南](https://webpack.js.org/guides/migrating/)，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。\\n\\n## 配置文件\\n如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。\\n\\n### `module.loaders`变成`module.rules`\\n旧的`module.loader`被`module.rules`取代，后者允许配置`loader`更多选项，具体查看文档[module.rules](https://webpack.js.org/configuration/module/#module-rules)\\n\\n```javascript\\n// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"从webpack1中迁移\"},{\"depth\":2,\"value\":\"配置文件\"},{\"depth\":3,\"value\":\"变成\"},{\"depth\":3,\"value\":\"改动\"},{\"depth\":3,\"value\":null},{\"depth\":3,\"value\":\"CLI中配置使用自定义参数\"},{\"depth\":2,\"value\":\"主要变更\"},{\"depth\":3,\"value\":\"ES6模块\"},{\"depth\":1,\"value\":\"总结\"},{\"depth\":2,\"value\":\"参考\"}],\"html\":\"<p>webpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。</p>\\n<h1>从webpack1中迁移</h1>\\n<p>官方已经给出了详细的<a href=\\\"https://webpack.js.org/guides/migrating/\\\">迁移指南</a>，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。</p>\\n<h2>配置文件</h2>\\n<p>如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。</p>\\n<h3><code class=\\\"language-text\\\">module.loaders</code>变成<code class=\\\"language-text\\\">module.rules</code></h3>\\n<p>旧的<code class=\\\"language-text\\\">module.loader</code>被<code class=\\\"language-text\\\">module.rules</code>取代，后者允许配置<code class=\\\"language-text\\\">loader</code>更多选项，具体查看文档<a href=\\\"https://webpack.js.org/configuration/module/#module-rules\\\">module.rules</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\nmdoule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span>\\n            use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n                <span class=\\\"token punctuation\\\">{</span> loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token punctuation\\\">{</span>\\n                    loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n                    options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.jsx$/</span><span class=\\\"token punctuation\\\">,</span>\\n            loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'babel-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// ...</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ...</span>\\nmodule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.less$/</span><span class=\\\"token punctuation\\\">,</span>\\n        use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'less-loader'</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>除上面两项外还有</p>\\n<ul>\\n<li>现在指定loader的时候不能再省略<code class=\\\"language-text\\\">-loader</code>后缀。具体原因参阅<a href=\\\"https://github.com/webpack/webpack/issues/2986\\\">#2968</a></li>\\n<li><code class=\\\"language-text\\\">json-loader</code>不需再手动添加。</li>\\n<li>loader默认的resolve配置是相对于<code class=\\\"language-text\\\">context</code>配置项的。</li>\\n<li>取消了<code class=\\\"language-text\\\">module.preLoaders</code>以及<code class=\\\"language-text\\\">module.postLoaders</code>。</li>\\n</ul>\\n<h3><code class=\\\"language-text\\\">UglifyPlugin</code>改动</h3>\\n<ul>\\n<li><code class=\\\"language-text\\\">UglifyPlugin</code>的<code class=\\\"language-text\\\">sourceMap</code>现在的默认值的<code class=\\\"language-text\\\">false</code>而不是<code class=\\\"language-text\\\">true</code>。</li>\\n<li><code class=\\\"language-text\\\">UglifyJsPlugin</code>的<code class=\\\"language-text\\\">compress.warnings</code>配置项现在默认为<code class=\\\"language-text\\\">false</code>而不是<code class=\\\"language-text\\\">true</code>。</li>\\n</ul>\\n<h3><code class=\\\"language-text\\\">ExtractTextWebpackPlugin</code></h3>\\n<p>插件变化主要体现在语法上，又原来的单个参数传变成了对象，现在的配置方式如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ExtractTextPlugin.extract</span>\\nmodule<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    rules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span>\\n        loader<span class=\\\"token punctuation\\\">:</span> ExtractTextPlugin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n            fallbackLoader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n            publicPath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/dist'</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// new ExtractTextPlugin({options})</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ExtractTextPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bundle.css'</span><span class=\\\"token punctuation\\\">,</span>\\n        disabled<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n        allChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<h3>CLI中配置使用自定义参数</h3>\\n<p>在webpack1中可以用<code class=\\\"language-text\\\">process.argv</code>获取自定义参数，但是在webpack2中这行为被禁止了，替代地提供了一个接口<code class=\\\"language-text\\\">env</code>去获取自定义参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">export</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>env<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> customStuff <span class=\\\"token operator\\\">=</span> env<span class=\\\"token punctuation\\\">.</span>customStuff<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token keyword\\\">return</span> config<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>主要变更</h2>\\n<h3>ES6模块</h3>\\n<p>webpack2现在增加对ES6的模块化的原生支持，意味着现在能够直接识别<code class=\\\"language-text\\\">import</code>和<code class=\\\"language-text\\\">export</code>了，不需要先转成CommonJS模块的格式。\\n支持原生<code class=\\\"language-text\\\">import</code>带来的影响就是支持异步加载模块，webpack1使用异步模块的时候如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ensure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'chunkName'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>webpack2的<code class=\\\"language-text\\\">import</code>会返回一个<code class=\\\"language-text\\\">promise</code>对象</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>而且现在<strong>chunk加载失败能被Promise捕捉到</strong>，那就意味着我们能够在组件加载失败的时候采取相应的操作。</p>\\n<p>另外现在<code class=\\\"language-text\\\">import</code>还支持动态表达式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">route</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> query<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/routes/${path}/route'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>route <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">route<span class=\\\"token punctuation\\\">.</span>Route</span><span class=\\\"token punctuation\\\">(</span>query<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>用着<em>vim-mode</em>，写完这篇已经完全头皮发麻了，完全熟悉估计不知道还要多久呢。回正题，·从官方文档来看，改动的地方的确不多，迁移成本应该是比较低的，至于要不要迁移我觉得还是见仁见智吧，如果新版的优点好处大于迁移的成本的话各位应该可以放心去改动你的配置文件了。总的来说webpack2有以下几个优点</p>\\n<ul>\\n<li>编译速度提高</li>\\n<li>编译文件大小相对减少了</li>\\n<li>支持promise</li>\\n<li>能捕捉到chunk加载失败</li>\\n</ul>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://webpack.js.org/guides/migrating/\\\">Migrating from v1 to v2</a></li>\\n<li><a href=\\\"http://www.tuicool.com/articles/aieAnan\\\">升级到 webpack2</a></li>\\n<li><a href=\\\"http://imweb.io/topic/58666d57b3ce6d8e3f9f99b0\\\">webpack2 的 tree-shaking 好用吗？</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>webpack2已经发布了好一段时间了。但是因为之前工作的关系没有好好研究一下，后面工作应该会用得上，而且趁着这段时间有空，还有在熟悉vim，就顺便拿这来练练手了。</p>\\n<h1>从webpack1中迁移</h1>\\n<p>官方已经给出了详细的<a href=\\\"https://webpack.js.org/guides/migrating/\\\">迁移指南</a>，改动并不是很大，但是优化却蛮多的，如编译速度，代码优化等。如果你的项目正在用webpack，那么这个新版本还是挺值得迁移的。</p>\\n<h2>配置文件</h2>\\n<p>如果升级webpack之后直接运行命令的话应该会看到一片红的，可以看出配置项有改动，下面整理一下经常使用地方的改动。</p>\\n<h3><code>module.loaders</code>变成<code>module.rules</code></h3>\\n<p>旧的<code>module.loader</code>被<code>module.rules</code>取代，后者允许配置<code>loader</code>更多选项，具体查看文档<a href=\\\"https://webpack.js.org/configuration/module/#module-rules\\\">module.rules</a></p>\\n<pre><code class=\\\"language-javascript\\\">// ...\\nmdoule: {\\n    rules: [\\n        {\\n            test: /\\\\.css$/,\\n            use: [\\n                { loader: 'style-loader' },\\n                {\\n                    loader: 'css-loader',\\n                    options: { module: true }\\n                }\\n            ]\\n        },\\n        {\\n            test: /\\\\.jsx$/,\\n            loader: 'babel-loader',\\n            options: {\\n                // ...\\n            }\\n        }\\n    ]\\n}\\n// ...\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript-闭包\",\"date\":\"2017-06-14\",\"category\":null,\"tags\":null,\"path\":\"/post/js-closures\"},\"excerpt\":\"\\n# 什么是闭包\\n记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。\\n\\n> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）\\n\\n然后看个例子\\n```javascript\\nfunction foo() {\\n\\tvar a = 2;\\n\\n\\tfuntion bar() {\\n\\t\\tconsole.log(a);\\n\\t}\\n\\n\\tbar();\\n}\\n\\nfoo();\\n```\\n如果按上面第一条的定义，这里一定是生成了闭包，但是**确切的说并不是**，这里最准确的说是`bar`对`a`的引用方式是词法作用域的查找规则，而这些只是**闭包**的一部分。然后再看清晰闭包的例子\\n\\n```javascript\\nfucntion foo() {\\n\\tvar a = 2;\\n\\n\\tfunction bar() {\\n\\t\\tconsole.log(a)\\n\\t}\\n\\n\\treturn bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"什么是闭包\"},{\"depth\":1,\"value\":\"闭包与变量\"},{\"depth\":1,\"value\":\"模块\"},{\"depth\":2,\"value\":\"现代的模块机制\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<h1>什么是闭包</h1>\\n<p>记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。</p>\\n<blockquote>\\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）</p>\\n</blockquote>\\n<p>然后看个例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\tfuntion <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如果按上面第一条的定义，这里一定是生成了闭包，但是<strong>确切的说并不是</strong>，这里最准确的说是<code class=\\\"language-text\\\">bar</code>对<code class=\\\"language-text\\\">a</code>的引用方式是词法作用域的查找规则，而这些只是<strong>闭包</strong>的一部分。然后再看清晰闭包的例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">fucntion <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> bar<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> baz <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>；\\n\\n<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这就是闭包效果</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p>在这例子中，<code class=\\\"language-text\\\">bar</code>也是在<code class=\\\"language-text\\\">foo</code>的作用域内，但是不是直接执行，而是作为返回值返回。\\n<code class=\\\"language-text\\\">foo()</code>执行后，返回值<code class=\\\"language-text\\\">bar</code>赋值给<code class=\\\"language-text\\\">baz</code>并执行<code class=\\\"language-text\\\">baz()</code>，在这里，<code class=\\\"language-text\\\">bar()</code>显然可以正常执行，它在自己定义的词法作用域<strong>以外</strong>的地方。</p>\\n<p>在<code class=\\\"language-text\\\">foo()</code>执行之后，按js的垃圾回收机制，应该会对其进行回收，而闭包的神奇之处就是可以阻止这事情发生，因此<code class=\\\"language-text\\\">baz()</code>在执行的时候依然可以访问<code class=\\\"language-text\\\">a</code>。在此一看，原来平时写的大多数代码都是闭包啊。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span>bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">baz</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfn <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 这里也是闭包</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>闭包与变量</h1>\\n<p>要说明闭包，for循环也是一个很好的例子</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>正常情况下，我们会预期的认为这段会每秒输出1～10，但实际，这段代码会<strong>每秒输出10次11</strong>。</p>\\n<p>首先<strong>11</strong>是那里来的，这个循环应该是在<code class=\\\"language-text\\\">i=11</code>的时候符合终止条件，所以代码输出的是循环结束时<strong>i</strong>的最终值。</p>\\n<p>细想一下，答案其实显而易见，<strong>setTimeout</strong>会推到栈底部执行，所以会在循环结束后才开始执行，所以每次都是输出<strong>11</strong>。但是什么问题造成这样的结果呢。</p>\\n<p>虽然<strong>setTimeout</strong>都是在每个迭代时候分别定义的，但是根据作用域原理，其实几个函数都是都是<strong>保存在一个封闭的作用域中</strong>，因此它们引用都是同一个<strong>来自全局的i</strong>。</p>\\n<p>所以解决方法也很简单，我们需要每次循环都新建一个作用域，然后把迭代的值传入作用域中，所以我们可以用<strong>IIFE</strong>（上一篇作用域有介绍，IIFE是一个匿名函数，每次调用都会创建作用域）来解决</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> j <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 换成ES6中的let也可以</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>模块</h1>\\n<p>闭包除了平时实现的回调功能外，还可以实现另外一个强大的功能，<strong>模块</strong>。\\n旧的模块实现方式，如jQuery就可以使用闭包实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> $ <span class=\\\"token operator\\\">=</span> jQuery <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Module</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identify1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identify2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">change</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">.</span>identify <span class=\\\"token operator\\\">=</span> identify2<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token keyword\\\">public</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tdoSomething<span class=\\\"token punctuation\\\">:</span> doSomething<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tidentify<span class=\\\"token punctuation\\\">:</span> identify1<span class=\\\"token punctuation\\\">,</span>\\n\\t\\tchange<span class=\\\"token punctuation\\\">:</span> change\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">public</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hello'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 2</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">identify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// hello</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">change</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n$<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">identify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// HELLO</span>\\n</code></pre>\\n      </div>\\n<p>如果不用单例的话不用<strong>IIFE</strong>即可，通过在模块内保留对公共API的引用，可以从<strong>内部</strong>对模块实例进行修改，包括添加，删除，修改属性或者方法。</p>\\n<h2>现代的模块机制</h2>\\n<p>现在大部分的模块加载器本质上都是将这种模块定义封装进API中，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> Module <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Manager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> modules <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> deps<span class=\\\"token punctuation\\\">,</span> impl<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> deps<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// 在modules中寻找名字为deps[i]的模块</span>\\n\\t\\t\\tdeps<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> modules<span class=\\\"token punctuation\\\">[</span>deps<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token comment\\\">// 将依赖的模块作为arguments传入module中</span>\\n\\t\\tmodules<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> impl<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>impl<span class=\\\"token punctuation\\\">,</span> deps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> modules<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tdefine<span class=\\\"token punctuation\\\">:</span> define<span class=\\\"token punctuation\\\">,</span>\\n\\t\\trequire<span class=\\\"token punctuation\\\">:</span> require\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>这段代码核心在<code class=\\\"language-text\\\">module[name] = impl.apply(impl, deps)</code>中，模块都按名字保存在<code class=\\\"language-text\\\">modules</code>变量中，每次都能根据获取相关模块。下面看看使用方式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span>who<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Hello '</span> <span class=\\\"token operator\\\">+</span> who<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\thello<span class=\\\"token punctuation\\\">:</span> hello\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nModule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">awsome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> foo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'kit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toUpperCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tawsome<span class=\\\"token punctuation\\\">:</span> awsome\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tbar <span class=\\\"token operator\\\">=</span> Module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'kit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Hello kit</span>\\nbar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">awsome</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// HELLO KIT</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>从上面可以知道，平时写的js大部分代码都使用了闭包，通过了解闭包和作用域的运行方式，能够减少平时使用的出现的错误。也能通过闭包，使用js实现模块化等其他更多的功能。</p>\",\"htmlExcerpt\":\"<h1>什么是闭包</h1>\\n<p>记得刚开始用js的时候就听过闭包这个概念，一开始觉得只是一个语言特性，没有太深入了解，网上查资料的解释一般是：函数有权访问另一个函数作用域中变量的函数，最容易生成闭包的方式一般是函数里面套函数。</p>\\n<blockquote>\\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。\\n--- 你不知道的javascript（上卷）</p>\\n</blockquote>\\n<p>然后看个例子</p>\\n<pre><code class=\\\"language-javascript\\\">function foo() {\\n    var a = 2;\\n\\n    funtion bar() {\\n        console.log(a);\\n    }\\n\\n    bar();\\n}\\n\\nfoo();\\n</code></pre>\\n<p>如果按上面第一条的定义，这里一定是生成了闭包，但是<strong>确切的说并不是</strong>，这里最准确的说是<code>bar</code>对<code>a</code>的引用方式是词法作用域的查找规则，而这些只是<strong>闭包</strong>的一部分。然后再看清晰闭包的例子</p>\\n<pre><code class=\\\"language-javascript\\\">fucntion foo() {\\n    var a = 2;\\n\\n    function bar() {\\n        console.log(a)\\n    }\\n\\n    return bar;\\n}\\n\\nvar baz = foo()；\\n\\nbaz(); // 这就是闭包效果\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"用python写一个简单爬虫\",\"date\":\"2017-06-11\",\"category\":null,\"tags\":null,\"path\":\"/post/python-crawler\"},\"excerpt\":\"\\n之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。\\n\\n# 主要需求\\n这个demo中爬虫有3个主要模块，**URL管理器**、**下载器**、**解析器**\\n* URL管理器主要处理爬取的URL的状态。\\n* 下载器会通过**URL管理器**传送过来有效URL进行下载。\\n* 解析器会将**下载器**下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给**URL管理器**进行重复操作。\\n\\n## 入口程序\\n`spider_main`文件为程序入口，处理整个爬虫的运行逻辑\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"主要需求\"},{\"depth\":2,\"value\":\"入口程序\"},{\"depth\":2,\"value\":\"url管理器\"},{\"depth\":2,\"value\":\"下载器\"},{\"depth\":2,\"value\":\"解析器\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<p>之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。</p>\\n<h1>主要需求</h1>\\n<p>这个demo中爬虫有3个主要模块，<strong>URL管理器</strong>、<strong>下载器</strong>、<strong>解析器</strong></p>\\n<ul>\\n<li>URL管理器主要处理爬取的URL的状态。</li>\\n<li>下载器会通过<strong>URL管理器</strong>传送过来有效URL进行下载。</li>\\n<li>解析器会将<strong>下载器</strong>下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给<strong>URL管理器</strong>进行重复操作。</li>\\n</ul>\\n<h2>入口程序</h2>\\n<p><code class=\\\"language-text\\\">spider_main</code>文件为程序入口，处理整个爬虫的运行逻辑</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> url_manager<span class=\\\"token punctuation\\\">,</span> html_downloader<span class=\\\"token punctuation\\\">,</span> html_outputer<span class=\\\"token punctuation\\\">,</span> html_parser\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SpiderMain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token operator\\\">=</span> url_manager<span class=\\\"token punctuation\\\">.</span>UrlManager<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>downloder <span class=\\\"token operator\\\">=</span> html_downloader<span class=\\\"token punctuation\\\">.</span>HtmlDownloader<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>parser <span class=\\\"token operator\\\">=</span> html_parser<span class=\\\"token punctuation\\\">.</span>HtmlParser<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer <span class=\\\"token operator\\\">=</span> html_outputer<span class=\\\"token punctuation\\\">.</span>HtmlOutputer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">crawl</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> root_url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tcount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n\\t\\t<span class=\\\"token comment\\\"># 初始化原始的爬取地址</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>add_new_ursl<span class=\\\"token punctuation\\\">(</span>root_url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">while</span> self<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>has_new_url<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">try</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tnew_url <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>get_new_url<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">'crawl %d : %s'</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">,</span> new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\thtml_cont <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>downloder<span class=\\\"token punctuation\\\">.</span>download<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\tnew_urls<span class=\\\"token punctuation\\\">,</span> new_data <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>parser<span class=\\\"token punctuation\\\">.</span>parse<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">,</span> html_cont<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">.</span>add_new_urls<span class=\\\"token punctuation\\\">(</span>new_urls<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer<span class=\\\"token punctuation\\\">.</span>collect_data<span class=\\\"token punctuation\\\">(</span>new_data<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t\\t\\t<span class=\\\"token comment\\\"># 爬取的数据到1000条时跳出循环</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span> count <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span>\\n\\n\\t\\t\\t\\tcount <span class=\\\"token operator\\\">=</span> count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">except</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\"># 使用sys抛出其他函数错误</span>\\n\\t\\t\\t\\tinfo<span class=\\\"token operator\\\">=</span>sys<span class=\\\"token punctuation\\\">.</span>exc_info<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> info<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">,</span>info<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">'crawl failed'</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 将爬取的数据组装</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>outputer<span class=\\\"token punctuation\\\">.</span>output_html<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'__main__'</span><span class=\\\"token punctuation\\\">:</span>\\n\\troot_url <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'http://baike.baidu.com/item/Python'</span>\\n\\tobj_spider <span class=\\\"token operator\\\">=</span> SpiderMain<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\tobj_spider<span class=\\\"token punctuation\\\">.</span>crawl<span class=\\\"token punctuation\\\">(</span>root_url<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>url管理器</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># url_manager.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UrlManager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>new_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>old_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 添加一条新的url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">add_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>new_urls <span class=\\\"token operator\\\">and</span> url <span class=\\\"token operator\\\">not</span> <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>old_urls<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 添加多条url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">add_new_urls</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> urls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> urls <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span> <span class=\\\"token operator\\\">and</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>urls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">for</span> url <span class=\\\"token keyword\\\">in</span> urls<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tself<span class=\\\"token punctuation\\\">.</span>add_new_url<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 是否有代爬取地址</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span>\\n\\n\\t<span class=\\\"token comment\\\"># 返回一条新的url</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">get_new_url</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tnew_url <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>new_urls<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>old_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_url\\n</code></pre>\\n      </div>\\n<h2>下载器</h2>\\n<p>下载器使用自带的<a href=\\\"https://docs.python.org/2/library/urllib2.html\\\">urllib2</a>库处理请求</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_downloader.py</span>\\n<span class=\\\"token keyword\\\">import</span> urllib2\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlDownloader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">download</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 这里设置一下超时，不然网络会使程序运行出现停止</span>\\n\\t\\tresponse <span class=\\\"token operator\\\">=</span> urllib2<span class=\\\"token punctuation\\\">.</span>urlopen<span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> timeout <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 请求失败时候跳出程序</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> response<span class=\\\"token punctuation\\\">.</span>getcode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">None</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> response<span class=\\\"token punctuation\\\">.</span>read<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>解析器</h2>\\n<p>解析器分为两部分，一个解析，一个输出，首先看看解析模块。</p>\\n<p>解析html我们使用了<a href=\\\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\\\">beautifulsoup</a>，解析后可以使用库提供的方法做DOM操作，获取有用的信息</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_parser.py</span>\\n<span class=\\\"token keyword\\\">from</span> bs4 <span class=\\\"token keyword\\\">import</span> BeautifulSoup\\n<span class=\\\"token keyword\\\">import</span> re\\n<span class=\\\"token keyword\\\">import</span> urlparse\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlParser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_new_urls</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tnew_urls <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 获取a标签中所有匹配的url地址</span>\\n\\t\\tlinks <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find_all<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> href<span class=\\\"token operator\\\">=</span>re<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">compile</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'/item/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">for</span> link <span class=\\\"token keyword\\\">in</span> links<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t \\tnew_url <span class=\\\"token operator\\\">=</span> link<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'href'</span><span class=\\\"token punctuation\\\">]</span>\\n\\t\\t \\tnew_full_url <span class=\\\"token operator\\\">=</span> urlparse<span class=\\\"token punctuation\\\">.</span>urljoin<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> new_url<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t \\tnew_urls<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>new_full_url<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_urls\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_new_data</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tres_data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># 获取页面相关内容</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> page_url\\n\\n\\t\\t<span class=\\\"token comment\\\"># &lt;dd class=\\\"lemmaWgt-lemmaTitle-title\\\"> &lt;h1>Python&lt;/h1></span>\\n\\t\\ttitle_node <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'dd'</span><span class=\\\"token punctuation\\\">,</span> class_<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'lemmaWgt-lemmaTitle-title'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> title_node<span class=\\\"token punctuation\\\">.</span>get_text<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\"># &lt;div class=\\\"lemma-summary\\\" label-module=\\\"lemmaSummary\\\"></span>\\n\\t\\tsummary_node <span class=\\\"token operator\\\">=</span> soup<span class=\\\"token punctuation\\\">.</span>find<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> class_<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'lemma-summary'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tres_data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'summary'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> summary_node<span class=\\\"token punctuation\\\">.</span>get_text<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> res_data\\n\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> page_url<span class=\\\"token punctuation\\\">,</span> html_cont<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> page_url <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span> <span class=\\\"token operator\\\">or</span> html_cont <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\tsoup <span class=\\\"token operator\\\">=</span> BeautifulSoup<span class=\\\"token punctuation\\\">(</span>html_cont<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'html.parser'</span><span class=\\\"token punctuation\\\">,</span> from_encoding<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tnew_urls <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_get_new_urls<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span>\\n\\t\\tnew_data <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_get_new_data<span class=\\\"token punctuation\\\">(</span>page_url<span class=\\\"token punctuation\\\">,</span> soup<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">return</span> new_urls<span class=\\\"token punctuation\\\">,</span> new_data\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># html_outputer.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HtmlOutputer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>datas <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n\\n\\t<span class=\\\"token comment\\\"># 获取到的页面内容对象push到数组中</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">collect_data</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> data <span class=\\\"token keyword\\\">is</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span>\\n\\n\\t\\tself<span class=\\\"token punctuation\\\">.</span>datas<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t<span class=\\\"token comment\\\"># 将数组循环拼接，写入html文件中</span>\\n\\t<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">output_html</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\tfout <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'output.html'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;html>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;body>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;table>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token keyword\\\">for</span> data <span class=\\\"token keyword\\\">in</span> self<span class=\\\"token punctuation\\\">.</span>datas<span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;tr>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;td>%s&lt;/td>'</span><span class=\\\"token operator\\\">%</span>data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'summary'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/tr>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/html>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/body>'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\tfout<span class=\\\"token punctuation\\\">.</span>write<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;/table>'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>短短几行代码就实现了一个简单的爬虫，足以体现python的简单易用。学习python主要是想了解一下机器学习，后面会看一些书籍和资料，应该会再记录，但是后面估计会先写完深度学习javascript系列先。</p>\",\"htmlExcerpt\":\"<p>之前一直有学习python，但是一直都是在学一些比较基础的东西，所在在这段空闲的时间打算系统学一下python。在这会使用python写一个爬百科的简单爬虫，首先分析下爬虫的需求。</p>\\n<h1>主要需求</h1>\\n<p>这个demo中爬虫有3个主要模块，<strong>URL管理器</strong>、<strong>下载器</strong>、<strong>解析器</strong></p>\\n<ul>\\n<li>URL管理器主要处理爬取的URL的状态。</li>\\n<li>下载器会通过<strong>URL管理器</strong>传送过来有效URL进行下载。</li>\\n<li>解析器会将<strong>下载器</strong>下载的内容解析成字符串，再进行保存。如果解析出有效URL再传给<strong>URL管理器</strong>进行重复操作。</li>\\n</ul>\\n<h2>入口程序</h2>\\n<p><code>spider_main</code>文件为程序入口，处理整个爬虫的运行逻辑</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"深入学习javascript--作用域\",\"date\":\"2017-05-31\",\"category\":null,\"tags\":null,\"path\":\"/post/js-scope\"},\"excerpt\":\"\\n# 前言\\n使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。\\n\\n# 作用域是什么\\nJS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为**作用域**。\\n\\n\\n\\n## 理解作用域执行过程\\n如在`var a = 2`执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。\\n\\n首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在**作用域**中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为**引擎**生成运行时所需的代码，代码用来处理`a = 2`这个赋值操作。引擎运行时会首先询问**作用域**当前作用集合是否有一个`a`的变量。如果是，**引擎**就会使用这个变量；如果不是，引擎会继续查找该变量。如果**引擎**找到`a`变量，就会赋值2。否则，**引擎**会抛出一个异常。\\n\\n**总结**：变量赋值分别有两个动作，**编译器**会在当前**作用域**中声明一个变量（如果之前没有声明过），然后在运行时引擎会在**作用域**中查找该变量，如果能找到就对变量进行赋值。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"前言\"},{\"depth\":1,\"value\":\"作用域是什么\"},{\"depth\":2,\"value\":\"理解作用域执行过程\"},{\"depth\":3,\"value\":\"LSH和RSH查询\"},{\"depth\":2,\"value\":\"提升\"},{\"depth\":3,\"value\":\"函数优先\"},{\"depth\":2,\"value\":\"作用域嵌套\"},{\"depth\":1,\"value\":\"函数作用域\"},{\"depth\":1,\"value\":\"块作用域\"},{\"depth\":2,\"value\":\"延长作用域链(块作用域)\"},{\"depth\":1,\"value\":\"总结\"}],\"html\":\"<h1>前言</h1>\\n<p>使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。</p>\\n<h1>作用域是什么</h1>\\n<p>JS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为<strong>作用域</strong>。</p>\\n<h2>理解作用域执行过程</h2>\\n<p>如在<code class=\\\"language-text\\\">var a = 2</code>执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。</p>\\n<p>首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。</p>\\n<ol>\\n<li>遇到var a，编译器会在<strong>作用域</strong>中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。</li>\\n<li>接下来，编译器会为<strong>引擎</strong>生成运行时所需的代码，代码用来处理<code class=\\\"language-text\\\">a = 2</code>这个赋值操作。引擎运行时会首先询问<strong>作用域</strong>当前作用集合是否有一个<code class=\\\"language-text\\\">a</code>的变量。如果是，<strong>引擎</strong>就会使用这个变量；如果不是，引擎会继续查找该变量。如果<strong>引擎</strong>找到<code class=\\\"language-text\\\">a</code>变量，就会赋值2。否则，<strong>引擎</strong>会抛出一个异常。</li>\\n</ol>\\n<p><strong>总结</strong>：变量赋值分别有两个动作，<strong>编译器</strong>会在当前<strong>作用域</strong>中声明一个变量（如果之前没有声明过），然后在运行时引擎会在<strong>作用域</strong>中查找该变量，如果能找到就对变量进行赋值。</p>\\n<!-- more -->\\n<h3>LSH和RSH查询</h3>\\n<p>定义一个变量<code class=\\\"language-text\\\">var a = 2</code>，或者执行一个简单的函数<code class=\\\"language-text\\\">console.log(2)</code>中，会同时或者单独出现<strong>LSH</strong>或者<strong>RSH</strong>查询。其实在作用域执行过程中，第一步就是LSH查询，第二步就是RSH查询，简单点来说</p>\\n<ul>\\n<li>LSH查询就是找到变量的容器本身</li>\\n<li>RSH查询就是找到容器的原值</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// var a就是LSH</span>\\n<span class=\\\"token comment\\\">// a = 2就是RSH</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 这里的a其实就是做了一个RSH查询</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>为什么需要理解这两个概念呢，因为在变量没有声明的情况下，这两种查询的行为是不一样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\tb <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>在第一次对b做RSH查询时候是无法找到该变量，所以引擎在这时候就会报出一个<code class=\\\"language-text\\\">ReferenceError</code>的错误。第二个b也还没有声明，但是引擎并没有报错，因为这里先做了LSH查询，所以可以知道，LSH查询如果未找到变量，会在全局中定义一个变量b（非严格模式下），再做RSH查询。引擎还有一个<code class=\\\"language-text\\\">TypeError</code>的错误，在试图对一个非函数类型的值执行函数调用，或者引用<code class=\\\"language-text\\\">null</code>, <code class=\\\"language-text\\\">undefined</code>类型值中的属性时候，就会报这个错误。</p>\\n<h2>提升</h2>\\n<p>很多时候都会认为javascript代码是由上到下一行一行执行的，但实际上并不完全正确，有一种特殊情况会导致这个假设是错误的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>还有另外一段</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>当js执行一个<code class=\\\"language-text\\\">var a = 2</code>的时候，这里并不是我们看到的一个声明，而是<code class=\\\"language-text\\\">var a</code>, <code class=\\\"language-text\\\">a = 2</code>两个声明，<code class=\\\"language-text\\\">var a</code>会在编译阶段执行，<code class=\\\"language-text\\\">a = 2</code>则会在执行阶段执行。所以第二段代码就很容易解释通了，代码执行顺序应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\na <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>而这个函数声明自动移动到顶部，就叫做<strong>提升</strong>。</p>\\n<p>提升操作会出现在<strong>每个作用域</strong>中，看以下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>实际执行如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ta <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>可以看到，函数声明会被提升到最顶部，但是函数表达式却不会被提升</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ReferenceError</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在这里要注意，把foo分配到具名函数下，但是具名函数下也无法在所在作用域中运行。上面函数的执行方式应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n\\n<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ReferenceError</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">...</span> self <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3>函数优先</h3>\\n<p>从上面可以知道定义变量和声明函数都会触发提升，但是如果在重复声明的代码下，会出现什么情况呢</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n\\n<span class=\\\"token keyword\\\">var</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里会出现<strong>1</strong>而不是<strong>2</strong>！因为函数会首先被提升，再到变量，所以执行顺序应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function-variable function\\\">foo</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在一个普通的块( { ... } 的代码)，函数也会提升，如下代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// ...</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的<code class=\\\"language-text\\\">foo</code>和<code class=\\\"language-text\\\">bar</code>都不会按判断来声明函数，所以在判断声明函数并不可靠。</p>\\n<h2>作用域嵌套</h2>\\n<p>当一个块或者函数嵌套在另一个块或者函数中，就称为作用域嵌套。在当前作用域没有找到某个变量时，<strong>引擎</strong>就会在外层的作用域继续查找，直到找到该变量，或者抵达最外层（全局）作用域为止。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// b在函数中尚未定义，所以在上一个作用域中查找</span>\\n\\t<span class=\\\"token comment\\\">// 在全局中找到变量b，赋值</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<h1>函数作用域</h1>\\n<p>每个函数都有自己的执行环境，或者说函数有自己作用域。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而函数执行之后，栈将其环境弹出，把控制权返回之前的执行环境。函数作用域内的变量访问正是又这个执行机制控制着。而通过这一机制，能实现隐藏作用域中变量或者函数，规避同名标识符之间的冲突。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// i会从for块中找到变量容器，然后执行赋值</span>\\n\\t\\ti <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// 执行bar后会给i重新赋值3，满足i&lt;=10，函数死循环</span>\\n\\t\\t<span class=\\\"token function\\\">bar</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这时候只需要在bar内部修改<code class=\\\"language-text\\\">i = 3</code>为<code class=\\\"language-text\\\">var i = 3</code>，将i变为<code class=\\\"language-text\\\">bar</code>中的本地变量即可。除了新建一个函数去隐藏变量，还能通过匿名函数的特性去实现隐藏变量，社区中也称为<strong>IIFE</strong>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n</code></pre>\\n      </div>\\n<p>还能当作函数调用传参</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>global<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 3</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>global<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>通过隐藏变量活着函数，能实现<strong>全局命名空间</strong>或者<strong>JS模块化</strong>(后面会讨论到)。</p>\\n<h1>块作用域</h1>\\n<p>在JS中块作用域并不常见，但是某些代码却经常会被误以为是块作用域，所以很容易造成理解上的错误，例如下面的常用代码</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> foo<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10 bar</span>\\n</code></pre>\\n      </div>\\n<p>上面代码的<code class=\\\"language-text\\\">i</code>和<code class=\\\"language-text\\\">foo</code>其实都在外部作用域中定义的，而不是在代码块中定义的变量，所以平时在这些代码中定义变量应该是距离使用的地方越近越好。</p>\\n<h2>延长作用域链(块作用域)</h2>\\n<ul>\\n<li>\\n<p>with语句。with从对象中创建出来的对象只在with声明中有效。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">var</span> qs <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"?bar=true\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">with</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// href实际是location.href，只能在with内部使用</span>\\n\\t<span class=\\\"token keyword\\\">var</span> url <span class=\\\"token operator\\\">=</span> href <span class=\\\"token operator\\\">+</span> qs<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> url<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>try/catch中的catch分句会创造一个块作用域，声明的错误对象变量仅在catch内部有效。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token function\\\">undefined</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 强制执行一个错误操作</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>console.log(err); // ReferenceError</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">## let/const\\n在ES6中，引入了let和const，提供了除var以外的另一种声明变量的方式。用let/const声明的变量会绑定在所在的所用域中（通常是{ ... }内部，换句话说，let/const能劫持所在作用域。\\n```javascript\\n// 修改下上面的循环例子\\nfor(let i = 0; i &lt; 10; i++) {\\n\\tconsole.log(i);\\n}\\n\\nconsole.log(i); // ReferenceError</code></pre>\\n      </div>\\n<p>const在使用方法上跟len是一样，只是创建的值是固定的（常量）。后面任何修改值的操作都会报错。<strong>(注：const实际保证的并不是常量不能改变，而是变量的内存地址不能改变，所以对于复杂的类型object，也只能保证对象的指针地址是固定的，但是对象内部的数据结构则不能固定)</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfoo<span class=\\\"token punctuation\\\">.</span>bar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">.</span>bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// bar</span>\\n\\nfoo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// TypeError</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>通过学习js中的作用域运行方式，了解变量在执行环境的声明周期，以及哪部分代码能访问其中的变量。能为后面学习<strong>闭包</strong>还有实现模块化打下基础。以下是关于作用域的几点总结：</p>\\n<ul>\\n<li>函数局部环境不仅有访问函数作用域的变量的权限，而且还有权访问其包含(父)环境的变量。</li>\\n<li>除全局、函数作用域外，还有比较少用的块作用域。</li>\\n</ul>\",\"htmlExcerpt\":\"<h1>前言</h1>\\n<p>使用js已经有一段时间了，一开始觉得js只是一门玩具语言，用来做做前端交互效果。但是随着越来越深入，慢慢发现js的其他优点：灵活的自由的代码编写带来多种多样的设计方式，令人慢慢着迷。但是很多时候都感觉只是停留在如何使用js实现相关的功能，偶尔遇到一些特殊的情况或者需要深度优化的点，就会感到惘然，为了打破这尴尬情况，打算开始读相关的一些书籍来分析js更深层的设计还有使用方式，从而“达到知其然且知其所以然”。</p>\\n<h1>作用域是什么</h1>\\n<p>JS中每个函数都有自己的执行环境，在执行环境中能够储存变量中的值，并且能在之后对值进行访问或者修改。换句话说，规定变量储存在哪里，程序要如何找到这些变量，这套规则就称为<strong>作用域</strong>。</p>\\n<h2>理解作用域执行过程</h2>\\n<p>如在<code>var a = 2</code>执行过程中，分别有引擎、编译器、作用域三个参与了这次过程。</p>\\n<p>首先，编译器会将这段程序分解成词法单元，然后将词法单元解析成一个树结构。\\n1. 遇到var a，编译器会在<strong>作用域</strong>中查找是有已经存在有该名称的变量。如果是，编译器会忽略这一声明，继续编译；否则，会要求作用域在当前作用域集合中声明一个新变量，并命名为a。\\n2. 接下来，编译器会为<strong>引擎</strong>生成运行时所需的代码，代码用来处理<code>a = 2</code>这个赋值操作。引擎运行时会首先询问<strong>作用域</strong>当前作用集合是否有一个<code>a</code>的变量。如果是，<strong>引擎</strong>就会使用这个变量；如果不是，引擎会继续查找该变量。如果<strong>引擎</strong>找到<code>a</code>变量，就会赋值2。否则，<strong>引擎</strong>会抛出一个异常。</p>\\n<p><strong>总结</strong>：变量赋值分别有两个动作，<strong>编译器</strong>会在当前<strong>作用域</strong>中声明一个变量（如果之前没有声明过），然后在运行时引擎会在<strong>作用域</strong>中查找该变量，如果能找到就对变量进行赋值。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"js实现add(1)(2)(3)\",\"date\":\"2017-05-28\",\"category\":[\"javascript\"],\"tags\":null,\"path\":\"/post/add-chain\"},\"excerpt\":\"\\n# 题目\\n之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现\\n\\n```javascript\\nfunction add(x) {\\n\\tvar fn = function(y) {\\n\\t\\treturn add(x + y);\\n\\t}\\n\\n\\treturn fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"题目\"},{\"depth\":1,\"value\":\"实现方法\"}],\"html\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<h1>实现方法</h1>\\n<p>这样写是可以实现调用方式，但是怎么<code class=\\\"language-text\\\">return x</code>呢，回来想还是一脸懵逼，于是上网找了点其他人的实现方式，发现他们是重写了<code class=\\\"language-text\\\">object</code>的<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>的方法。然后再跑了一遍。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\tfn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">toString</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> x<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">return</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// chrome  function 6</span>\\n<span class=\\\"token comment\\\">// firefox function add/fn</span>\\n<span class=\\\"token comment\\\">// node    { [Number: 6] toString: [Function], valueOf: [Function] }</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 6</span>\\n</code></pre>\\n      </div>\\n<p>由此看出在不同客户端下返回的结果并不一样，并不是完美的结果，但是查阅了其他资料并没有其他十分好的解决办法，估计这道题的考查点是关于js深度的，比如原生对象里面的基本方法和<code class=\\\"language-text\\\">alert</code>, <code class=\\\"language-text\\\">console</code>会自动执行toString等方法。</p>\\n<p>另外，<code class=\\\"language-text\\\">valueOf</code>和<code class=\\\"language-text\\\">toString</code>方法其实是差不多的，返回的结果基本都是相同的，但是试了一下定义了两个不同的方法，发现总是会返回valueOf的值先，所以觉得toString应该是应用于valueOf的结果。</p>\",\"htmlExcerpt\":\"<h1>题目</h1>\\n<p>之前在YY面试的时候遇到过的一题: 实现add(1)(2)(3)，返回6，注意可拓展性。\\n当时第一反应就是用递归实现</p>\\n<pre><code class=\\\"language-javascript\\\">function add(x) {\\n    var fn = function(y) {\\n        return add(x + y);\\n    }\\n\\n    return fn;\\n}\\n\\nconsole.log(add(1)(2)(3))\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"Promise的简单实现\",\"date\":\"2017-05-17\",\"category\":[\"前端\"],\"tags\":[\"javascript\"],\"path\":\"/post/js-promise\"},\"excerpt\":\"\\n老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，[promise](https://promisesaplus.com/)（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。\\n\\n下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。\\n\\n\\n\\n# 初步构建一个Promise\\n我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现\\n```javascript\\n// 例1\\nfunction getAsyncData() {\\n\\treturn new Promise(function(resolve, reject) {\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tresolve('promise done!')\\n\\t\\t}, 1000)\\n\\t})\\n}\\n\\ngetAsyncData().then(function(result) {\\n\\tconsole.log(result);\\n}).then(function() {\\n\\tconsole.log('done too!');\\n})\\n```\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"初步构建一个Promise\"},{\"depth\":1,\"value\":\"引入状态\"},{\"depth\":1,\"value\":\"串行promise\"},{\"depth\":1,\"value\":\"添加reject功能\"},{\"depth\":1,\"value\":\"总结\"},{\"depth\":2,\"value\":\"参考\"}],\"html\":\"<p>老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，<a href=\\\"https://promisesaplus.com/\\\">promise</a>（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。</p>\\n<p>下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。</p>\\n<h1>初步构建一个Promise</h1>\\n<p>我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 例1</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'promise done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'done too!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<!-- more -->\\n<p><code class=\\\"language-text\\\">getAsyncData</code>函数中返回一个promise对象，然后通过<code class=\\\"language-text\\\">then</code>方法执行函数的回调，然后尝试实现一下这个基本的功能</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// promise.js</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Primose</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> callbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">done</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t\\t<span class=\\\"token comment\\\">// 支持链式调用</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// push到队列的最底端，保证链式代码执行完后再执行方法</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>到这里就完成了promise的基础功能，然后执行一下看下有没有达到预期情况:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node promise\\npromise done<span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token keyword\\\">done</span> too<span class=\\\"token operator\\\">!</span>\\n</code></pre>\\n      </div>\\n<p>乍看一下，怎么有点像lazyman(js中比较有名的题目，可以自行百度一下) ，看来平时多读书还是有好处的（手动滑稽）v</p>\\n<h1>引入状态</h1>\\n<p>这里我们可以先看下<a href=\\\"https://promisesaplus.com/#requirements\\\">promise状态规范</a></p>\\n<p>promise必需在pending, fulfilled或者reject三个状态中的一个</p>\\n<ul>\\n<li>\\n<p>当promise在pending状态中</p>\\n<ul>\\n<li>可以变为fulfilled或者reject状态</li>\\n</ul>\\n</li>\\n<li>\\n<p>当promise在fulfilled中</p>\\n<ul>\\n<li>不能过渡为其他状态</li>\\n<li>必需返回一个值，并且不能改变</li>\\n</ul>\\n</li>\\n<li>\\n<p>当promise在reject中</p>\\n<ul>\\n<li>不能过渡为其他状态</li>\\n<li>必需返回一个失败原因，并且不能改变</li>\\n</ul>\\n</li>\\n</ul>\\n<p>从这里可以看出，我们需要添加一个<code class=\\\"language-text\\\">status</code>变量保存状态，并且随着代码执行更新状态。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tvalue <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tvalue <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>串行promise</h1>\\n<p>在执行promise的时候，经常会在<code class=\\\"language-text\\\">then</code>的方法里面执行另外一个promise，<em>串联执行promise应该是promise里面最有趣并且是最核心的功能了</em>。</p>\\n<p>串行promise指执行完一个异步函数达到fulfilled状态后，接着执行下一个promise，例如</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 接着例1</span>\\n\\n<span class=\\\"token function\\\">getAsyncData</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>getAsyncData2<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'done too!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getAsyncData2</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'next promise done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>要实现这个功能，首先，我们，之前的<code class=\\\"language-text\\\">then</code>方法是直接把<code class=\\\"language-text\\\">this</code>返回出去，所以实现链式调用，执行起来的时候也扛扛的，没毛病，但如果then中执行下一个promise，这时候按上面的代码，应该是直接就return一个promise出去的，走不了下一步，所以<code class=\\\"language-text\\\">then</code>方法应该需要处理一下，promise的执行方式应该要变为：</p>\\n<ol>\\n<li>执行代码，将所有方法push到<code class=\\\"language-text\\\">callbacks</code>数组里面</li>\\n<li>如果<code class=\\\"language-text\\\">then</code>中是一个promise，把剩下的<code class=\\\"language-text\\\">callbacks</code>提交到这个promise中执行</li>\\n<li>再循环第一步</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// value = null,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttemp <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 顺序执行数组，如果是resolve返回value</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 如果是promise则把后面的then方法提交到下个promise中执行</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>temp <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\ttemp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\tvalue <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>添加reject功能</h1>\\n<p>因为不确定then方法中是否会添加reject的处理，所以选用了一个比较笨的方法，加一个<code class=\\\"language-text\\\">errDerrers</code>的数组，每次执行不管有没有方法<code class=\\\"language-text\\\">then</code>都<code class=\\\"language-text\\\">push</code>到数组里面，<code class=\\\"language-text\\\">resolve</code>一个方法就<code class=\\\"language-text\\\">shift</code>一个，跟成功的回调一样，当reject的时候，判断下当前的方法是不是一个可执行函数，如果是的话则执行。至于catch的方法按这个思路暂时没想到，后面想到再更新。修改的地方都有添加注释。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Promise</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">var</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token comment\\\">// value = null,</span>\\n\\t\\terror <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\terrDeffers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tcallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">then</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">,</span> rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'pending'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\tcallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 每次执行then都push一次</span>\\n\\t\\t\\t\\terrDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token comment\\\">// reject的话直接执行</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'rejected'</span><span class=\\\"token punctuation\\\">:</span>\\n\\t\\t\\t\\t<span class=\\\"token function\\\">rejected</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">catch</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>errDeffer <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\terrDeffer <span class=\\\"token operator\\\">=</span> rejected<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttemp <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\terrDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 顺序执行数组，如果是resolve返回value</span>\\n\\t\\t\\t\\t<span class=\\\"token comment\\\">// 如果是promise则把后面的then方法提交到下个promise中执行</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>temp <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token comment\\\">// 成功的时候也要更新一下errDeffers数组</span>\\n\\t\\t\\t\\t\\t\\ttemp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> errDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\tvalue <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token comment\\\">// reject方法</span>\\n\\t<span class=\\\"token comment\\\">// 判断rejected是否一个函数，是的话执行，不是的话抛出一个错误</span>\\n\\t<span class=\\\"token comment\\\">// reject也要提交到栈的最底端执行</span>\\n\\t<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tstate <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'rejected'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\terror <span class=\\\"token operator\\\">=</span> err<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> rejected <span class=\\\"token operator\\\">=</span> errDeffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>rejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Function]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Uncaught promise error!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\t<span class=\\\"token function\\\">rejected</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t<span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>找资料的时候看到<a href=\\\"http://tech.meituan.com/promise-insight.html\\\">美团技术团队博客的实现方式</a>采用了另外一种解决方式解决串行promise，后面接着研究下，有兴趣也可以自行看下。\\n实现promise应该有下面几个要点：</p>\\n<ol>\\n<li>函数的顺序执行</li>\\n<li>处理好状态（这部分感觉我的方法跟promiseA的状态要求有点偏差）</li>\\n<li>链式调用\\n这个例子只是根据promise的执行方式实现大概的功能，后面或许会根据promise规范去实现一个比较规范的demo。</li>\\n</ol>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://promisesaplus.com/#requirements\\\">Promises/A+</a></li>\\n<li><a href=\\\"http://tech.meituan.com/promise-insight.html\\\">剖析 Promise 之基础篇</a></li>\\n<li><a href=\\\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\\\">Javascript异步编程的4种方法</a></li>\\n</ul>\",\"htmlExcerpt\":\"<p>老前端都知道，js分为同步(sync)和异步(async)两种模式，同步简单来说就是排队，一个接着一个。异步则是函数执行完后执行它的回调函数，而下一个函数不等上一个函数完成就开始执行。使用回调函数能解决大部分的异步问题，但是回调一多就很容易掉进‘回调地狱’，为了解决这个问题，<a href=\\\"https://promisesaplus.com/\\\">promise</a>（CommonJS工作组提出的一种规范）给我们提供了一种更为优雅的解决方式。</p>\\n<p>下面，我们会尝试实现一个promise，通过实现这个demo，能更好地理解promise的运行方式，使平时在使用的时候更加熟练，也能从实现原理中进行深入探讨，从而达到“知其然且知其所以然”。</p>\\n<h1>初步构建一个Promise</h1>\\n<p>我们看下平时使用promise处理异步函数时候的使用方式，从调用方法看下大概用什么方式去实现</p>\\n<pre><code class=\\\"language-javascript\\\">// 例1\\nfunction getAsyncData() {\\n    return new Promise(function(resolve, reject) {\\n        setTimeout(function() {\\n            resolve('promise done!')\\n        }, 1000)\\n    })\\n}\\n\\ngetAsyncData().then(function(result) {\\n    console.log(result);\\n}).then(function() {\\n    console.log('done too!');\\n})\\n</code></pre>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"前端单元测试&Mocha指北\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"tags\":null,\"path\":\"/post/unit-test\"},\"excerpt\":\"\\n# 什么是单元-测试?\\n- 单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。\\n- 而测试，就是测试啦。\\n\\n所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。\\n\\n# 为什么要写单元测试？\\n单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。\\n\\n\",\"headings\":[{\"depth\":1,\"value\":\"什么是单元-测试?\"},{\"depth\":1,\"value\":\"为什么要写单元测试？\"},{\"depth\":1,\"value\":\"干了这杯 \\\"Mocha\\\"\"},{\"depth\":2,\"value\":\"举个例子\"},{\"depth\":1,\"value\":\"小结\"}],\"html\":\"<h1>什么是单元-测试?</h1>\\n<ul>\\n<li>单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。</li>\\n<li>而测试，就是测试啦。</li>\\n</ul>\\n<p>所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。</p>\\n<h1>为什么要写单元测试？</h1>\\n<p>单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。</p>\\n<!-- more -->\\n<h1>干了这杯 \\\"Mocha\\\"</h1>\\n<p>mocha是一个js测试框架，除此外，类似的测试框架还有Jasmine、Karma、Tape等，至于为什么要介绍Mocha？因为我只懂这一个。\\n上代码前还要普及一下两个概念</p>\\n<ul>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E8%A1%8C%E4%B8%BA%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91\\\">BDD（Behavior Driven Development）</a>\\nBDD意为行为驱动开发，是一种敏捷软件开发技术，具体内容大家可以参考wikipedia的解释。</li>\\n<li><a href=\\\"https://zh.wikipedia.org/wiki/%E6%96%B7%E8%A8%80_(%E7%A8%8B%E5%BC%8F)\\\">Assertion 断言</a>\\n断言，就是判断代码的执行结果与预期是否一致，不一致就抛出错误，说得简单点就是判断程序的真假。</li>\\n</ul>\\n<h2>举个例子</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.js</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> add\\n</code></pre>\\n      </div>\\n<p>通常测试脚本要与测试源码同名，比如add.js的测试脚本就是add.test.js</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.test.js</span>\\n<span class=\\\"token keyword\\\">const</span> add <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./add.js'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> expect <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chai'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>expect\\n\\n<span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'加法函数测试'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1 + 1 等于 2'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>be<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'返回值是Number'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>to<span class=\\\"token punctuation\\\">.</span>be<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">a</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>上面代码块就是测试脚本，可独立运行，测试脚本中应该包括一个或多个<code class=\\\"language-text\\\">describe</code>块，每个<code class=\\\"language-text\\\">describe</code>块应包括多个<code class=\\\"language-text\\\">it</code>块。\\n<code class=\\\"language-text\\\">describe</code>是测试套件，这个方法需要传两个参数，第一个为测试套件的名称<code class=\\\"language-text\\\">(&#39;加法函数测试&#39;)</code>，第二个是执行函数。\\n<code class=\\\"language-text\\\">it</code>块是测试用例，表示一个单独的测试，是测试的最小单位，第一个参数是测试用例的名称('1 + 1 等于 2')，第二个是执行函数。</p>\\n<p>然后在terminal下执行<code class=\\\"language-text\\\">mocha add.test.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-terminal\\\"><code class=\\\"language-terminal\\\">$ mocha add.test.js\\n\\n   加法函数测试\\n     √ 1 + 1 等于 2\\n     √ 返回值是Number\\n   2 passing (12ms)</code></pre>\\n      </div>\\n<p>如果我们改变一下<code class=\\\"language-text\\\">add.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// add.js</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">*</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> add\\n</code></pre>\\n      </div>\\n<p>然后再执行一下<code class=\\\"language-text\\\">mocha add.test.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-terminal\\\"><code class=\\\"language-terminal\\\">$ mocha add.test.js\\n\\n   加法函数测试\\n     √ 1 + 1 等于 2\\n     1) 返回值是Number\\n   1 passing (8ms)\\n   1 failing\\n\\n   1) 加法函数测试 返回值是Number:\\n       AssertionError: expected 2 to equal 3\\n       + expected - actual\\n\\n       -2\\n       +3\\n\\n       at Context.it(add.test.js:6:27)</code></pre>\\n      </div>\\n<p>这里也可以很明显看出哪个测试用例报错、还有报错的位置，这样在开发的时候开发人员就能很容易定位错误。</p>\\n<h1>小结</h1>\\n<p>从上面一个简单的例子可以看出，利用mocha实现自动化测试是很简单的。虽然前期开发需要花一点时间去写单元测试，但是后面提供的便利性足以将其弥补。</p>\",\"htmlExcerpt\":\"<h1>什么是单元-测试?</h1>\\n<ul>\\n<li>单元就是相对独立的功能模块，例如一个函数或者一个类。一个完整的模块化的程序，都应该是有许多个单元构成，单元能完成自己的任务，然后与其他单元进行交互 ，从而完成整个程序的功能。</li>\\n<li>而测试，就是测试啦。</li>\\n</ul>\\n<p>所以单元测试通俗点讲就是对程序每个独立的单元分别测试，保证构成程序的每个模块的正确性，从而保证整个程序的正确运行。</p>\\n<h1>为什么要写单元测试？</h1>\\n<p>单元测试在前端还是不太普及的，因为刚开始前端也是偏向‘UI’那一块的，但随着node的发展，越来越多非‘UI’的前端代码，一个团队也越来越多人参加开发，如果系统一复杂，又或者你的模块提交到npm上面的话，一出错基本就GG了。\\n又或者你这样想，测试是逃不掉的，要么在dev上测试，要么在prod上测试，怎么都得测试，而且每次提交都要测试，为什么不写自动测试呢。我也相信大多数程序员也有写完跑跑看的习惯，而单元测试的log都直接打印到console里面，也省去了很多编译，打包的时间，又能满足各位的心理需求（猥琐脸），一举两得啊。</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"使用nodejs写一个命令行程序\",\"date\":\"2017-05-16\",\"category\":[\"前端\"],\"tags\":[\"nodejs\",\"bash\"],\"path\":\"/post/node-command-app\"},\"excerpt\":\"\\n> 原文译自[Smashing Magazine](https://www.smashingmagazine.com/) -- [[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)\\n\\n相信很多前端都听说过或者使用过[Gulp](http://www.gulpjs.com.cn/), [Angular CLI](https://cli.angular.io/), [Cordova](https://cordova.apache.org/), [Yeoman](http://yeoman.io/)或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用`ng new <project-name>`后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。\\n\\n在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用[SendGrid Api](https://github.com/sendgrid/sendgrid-nodejs)模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令\\n\\n\",\"headings\":[{\"depth\":2,\"value\":\"“Hello World”\"},{\"depth\":2,\"value\":\"处理命令行参数\"},{\"depth\":2,\"value\":\"运行时输入参数\"},{\"depth\":2,\"value\":\"模拟发送邮件\"},{\"depth\":2,\"value\":\"变成bash命令\"}],\"html\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://www.smashingmagazine.com/\\\">Smashing Magazine</a> -- <a href=\\\"https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/\\\">[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)</a></p>\\n</blockquote>\\n<p>相信很多前端都听说过或者使用过<a href=\\\"http://www.gulpjs.com.cn/\\\">Gulp</a>, <a href=\\\"https://cli.angular.io/\\\">Angular CLI</a>, <a href=\\\"https://cordova.apache.org/\\\">Cordova</a>, <a href=\\\"http://yeoman.io/\\\">Yeoman</a>或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用<code class=\\\"language-text\\\">ng new &lt;project-name&gt;</code>后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。</p>\\n<p>在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用<a href=\\\"https://github.com/sendgrid/sendgrid-nodejs\\\">SendGrid Api</a>模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令</p>\\n<!-- more -->\\n<hr>\\n<h2>“Hello World”</h2>\\n<p>开始前，首先你得有node，如果没有，请自行安装下。node中自带npm，使用<a href=\\\"https://www.npmjs.com/\\\">npm</a>能安装许多开源的node模块。首先，使用npm创建一个node项目</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> init\\nname: broadcast\\nversion: 0.0.1\\ndescription: CLI utility to broadcast email\\nentry point: broadcast.js\\n</code></pre>\\n      </div>\\n<p>除这些参数外，npm还提供了其他如Git repository等参数，可根据自身需求设置输入。执行完<code class=\\\"language-text\\\">npm init</code>后，会发现在同目录下生成了一个<code class=\\\"language-text\\\">package.json</code>文件，文件里面包含了上面命令输入的信息。配置内容信息可以在<a href=\\\"https://docs.npmjs.com/files/package.json\\\">package.json文档</a>中找到。</p>\\n<p>然后，还是从最简单的Hello World入手。首先在同目录下建一个<code class=\\\"language-text\\\">broadcast.js</code>文件</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello World!'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>然后在terminal中执行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast\\nHello World<span class=\\\"token operator\\\">!</span>\\n</code></pre>\\n      </div>\\n<p>well done, 根据<a href=\\\"https://docs.npmjs.com/files/package.json\\\">package.json文档</a>，我们可以找到一个<code class=\\\"language-text\\\">dependencies</code>参数，在这参数中你可以找到所有这项目需要用到的第三方模块和它们的版本号，上面也有提及到，我们需要用到模块去开发这个工具。最后开发完成，<code class=\\\"language-text\\\">package.json</code>应该如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"version\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"0.0.1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"CLI utility to broadcast emails\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast.js\\\"</span>\\n    <span class=\\\"token property\\\">\\\"license\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MIT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"dependencies\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">\\\"chalk\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^1.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"commander\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.9.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"csv\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^1.1.0\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token property\\\">\\\"inquirer\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"^2.0.0\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这几个模块 <a href=\\\"https://github.com/chalk/chalk\\\">Chalk</a>, <a href=\\\"https://github.com/tj/commander.js\\\">Commander</a>, <a href=\\\"https://github.com/sboudrias/Inquirer.js\\\">Inquirer</a>, <a href=\\\"http://www.adaltas.com/en/2012/08/21/node-csv-stable-version-0-1-0/\\\">CSV</a>的具体用处跟其他参数，可以自行查看。</p>\\n<h2>处理命令行参数</h2>\\n<p>node原生也有读取命令行的函数<a href=\\\"https://nodejs.org/docs/latest/api/process.html\\\"><code class=\\\"language-text\\\">process.argv</code></a>，但是解析参数是个繁琐的工作，所以我们会使用<a href=\\\"https://github.com/tj/commander.js\\\">Commander</a>去替代这些工作。Commande的另外一个好处就是不用额外的去写一个<code class=\\\"language-text\\\">--help</code>函数，只要定义了其他参数，<code class=\\\"language-text\\\">--help</code>函数就会自动生成。首先安装一下Commander和其他package</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> commander chalk csv inquirer --save\\n</code></pre>\\n      </div>\\n<p>然后修改<code class=\\\"language-text\\\">broadcast.js</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'commander'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'list of customers in CSV file'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>从上面可以看出，处理一个参数是十分简单的。我们定义了一个<code class=\\\"language-text\\\">--list</code>的参数，现在我们就能通过<code class=\\\"language-text\\\">--list</code>参数获取到命令行传过来的值。在这程序中，list应该是接收一个csv的地址参数，然后打印在console中。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --list ./test.csv\\n./test.csv\\n</code></pre>\\n      </div>\\n<p>从js中可以看到还有一个<code class=\\\"language-text\\\">version</code>参数，所以我们可以使用<code class=\\\"language-text\\\">--version</code>读取版本号。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --version\\n0.0.1\\n</code></pre>\\n      </div>\\n<p>又或者能使用<code class=\\\"language-text\\\">--help</code>获取app能接收的参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast --help\\n\\n  Usage: broadcast <span class=\\\"token punctuation\\\">[</span>options<span class=\\\"token punctuation\\\">]</span>\\n\\n  Options:\\n\\n    -h, --help                 output usage information\\n    -V, --version              output the version number\\n    -l, --list <span class=\\\"token operator\\\">&lt;</span>list<span class=\\\"token operator\\\">></span>          list of customers <span class=\\\"token keyword\\\">in</span> CSV <span class=\\\"token function\\\">file</span>\\n</code></pre>\\n      </div>\\n<p>现在我们已经能够接收到命令行传递过来的参数了，下面我们会利用接收到的CSV文件地址，并使用<a href=\\\"http://www.adaltas.com/en/2012/08/21/node-csv-stable-version-0-1-0/\\\">CSV</a>模块处理CSV文件的内容。\\n我们会使用下面的比哦啊哥内容作为CSV文件的内容。使用CSV模块，会读取内容，并显示各列的内容。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>First name</th>\\n<th>Last name</th>\\n<th>Email</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Dwight</td>\\n<td>Schrute</td>\\n<td>dwight.schrute@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Jim</td>\\n<td>Halpert</td>\\n<td>jim.halpert@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Pam</td>\\n<td>Beesly</td>\\n<td>pam.beesly@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Ryan</td>\\n<td>Howard</td>\\n<td>ryan.howard@dundermifflin.com</td>\\n</tr>\\n<tr>\\n<td>Stanley</td>\\n<td>Hudson</td>\\n<td>stanley.hudson@dundermifflin.com</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>现在，更新下<code class=\\\"language-text\\\">broadcast.js</code>，使用CSV读取内容并打印在console</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'commander'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> csv <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'csv'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'List of customers in CSV'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\nstream\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> delimiter <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\",\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n         <span class=\\\"token keyword\\\">const</span> firstname <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n         <span class=\\\"token keyword\\\">const</span> lastname <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n         <span class=\\\"token keyword\\\">const</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n\\n         console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>firstname<span class=\\\"token punctuation\\\">,</span> lastname<span class=\\\"token punctuation\\\">,</span> email<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>除csv模块外，还使用了node的<a href=\\\"https://nodejs.org/dist/latest-v7.x/docs/api/fs.html\\\">File System</a>模块读取文件内容，csv的<code class=\\\"language-text\\\">parse</code>方法把列数据解析为数组，然后在terminal中运行一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast.js --list ./test.csv\\nDwight Schrute dwight.schrute@dundermifflin.com\\nJim Halpert jim.halpert@dundermifflin.com\\nPam Beesly pam.beesly@dundermifflin.com\\nRyan Howard ryan.howard@dundermifflin.com\\nStanley Hudson stanley.hudson@dundermifflin.com\\n</code></pre>\\n      </div>\\n<h2>运行时输入参数</h2>\\n<p>上面已经实现了获取命令行参数，但如果想在运行时候接收参数值的话我们就需要另外一个模块<a href=\\\"https://github.com/sboudrias/Inquirer.js\\\">inquirer.js</a>，通过这个模块，用户可以自定义多种参数类型，如文本，密码，单选或者多选列表等。</p>\\n<p>下面的demo会通过inquirer接收邮件发送人的名字，email还有邮件主题。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token keyword\\\">const</span> inquirer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inquirer'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> questions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sender.email\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Sender's email address - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sender.name\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Sender's name - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">{</span>\\n    type <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"input\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    name <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"subject\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    message <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Subject - \\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n\\nprogram\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'List of customers in CSV'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 储存CSV数据</span>\\n<span class=\\\"token keyword\\\">const</span> contactList <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> delimiter <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\",\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nstream\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> name <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" \\\"</span> <span class=\\\"token operator\\\">+</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">let</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n    contactList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token punctuation\\\">:</span> name<span class=\\\"token punctuation\\\">,</span> email <span class=\\\"token punctuation\\\">:</span> email <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'end'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inquirer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span>questions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>answers<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>answers<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Inquire.js的<code class=\\\"language-text\\\">prompt</code>方法接受一个数组参数，数组里可以自定义运行时需要接受的问题参数，在这demo里面，我们想知道发送者的名字还要email还有邮件主题，所以定义了一个<code class=\\\"language-text\\\">questions</code>的数组来储存问题，从对象里面可以看到有一个<code class=\\\"language-text\\\">input</code>的参数，除此外还可以接受<code class=\\\"language-text\\\">password</code>等其他类型，具体可以查询一下<a href=\\\"https://github.com/SBoudrias/Inquirer.js/\\\">inquirer的文档</a>。此外，参数<code class=\\\"language-text\\\">name</code>保存input的key值。<code class=\\\"language-text\\\">prompt</code>方法会返还一个promise对象，promise中会返回一个<code class=\\\"language-text\\\">answer</code>变量，里面带有刚才输入的值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ node broadcast -l input/employees.csv\\n? Sender<span class=\\\"token string\\\">'s email address -  kitssang_demo@163.com\\n? Sender'</span>s name -  kit\\n? Subject - Hello World\\n<span class=\\\"token punctuation\\\">{</span> sender:\\n   <span class=\\\"token punctuation\\\">{</span> email: <span class=\\\"token string\\\">'  kitssang_demo@163.com'</span>,\\n     name: <span class=\\\"token string\\\">'kit'</span> <span class=\\\"token punctuation\\\">}</span>,\\n  subject: <span class=\\\"token string\\\">'Hello World'</span> <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>模拟发送邮件</h2>\\n<p>由于原文使用的<code class=\\\"language-text\\\">sendgrid</code>没有跑通，所以只组装了一下数据模拟了发送邮件。原本的第五部分也在这里一起用上了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token comment\\\">// ...</span>\\nprogram\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">version</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'0.0.1'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">option</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'-l, --list [list]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'list of customers in CSV file'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>argv<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sendEmail</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>to<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">,</span> subject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> sender <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">green</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> receiver <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">green</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>to<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>to<span class=\\\"token punctuation\\\">.</span>email<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">const</span> theme <span class=\\\"token operator\\\">=</span> chalk<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">blue</span><span class=\\\"token punctuation\\\">(</span>subject<span class=\\\"token punctuation\\\">)</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>sender<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> send a mail to </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>receiver<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> and the subject of the email is </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>theme<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 储存CSV数据</span>\\n<span class=\\\"token keyword\\\">let</span> concatList <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">const</span> stream <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createReadStream</span><span class=\\\"token punctuation\\\">(</span>program<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pipe</span><span class=\\\"token punctuation\\\">(</span>csv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    delimiter<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">','</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> name <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' '</span> <span class=\\\"token operator\\\">+</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">const</span> email <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\n\\n    concatList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> name<span class=\\\"token punctuation\\\">,</span>\\n      email<span class=\\\"token punctuation\\\">:</span> email\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'end'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inquirer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prompt</span><span class=\\\"token punctuation\\\">(</span>questions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>ans<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> concatList<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">sendEmail</span><span class=\\\"token punctuation\\\">(</span>concatList<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> ans<span class=\\\"token punctuation\\\">.</span>sender<span class=\\\"token punctuation\\\">,</span> ans<span class=\\\"token punctuation\\\">.</span>subject<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>由于没有异步请求，<code class=\\\"language-text\\\">async</code>模块没有用上，另外使用了<code class=\\\"language-text\\\">chalk</code>模块改变了console打印结果的颜色。</p>\\n<h2>变成bash命令</h2>\\n<p>至此，整个工具已经基本完成，但是如果想像一个普通的bash命令(不加<code class=\\\"language-text\\\">$ node xx</code>)执行，还需要做以下操作。首先，添加<a href=\\\"https://zh.wikipedia.org/wiki/Shebang\\\">shebang</a>在js的头部，让bash知道如何执行这个文件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">#<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">/</span>usr<span class=\\\"token operator\\\">/</span>bin<span class=\\\"token operator\\\">/</span>env node\\n\\n<span class=\\\"token comment\\\">// broadcast.js</span>\\n<span class=\\\"token keyword\\\">const</span> program <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"commander\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> inquirer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"inquirer\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>然后再配置一下<code class=\\\"language-text\\\">package.json</code>使代码可运行</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">…\\n  <span class=\\\"token property\\\">\\\"description\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"CLI utility to broadcast emails\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"main\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"broadcast.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"bin\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"broadcast\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./broadcast.js\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n…\\n</code></pre>\\n      </div>\\n<p>从代码可以看到加了一个<a href=\\\"https://docs.npmjs.com/files/package.json#bin\\\"><code class=\\\"language-text\\\">bin</code></a>的参数，这个参数可以使broadcast命令与broadcast.js建立连接。</p>\\n<p>最后一步，在全局安装一下依赖包。在项目目录运行一下下面的命令。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> -g\\n</code></pre>\\n      </div>\\n<p>然后测试一下命令</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ broadcast --help\\n</code></pre>\\n      </div>\\n<p>需要注意的是，在开发时候如果使用<code class=\\\"language-text\\\">commaner</code>默认给出的命令执行<code class=\\\"language-text\\\">broadcast</code>则在代码中所做的任何更改都是看不见的。假如输入<code class=\\\"language-text\\\">which broadcast</code>，你会发现地址不是你当前目录，所以这时应该要用<code class=\\\"language-text\\\">npm link</code>去查看命令的目录映射。</p>\",\"htmlExcerpt\":\"<blockquote>\\n<p>原文译自<a href=\\\"https://www.smashingmagazine.com/\\\">Smashing Magazine</a> -- <a href=\\\"https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/\\\">[How To Develop An Interactive Command Line Application Using Node.js](https://www.smashingmagazine.com/2017/03/interactive-command-line-application-node-js/)</a></p>\\n</blockquote>\\n<p>相信很多前端都听说过或者使用过<a href=\\\"http://www.gulpjs.com.cn/\\\">Gulp</a>, <a href=\\\"https://cli.angular.io/\\\">Angular CLI</a>, <a href=\\\"https://cordova.apache.org/\\\">Cordova</a>, <a href=\\\"http://yeoman.io/\\\">Yeoman</a>或其他类似的命令行工具。但有想过这些程序是怎么实现的吗？例如在Angular CLI中使用<code>ng new &#x3C;project-name></code>后会建立一个已经有基本配置的angular项目；又或者像Yeoman，也能运行时候输入或者选择配置项，让用户能够自定义项目配置，快速搭建好开发时候需要用到的开发环境。下面的教程，就是讲如何使用node写一个像这样的命令行工具。</p>\\n<p>在这篇教程中，我们会开发一个命令行工具，用户能够输入一个CSV文件地址，从而获取到文件里面的用户信息，然后模拟群发邮件（原文是使用<a href=\\\"https://github.com/sendgrid/sendgrid-nodejs\\\">SendGrid Api</a>模拟发送）\\n文章目录：\\n1.\\\"Hello World\\\"\\n2.处理命令行参数\\n3.运行时输入参数\\n4.模拟发送邮件\\n5.改变输出内容样式\\n6.变成shell命令</p>\\n\"}},{\"node\":{\"frontmatter\":{\"title\":\"React-todo demo\",\"date\":\"2016-03-02\",\"category\":[\"js framework\"],\"tags\":[\"React\",\"Webpack\",\"js框架\"],\"path\":\"/post/react-todo\"},\"excerpt\":\"\\n好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。\\n\\n### 小科普\\n什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！\\n\\n\",\"headings\":[{\"depth\":3,\"value\":\"小科普\"},{\"depth\":3,\"value\":\"Demo功能需求\"},{\"depth\":3,\"value\":\"开始\"},{\"depth\":4,\"value\":\"配置webpack\"},{\"depth\":4,\"value\":\"上代码\"},{\"depth\":4,\"value\":\"App生命 - state\"},{\"depth\":4,\"value\":\"其他组件\"},{\"depth\":3,\"value\":\"总结\"}],\"html\":\"<p>好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。</p>\\n<h3>小科普</h3>\\n<p>什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！</p>\\n<!-- more -->\\n<h3>Demo功能需求</h3>\\n<ul>\\n<li>input输入内容，回车键或按钮增加一条todo</li>\\n<li>checkbox添加完成状态</li>\\n<li>移动到列表时显示删除</li>\\n<li>显示todo总数和已经完成数</li>\\n<li>list全选</li>\\n<li>清除已完成</li>\\n<li>添加动画效果</li>\\n</ul>\\n<h3>开始</h3>\\n<p>开始需要npm安装一下等下要用的packages，如果是checkout我的demo，就动动手指头，install一下，我的demo地址是<a href=\\\"https://github.com/kitwon/react-todo\\\">https://github.com/kitwon/react-todo</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span>\\n</code></pre>\\n      </div>\\n<h4>配置webpack</h4>\\n<p>所有东西安装完成之后首先就是配置<a href=\\\"http://webpack.github.io/docs/\\\">webpack</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tentry <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./src/entry.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\toutput <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tpath <span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"out\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tpublicPath <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"./out/\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\tfilename <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"bundle.js\\\"</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\texternals <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\treact <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"React\\\"</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\tmodule <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tloaders <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.js$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"jsx\\\"</span><span class=\\\"token punctuation\\\">,</span>include<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/src/</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.css$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"style!css\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.less$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"style!css!less\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">{</span> test <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.(jpg|png)$/</span><span class=\\\"token punctuation\\\">,</span> loader <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"url?limit=8192\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">]</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>从上面可以看到，webpack的入口文件是entry.js，打包输出的文件是bundle.js，external属性是告诉webpack，当API已经存在的时候，使用全局变量，并不作任何操作。</p>\\n<p>loader的话没啥，看文档就知道，各种编译打包。具体使用方法可以看官方文档。</p>\\n<h4>上代码</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tReactDOM <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'react-dom'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../less/app.less'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppFooter <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppFooter'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tAppHeader <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppHeader'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\tItemMain <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./ItemMain'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">var</span> App <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\tgetInitialState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttodoItem <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\tisAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//添加todo</span>\\n\\taddItem <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> todoList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>isAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t <span class=\\\"token comment\\\">//更改todo状态</span>\\n\\tchangeTodoState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">,</span> isAllChange<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token comment\\\">// isAllChange = false;</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>isAllChange<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttodoItem<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>todo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\ttodo<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">=</span> isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> todo<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tisAllChecked <span class=\\\"token punctuation\\\">:</span> isDone\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">=</span> isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allChecked</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//删除todo</span>\\n\\tdeleteTodo <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> newTodo <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>todoList<span class=\\\"token punctuation\\\">:</span> newTodo<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//清楚已完成</span>\\n\\tclearDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> doneList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>todoItem<span class=\\\"token punctuation\\\">:</span> doneList<span class=\\\"token punctuation\\\">,</span> isAllChecked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token comment\\\">//全部完成</span>\\n\\tallChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> allCheck <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">every</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>allCheck<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>isAllChecked <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    \\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t<span class=\\\"token keyword\\\">var</span> props <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t\\ttodoLength <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    \\t\\t\\tdoneLength <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> item<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    \\t\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span>\\n    \\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    \\t    \\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    \\t        \\t<span class=\\\"token operator\\\">&lt;</span>div className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"panel\\\"</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>header  className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"mainHeader\\\"</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span>h2<span class=\\\"token operator\\\">></span>Webpack <span class=\\\"token operator\\\">+</span> React TODO Demo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h2<span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>header<span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>AppHeader addItem<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>addItem<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t\\t<span class=\\\"token operator\\\">&lt;</span>ItemMain itemList<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t    \\t<span class=\\\"token operator\\\">&lt;</span>AppFooter <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>props<span class=\\\"token punctuation\\\">}</span> isAllChecked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isAllChecked<span class=\\\"token punctuation\\\">}</span> clearDone<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>clearDone<span class=\\\"token punctuation\\\">}</span> changeAllState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    \\t        \\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    \\t    \\t<span class=\\\"token punctuation\\\">)</span>\\n    \\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>App<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"app\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">//渲染</span>\\n</code></pre>\\n      </div>\\n<p>从代码上面可以看到各种require，没加载commonjs、seajs或其他模块化工具，为什么能直接require呢，而且还有require less，没错，webpack就是那么暴力！js后面都会打包好一个文件，样式都会加载到html里面，做spa时候，和react简直绝配。</p>\\n<h4>App生命 - state</h4>\\n<p>React主流思想就是父组件控制state，然后通过props传递给子组建，所以简单来说界面就像状态机，只要更新state，然后根据新的state重新渲染界面，不需要操作dom，所以react高性能原因也是因为这个。\\n从最上代码就可以看出父组件中的定义的方法基本是整个todo的功能了，然后render方法即渲染html和组件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token operator\\\">&lt;</span>ItemMain itemList<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItem<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>然后取一小段渲染组件代码（上面代码）就可发现，父组件向ItemMain这个组件传了4个属性，其中itemList为state，只要todoItem一更新，react就会重新渲染这个组件，其他三个为方法，方法更新也会重新渲染组件。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// ItemMain.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> Items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./Items'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> ItemMain <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> _this <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>ul className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"itemList\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">{</span>_this<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>itemList<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>todo<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>Items <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>todo<span class=\\\"token punctuation\\\">}</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>_this<span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">--</span>这里不注释代码不高亮，比较奇葩，各位官人将就着看<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> ItemMain<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>看这里估计有点蒙，我自己看的时候也有点蒙，因为太久的代码了哈哈哈。\\n这个js只有一个循环Item的逻辑，首先看看<code class=\\\"language-text\\\">{...todo}</code>这个prop，这个是把itemList[i]中的<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">数组对象解构</a>，然后传到item里面，如果没有...这个字符，则需要</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">\\t<span class=\\\"token operator\\\">&lt;</span>Items text<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span> isDone<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">}</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>index<span class=\\\"token punctuation\\\">}</span> changeTodoState<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>proprs<span class=\\\"token punctuation\\\">.</span>changeTodoState<span class=\\\"token punctuation\\\">}</span> deleteTodo<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>deleteTodo<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\\n<p>具体数据大家可以在代码里面console打印一下，这样印象会更深。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// item.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> Items <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\thandleChange <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> isDone <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeTodoState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleDeleteTodo <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">deleteTodo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> doneStyle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone <span class=\\\"token operator\\\">?</span> <span class=\\\"token punctuation\\\">{</span>textDecoration<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'line-through'</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>textDecoration <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>li key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">}</span> onMouseOver<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerMouseOver<span class=\\\"token punctuation\\\">}</span> onMouseOut<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerMouseOut<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"checkbox\\\"</span> checked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isDone<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>span style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>doneStyle<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-default delete-item\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleDeleteTodo<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> Items<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这个就是js里面有两个方法，一个是改变状态，一个是删除当前todo，这这能发现，两个方法都是执行了又父组件传过来的方法，如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeTodoState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">,</span> isDone<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>执行这个函数，state就会更新，react就会根据状态重新渲染组件</p>\\n<h4>其他组件</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// AppHeader.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppHeader <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\tgetInitialState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandlerKeyUp <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>keyCode <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\t\\t\\t<span class=\\\"token keyword\\\">var</span> newTodoItem <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> value<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tisDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n\\t\\t\\tevent<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addItem</span><span class=\\\"token punctuation\\\">(</span>newTodoItem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleChange <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text <span class=\\\"token punctuation\\\">:</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandlerClick <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> newTodoItem <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\ttext <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\tisDone <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addItem</span><span class=\\\"token punctuation\\\">(</span>newTodoItem<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"appHeader from-group\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"test\\\"</span> className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"form-control\\\"</span> onKeyUp<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerKeyUp<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">}</span> placeholder<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"add one todo\\\"</span> value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-primary\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handlerClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>add one<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> AppHeader<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// AppHeader.js</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'React'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> AppFooter <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\thandleClick <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clearDone</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\thandleAllState <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">changeAllState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\trender <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>section className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"appFooter\\\"</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"checkbox\\\"</span> checked<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>isAllChecked<span class=\\\"token punctuation\\\">}</span> onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleAllState<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>doneLength<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>已经完成 <span class=\\\"token operator\\\">/</span> <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>todoLength<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>总数\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"btn btn-default btn-tiny pull-right\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>clean done<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n\\t\\t\\t<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>section<span class=\\\"token operator\\\">></span>\\n\\t\\t<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> AppFooter<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Header Footer的方法都是大同小异，输入改变state，然后存起来，执行相应操作时候通过props的方法传给父组件，然后重新渲染界面。</p>\\n<h3>总结</h3>\\n<p>回头看代码，react的组件化相比现在的组件化思想真的先进很多。React通过父组件来控制状态，并通过props传递给子组件。因此我们能很容易看出我们的事件属于哪个组件管理，然后修改相应的方法，维护起来相当高效，相比现在的控制dom，每次修改按钮的方法，都需要先找到id或者class，然后绑定响应的方法，假如页面id或者class改变，页面逻辑又非常复杂的话，修改起来是相当麻烦的。\\nReact凭着出色的设计思想和性能，我相信不久就会成为主流的移动端开发方式，至于PC端，大天朝你懂的。</p>\",\"htmlExcerpt\":\"<p>好久之前做得一个todo demo，使用了最近较火的react和webpack，由于公司电脑各种不能装，所以没用上es6（各种限制太惨了），在这顺便做个记录，年纪大记性太差了。</p>\\n<h3>小科普</h3>\\n<p>什么是React? 按官方解释，框架属于MVC中的view层，由于其设计思想独特，性能出众，逻辑简单，所以上年开始越来越多人关注。\\n至于Webpack，各位官人从名字应该可以猜出，是个打包工具，但又不止是个打包工具，是一个支持模块化的打包工具，两个字就可以形容它的优点了，就是暴力，究竟有多暴力，下面demo就为各位官人揭晓！</p>\\n\"}}],\"page\":1,\"pages\":1,\"total\":16,\"limit\":20}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/archive-1.json\n// module id = 283\n// module chunks = 10575460832461"],"sourceRoot":""}